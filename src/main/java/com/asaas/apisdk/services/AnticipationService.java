// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.AnticipationConfigurationGetResponseDto;
import com.asaas.apisdk.models.AnticipationConfigurationUpdateRequestDto;
import com.asaas.apisdk.models.AnticipationGetResponseDto;
import com.asaas.apisdk.models.AnticipationLimitsResponseDto;
import com.asaas.apisdk.models.AnticipationListResponseDto;
import com.asaas.apisdk.models.AnticipationSaveRequestDto;
import com.asaas.apisdk.models.AnticipationSimulateRequestDto;
import com.asaas.apisdk.models.AnticipationSimulateResponseDto;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListAnticipationsParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListAnticipationsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AnticipationService Service
 */
public class AnticipationService extends BaseService {

  public AnticipationService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve a single anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @return response of {@code AnticipationGetResponseDto}
   */
  public AnticipationGetResponseDto retrieveASingleAnticipation(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleAnticipationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {});
  }

  /**
   * Retrieve a single anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @return response of {@code CompletableFuture<AnticipationGetResponseDto>}
   */
  public CompletableFuture<AnticipationGetResponseDto> retrieveASingleAnticipationAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleAnticipationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleAnticipationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List anticipations
   *
   * @return response of {@code AnticipationListResponseDto}
   */
  public AnticipationListResponseDto listAnticipations() throws ApiError, ValidationException {
    return this.listAnticipations(ListAnticipationsParameters.builder().build());
  }

  /**
   * List anticipations
   *
   * @param requestParameters {@link ListAnticipationsParameters} Request Parameters Object
   * @return response of {@code AnticipationListResponseDto}
   */
  public AnticipationListResponseDto listAnticipations(@NonNull ListAnticipationsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListAnticipationsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationListResponseDto>() {});
  }

  /**
   * List anticipations
   *
   * @return response of {@code CompletableFuture<AnticipationListResponseDto>}
   */
  public CompletableFuture<AnticipationListResponseDto> listAnticipationsAsync() throws ApiError, ValidationException {
    return this.listAnticipationsAsync(ListAnticipationsParameters.builder().build());
  }

  /**
   * List anticipations
   *
   * @param requestParameters {@link ListAnticipationsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<AnticipationListResponseDto>}
   */
  public CompletableFuture<AnticipationListResponseDto> listAnticipationsAsync(
    @NonNull ListAnticipationsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListAnticipationsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationListResponseDto>() {})
    );
  }

  private Request buildListAnticipationsRequest(@NonNull ListAnticipationsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListAnticipationsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Request anticipation
   *
   * @param anticipationSaveRequestDto {@link AnticipationSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code AnticipationGetResponseDto}
   */
  public AnticipationGetResponseDto requestAnticipation(
    @NonNull AnticipationSaveRequestDto anticipationSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRequestAnticipationRequest(anticipationSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {});
  }

  /**
   * Request anticipation
   *
   * @param anticipationSaveRequestDto {@link AnticipationSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<AnticipationGetResponseDto>}
   */
  public CompletableFuture<AnticipationGetResponseDto> requestAnticipationAsync(
    @NonNull AnticipationSaveRequestDto anticipationSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRequestAnticipationRequest(anticipationSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {})
    );
  }

  private Request buildRequestAnticipationRequest(
    @NonNull AnticipationSaveRequestDto anticipationSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("installment", anticipationSaveRequestDto.getInstallment())
      .addFormDataPart("payment", anticipationSaveRequestDto.getPayment());
    if (anticipationSaveRequestDto.getDocuments() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documents",
        _filename,
        RequestBody.create(anticipationSaveRequestDto.getDocuments(), MediaType.parse("application/octet-stream"))
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Simulate anticipation
   *
   * @return response of {@code AnticipationSimulateResponseDto}
   */
  public AnticipationSimulateResponseDto simulateAnticipation() throws ApiError {
    return this.simulateAnticipation(AnticipationSimulateRequestDto.builder().build());
  }

  /**
   * Simulate anticipation
   *
   * @param anticipationSimulateRequestDto {@link AnticipationSimulateRequestDto} Request Body
   * @return response of {@code AnticipationSimulateResponseDto}
   */
  public AnticipationSimulateResponseDto simulateAnticipation(
    @NonNull AnticipationSimulateRequestDto anticipationSimulateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateAnticipationRequest(anticipationSimulateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationSimulateResponseDto>() {});
  }

  /**
   * Simulate anticipation
   *
   * @return response of {@code CompletableFuture<AnticipationSimulateResponseDto>}
   */
  public CompletableFuture<AnticipationSimulateResponseDto> simulateAnticipationAsync() throws ApiError {
    return this.simulateAnticipationAsync(AnticipationSimulateRequestDto.builder().build());
  }

  /**
   * Simulate anticipation
   *
   * @param anticipationSimulateRequestDto {@link AnticipationSimulateRequestDto} Request Body
   * @return response of {@code CompletableFuture<AnticipationSimulateResponseDto>}
   */
  public CompletableFuture<AnticipationSimulateResponseDto> simulateAnticipationAsync(
    @NonNull AnticipationSimulateRequestDto anticipationSimulateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateAnticipationRequest(anticipationSimulateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationSimulateResponseDto>() {})
    );
  }

  private Request buildSimulateAnticipationRequest(
    @NonNull AnticipationSimulateRequestDto anticipationSimulateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(anticipationSimulateRequestDto)
      .build();
  }

  /**
   * Retrieve status of automatic anticipation
   *
   * @return response of {@code AnticipationConfigurationGetResponseDto}
   */
  public AnticipationConfigurationGetResponseDto retrieveStatusOfAutomaticAnticipation() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveStatusOfAutomaticAnticipationRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationConfigurationGetResponseDto>() {});
  }

  /**
   * Retrieve status of automatic anticipation
   *
   * @return response of {@code CompletableFuture<AnticipationConfigurationGetResponseDto>}
   */
  public CompletableFuture<AnticipationConfigurationGetResponseDto> retrieveStatusOfAutomaticAnticipationAsync()
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveStatusOfAutomaticAnticipationRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationConfigurationGetResponseDto>() {})
    );
  }

  private Request buildRetrieveStatusOfAutomaticAnticipationRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/configurations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Update status of automatic anticipation
   *
   * @return response of {@code AnticipationConfigurationGetResponseDto}
   */
  public AnticipationConfigurationGetResponseDto updateStatusOfAutomaticAnticipation() throws ApiError {
    return this.updateStatusOfAutomaticAnticipation(AnticipationConfigurationUpdateRequestDto.builder().build());
  }

  /**
   * Update status of automatic anticipation
   *
   * @param anticipationConfigurationUpdateRequestDto {@link AnticipationConfigurationUpdateRequestDto} Request Body
   * @return response of {@code AnticipationConfigurationGetResponseDto}
   */
  public AnticipationConfigurationGetResponseDto updateStatusOfAutomaticAnticipation(
    @NonNull AnticipationConfigurationUpdateRequestDto anticipationConfigurationUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateStatusOfAutomaticAnticipationRequest(anticipationConfigurationUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationConfigurationGetResponseDto>() {});
  }

  /**
   * Update status of automatic anticipation
   *
   * @return response of {@code CompletableFuture<AnticipationConfigurationGetResponseDto>}
   */
  public CompletableFuture<AnticipationConfigurationGetResponseDto> updateStatusOfAutomaticAnticipationAsync()
    throws ApiError {
    return this.updateStatusOfAutomaticAnticipationAsync(AnticipationConfigurationUpdateRequestDto.builder().build());
  }

  /**
   * Update status of automatic anticipation
   *
   * @param anticipationConfigurationUpdateRequestDto {@link AnticipationConfigurationUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<AnticipationConfigurationGetResponseDto>}
   */
  public CompletableFuture<AnticipationConfigurationGetResponseDto> updateStatusOfAutomaticAnticipationAsync(
    @NonNull AnticipationConfigurationUpdateRequestDto anticipationConfigurationUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateStatusOfAutomaticAnticipationRequest(anticipationConfigurationUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationConfigurationGetResponseDto>() {})
    );
  }

  private Request buildUpdateStatusOfAutomaticAnticipationRequest(
    @NonNull AnticipationConfigurationUpdateRequestDto anticipationConfigurationUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/configurations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(anticipationConfigurationUpdateRequestDto)
      .build();
  }

  /**
   * Retrieve anticipation limits
   *
   * @return response of {@code AnticipationLimitsResponseDto}
   */
  public AnticipationLimitsResponseDto retrieveAnticipationLimits() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveAnticipationLimitsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationLimitsResponseDto>() {});
  }

  /**
   * Retrieve anticipation limits
   *
   * @return response of {@code CompletableFuture<AnticipationLimitsResponseDto>}
   */
  public CompletableFuture<AnticipationLimitsResponseDto> retrieveAnticipationLimitsAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveAnticipationLimitsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationLimitsResponseDto>() {})
    );
  }

  private Request buildRetrieveAnticipationLimitsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/limits"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Cancel anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @param input Object Request Body
   * @return response of {@code AnticipationGetResponseDto}
   */
  public AnticipationGetResponseDto cancelAnticipation(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelAnticipationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {});
  }

  /**
   * Cancel anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<AnticipationGetResponseDto>}
   */
  public CompletableFuture<AnticipationGetResponseDto> cancelAnticipationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelAnticipationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AnticipationGetResponseDto>() {})
    );
  }

  private Request buildCancelAnticipationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
