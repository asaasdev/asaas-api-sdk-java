// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ApiPaymentDocumentDeleteResponseDto;
import com.asaas.apisdk.models.ApiPaymentDocumentGetResponseDto;
import com.asaas.apisdk.models.ApiPaymentDocumentListResponseDto;
import com.asaas.apisdk.models.ApiPaymentDocumentSaveRequestDto;
import com.asaas.apisdk.models.ApiPaymentDocumentSaveRequestPaymentDocumentType;
import com.asaas.apisdk.models.ApiPaymentDocumentUpdateRequestDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentDocumentService Service
 */
public class PaymentDocumentService extends BaseService {

  public PaymentDocumentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List documents of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code ApiPaymentDocumentListResponseDto}
   */
  public ApiPaymentDocumentListResponseDto listDocumentsOfAPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListDocumentsOfAPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentListResponseDto>() {});
  }

  /**
   * List documents of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentDocumentListResponseDto>}
   */
  public CompletableFuture<ApiPaymentDocumentListResponseDto> listDocumentsOfAPaymentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListDocumentsOfAPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentListResponseDto>() {})
    );
  }

  private Request buildListDocumentsOfAPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Upload payment documents
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentDocumentSaveRequestDto {@link ApiPaymentDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiPaymentDocumentGetResponseDto}
   */
  public ApiPaymentDocumentGetResponseDto uploadPaymentDocuments(
    @NonNull String id,
    @NonNull ApiPaymentDocumentSaveRequestDto apiPaymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUploadPaymentDocumentsRequest(id, apiPaymentDocumentSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {});
  }

  /**
   * Upload payment documents
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentDocumentSaveRequestDto {@link ApiPaymentDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiPaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentDocumentGetResponseDto> uploadPaymentDocumentsAsync(
    @NonNull String id,
    @NonNull ApiPaymentDocumentSaveRequestDto apiPaymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUploadPaymentDocumentsRequest(id, apiPaymentDocumentSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildUploadPaymentDocumentsRequest(
    @NonNull String id,
    @NonNull ApiPaymentDocumentSaveRequestDto apiPaymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "availableAfterPayment",
            apiPaymentDocumentSaveRequestDto.getAvailableAfterPayment().toString()
          )
          .addFormDataPart("type", apiPaymentDocumentSaveRequestDto.getType().getValue())
          .addFormDataPart(
            "file",
            _filename,
            RequestBody.create(apiPaymentDocumentSaveRequestDto.getFile(), MediaType.parse("application/octet-stream"))
          )
          .build()
      )
      .build();
  }

  /**
   * Retrieve a single document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code ApiPaymentDocumentGetResponseDto}
   */
  public ApiPaymentDocumentGetResponseDto retrieveASingleDocumentOfAPayment(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleDocumentOfAPaymentRequest(id, documentId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {});
  }

  /**
   * Retrieve a single document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code CompletableFuture<ApiPaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentDocumentGetResponseDto> retrieveASingleDocumentOfAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleDocumentOfAPaymentRequest(id, documentId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleDocumentOfAPaymentRequest(@NonNull String id, @NonNull String documentId) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .build();
  }

  /**
   * Update settings of a document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @param apiPaymentDocumentUpdateRequestDto {@link ApiPaymentDocumentUpdateRequestDto} Request Body
   * @return response of {@code ApiPaymentDocumentGetResponseDto}
   */
  public ApiPaymentDocumentGetResponseDto updateSettingsOfADocumentOfAPayment(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull ApiPaymentDocumentUpdateRequestDto apiPaymentDocumentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildUpdateSettingsOfADocumentOfAPaymentRequest(id, documentId, apiPaymentDocumentUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {});
  }

  /**
   * Update settings of a document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @param apiPaymentDocumentUpdateRequestDto {@link ApiPaymentDocumentUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentDocumentGetResponseDto> updateSettingsOfADocumentOfAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull ApiPaymentDocumentUpdateRequestDto apiPaymentDocumentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildUpdateSettingsOfADocumentOfAPaymentRequest(id, documentId, apiPaymentDocumentUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildUpdateSettingsOfADocumentOfAPaymentRequest(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull ApiPaymentDocumentUpdateRequestDto apiPaymentDocumentUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .setJsonContent(apiPaymentDocumentUpdateRequestDto)
      .build();
  }

  /**
   * Delete document from a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code ApiPaymentDocumentDeleteResponseDto}
   */
  public ApiPaymentDocumentDeleteResponseDto deleteDocumentFromAPayment(@NonNull String id, @NonNull String documentId)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildDeleteDocumentFromAPaymentRequest(id, documentId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentDeleteResponseDto>() {});
  }

  /**
   * Delete document from a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code CompletableFuture<ApiPaymentDocumentDeleteResponseDto>}
   */
  public CompletableFuture<ApiPaymentDocumentDeleteResponseDto> deleteDocumentFromAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildDeleteDocumentFromAPaymentRequest(id, documentId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDocumentDeleteResponseDto>() {})
    );
  }

  private Request buildDeleteDocumentFromAPaymentRequest(@NonNull String id, @NonNull String documentId) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .build();
  }
}
