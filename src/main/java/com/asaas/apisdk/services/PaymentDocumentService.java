// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.PaymentDocumentDeleteResponseDto;
import com.asaas.apisdk.models.PaymentDocumentGetResponseDto;
import com.asaas.apisdk.models.PaymentDocumentListResponseDto;
import com.asaas.apisdk.models.PaymentDocumentSaveRequestDto;
import com.asaas.apisdk.models.PaymentDocumentSaveRequestPaymentDocumentType;
import com.asaas.apisdk.models.PaymentDocumentUpdateRequestDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentDocumentService Service
 */
public class PaymentDocumentService extends BaseService {

  public PaymentDocumentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List documents of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentDocumentListResponseDto}
   */
  public PaymentDocumentListResponseDto listDocumentsOfAPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListDocumentsOfAPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDocumentListResponseDto>() {});
  }

  /**
   * List documents of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentDocumentListResponseDto>}
   */
  public CompletableFuture<PaymentDocumentListResponseDto> listDocumentsOfAPaymentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListDocumentsOfAPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDocumentListResponseDto>() {})
    );
  }

  private Request buildListDocumentsOfAPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Upload payment documents
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentDocumentSaveRequestDto {@link PaymentDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code PaymentDocumentGetResponseDto}
   */
  public PaymentDocumentGetResponseDto uploadPaymentDocuments(
    @NonNull String id,
    @NonNull PaymentDocumentSaveRequestDto paymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUploadPaymentDocumentsRequest(id, paymentDocumentSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {});
  }

  /**
   * Upload payment documents
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentDocumentSaveRequestDto {@link PaymentDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<PaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<PaymentDocumentGetResponseDto> uploadPaymentDocumentsAsync(
    @NonNull String id,
    @NonNull PaymentDocumentSaveRequestDto paymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUploadPaymentDocumentsRequest(id, paymentDocumentSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildUploadPaymentDocumentsRequest(
    @NonNull String id,
    @NonNull PaymentDocumentSaveRequestDto paymentDocumentSaveRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart("availableAfterPayment", paymentDocumentSaveRequestDto.getAvailableAfterPayment().toString())
          .addFormDataPart("type", paymentDocumentSaveRequestDto.getType().getValue())
          .addFormDataPart(
            "file",
            _filename,
            RequestBody.create(paymentDocumentSaveRequestDto.getFile(), MediaType.parse("application/octet-stream"))
          )
          .build()
      )
      .build();
  }

  /**
   * Retrieve a single document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code PaymentDocumentGetResponseDto}
   */
  public PaymentDocumentGetResponseDto retrieveASingleDocumentOfAPayment(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleDocumentOfAPaymentRequest(id, documentId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {});
  }

  /**
   * Retrieve a single document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code CompletableFuture<PaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<PaymentDocumentGetResponseDto> retrieveASingleDocumentOfAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleDocumentOfAPaymentRequest(id, documentId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleDocumentOfAPaymentRequest(@NonNull String id, @NonNull String documentId) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .build();
  }

  /**
   * Update settings of a document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @param paymentDocumentUpdateRequestDto {@link PaymentDocumentUpdateRequestDto} Request Body
   * @return response of {@code PaymentDocumentGetResponseDto}
   */
  public PaymentDocumentGetResponseDto updateSettingsOfADocumentOfAPayment(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull PaymentDocumentUpdateRequestDto paymentDocumentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildUpdateSettingsOfADocumentOfAPaymentRequest(id, documentId, paymentDocumentUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {});
  }

  /**
   * Update settings of a document of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @param paymentDocumentUpdateRequestDto {@link PaymentDocumentUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentDocumentGetResponseDto>}
   */
  public CompletableFuture<PaymentDocumentGetResponseDto> updateSettingsOfADocumentOfAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull PaymentDocumentUpdateRequestDto paymentDocumentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildUpdateSettingsOfADocumentOfAPaymentRequest(id, documentId, paymentDocumentUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDocumentGetResponseDto>() {})
    );
  }

  private Request buildUpdateSettingsOfADocumentOfAPaymentRequest(
    @NonNull String id,
    @NonNull String documentId,
    @NonNull PaymentDocumentUpdateRequestDto paymentDocumentUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .setJsonContent(paymentDocumentUpdateRequestDto)
      .build();
  }

  /**
   * Delete document from a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code PaymentDocumentDeleteResponseDto}
   */
  public PaymentDocumentDeleteResponseDto deleteDocumentFromAPayment(@NonNull String id, @NonNull String documentId)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeleteDocumentFromAPaymentRequest(id, documentId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDocumentDeleteResponseDto>() {});
  }

  /**
   * Delete document from a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param documentId String Unique document identifier
   * @return response of {@code CompletableFuture<PaymentDocumentDeleteResponseDto>}
   */
  public CompletableFuture<PaymentDocumentDeleteResponseDto> deleteDocumentFromAPaymentAsync(
    @NonNull String id,
    @NonNull String documentId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeleteDocumentFromAPaymentRequest(id, documentId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDocumentDeleteResponseDto>() {})
    );
  }

  private Request buildDeleteDocumentFromAPaymentRequest(@NonNull String id, @NonNull String documentId) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/documents/{documentId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setPathParameter("documentId", documentId)
      .build();
  }
}
