// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListPaymentsLinksParameters;
import com.asaas.apisdk.models.PaymentLinkDeleteResponseDto;
import com.asaas.apisdk.models.PaymentLinkFileDeleteResponseDto;
import com.asaas.apisdk.models.PaymentLinkFileGetResponseDto;
import com.asaas.apisdk.models.PaymentLinkFileListResponseDto;
import com.asaas.apisdk.models.PaymentLinkFileSaveRequestDto;
import com.asaas.apisdk.models.PaymentLinkGetResponseDto;
import com.asaas.apisdk.models.PaymentLinkListResponseDto;
import com.asaas.apisdk.models.PaymentLinkSaveRequestDto;
import com.asaas.apisdk.models.PaymentLinkUpdateRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentsLinksParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentLinkService Service
 */
public class PaymentLinkService extends BaseService {

  public PaymentLinkService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payments links
   *
   * @return response of {@code PaymentLinkListResponseDto}
   */
  public PaymentLinkListResponseDto listPaymentsLinks() throws ApiError, ValidationException {
    return this.listPaymentsLinks(ListPaymentsLinksParameters.builder().build());
  }

  /**
   * List payments links
   *
   * @param requestParameters {@link ListPaymentsLinksParameters} Request Parameters Object
   * @return response of {@code PaymentLinkListResponseDto}
   */
  public PaymentLinkListResponseDto listPaymentsLinks(@NonNull ListPaymentsLinksParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsLinksRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkListResponseDto>() {});
  }

  /**
   * List payments links
   *
   * @return response of {@code CompletableFuture<PaymentLinkListResponseDto>}
   */
  public CompletableFuture<PaymentLinkListResponseDto> listPaymentsLinksAsync() throws ApiError, ValidationException {
    return this.listPaymentsLinksAsync(ListPaymentsLinksParameters.builder().build());
  }

  /**
   * List payments links
   *
   * @param requestParameters {@link ListPaymentsLinksParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentLinkListResponseDto>}
   */
  public CompletableFuture<PaymentLinkListResponseDto> listPaymentsLinksAsync(
    @NonNull ListPaymentsLinksParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsLinksRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkListResponseDto>() {})
    );
  }

  private Request buildListPaymentsLinksRequest(@NonNull ListPaymentsLinksParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsLinksParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("active", requestParameters.getActive())
      .setOptionalQueryParameter("includeDeleted", requestParameters.getIncludeDeleted())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .build();
  }

  /**
   * Create a payments link
   *
   * @return response of {@code PaymentLinkGetResponseDto}
   */
  public PaymentLinkGetResponseDto createAPaymentsLink() throws ApiError {
    return this.createAPaymentsLink(PaymentLinkSaveRequestDto.builder().build());
  }

  /**
   * Create a payments link
   *
   * @param paymentLinkSaveRequestDto {@link PaymentLinkSaveRequestDto} Request Body
   * @return response of {@code PaymentLinkGetResponseDto}
   */
  public PaymentLinkGetResponseDto createAPaymentsLink(@NonNull PaymentLinkSaveRequestDto paymentLinkSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAPaymentsLinkRequest(paymentLinkSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {});
  }

  /**
   * Create a payments link
   *
   * @return response of {@code CompletableFuture<PaymentLinkGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkGetResponseDto> createAPaymentsLinkAsync() throws ApiError {
    return this.createAPaymentsLinkAsync(PaymentLinkSaveRequestDto.builder().build());
  }

  /**
   * Create a payments link
   *
   * @param paymentLinkSaveRequestDto {@link PaymentLinkSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLinkGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkGetResponseDto> createAPaymentsLinkAsync(
    @NonNull PaymentLinkSaveRequestDto paymentLinkSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAPaymentsLinkRequest(paymentLinkSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {})
    );
  }

  private Request buildCreateAPaymentsLinkRequest(@NonNull PaymentLinkSaveRequestDto paymentLinkSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentLinkSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code PaymentLinkGetResponseDto}
   */
  public PaymentLinkGetResponseDto retrieveASinglePaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {});
  }

  /**
   * Retrieve a single payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<PaymentLinkGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkGetResponseDto> retrieveASinglePaymentsLinkAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param paymentLinkUpdateRequestDto {@link PaymentLinkUpdateRequestDto} Request Body
   * @return response of {@code PaymentLinkGetResponseDto}
   */
  public PaymentLinkGetResponseDto updateAPaymentsLink(
    @NonNull String id,
    @NonNull PaymentLinkUpdateRequestDto paymentLinkUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateAPaymentsLinkRequest(id, paymentLinkUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {});
  }

  /**
   * Update a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param paymentLinkUpdateRequestDto {@link PaymentLinkUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLinkGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkGetResponseDto> updateAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull PaymentLinkUpdateRequestDto paymentLinkUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateAPaymentsLinkRequest(id, paymentLinkUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {})
    );
  }

  private Request buildUpdateAPaymentsLinkRequest(
    @NonNull String id,
    @NonNull PaymentLinkUpdateRequestDto paymentLinkUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentLinkUpdateRequestDto)
      .build();
  }

  /**
   * Remove a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code PaymentLinkDeleteResponseDto}
   */
  public PaymentLinkDeleteResponseDto removeAPaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveAPaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkDeleteResponseDto>() {});
  }

  /**
   * Remove a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<PaymentLinkDeleteResponseDto>}
   */
  public CompletableFuture<PaymentLinkDeleteResponseDto> removeAPaymentsLinkAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveAPaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveAPaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLinkGetResponseDto}
   */
  public PaymentLinkGetResponseDto restoreAPaymentsLink(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreAPaymentsLinkRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {});
  }

  /**
   * Restore a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLinkGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkGetResponseDto> restoreAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreAPaymentsLinkRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkGetResponseDto>() {})
    );
  }

  private Request buildRestoreAPaymentsLinkRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * List images from a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code PaymentLinkFileListResponseDto}
   */
  public PaymentLinkFileListResponseDto listImagesFromAPaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListImagesFromAPaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkFileListResponseDto>() {});
  }

  /**
   * List images from a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<PaymentLinkFileListResponseDto>}
   */
  public CompletableFuture<PaymentLinkFileListResponseDto> listImagesFromAPaymentsLinkAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListImagesFromAPaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkFileListResponseDto>() {})
    );
  }

  private Request buildListImagesFromAPaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/images"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param paymentLinkFileSaveRequestDto {@link PaymentLinkFileSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code PaymentLinkFileGetResponseDto}
   */
  public PaymentLinkFileGetResponseDto addAnImageToAPaymentsLink(
    @NonNull String id,
    @NonNull PaymentLinkFileSaveRequestDto paymentLinkFileSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildAddAnImageToAPaymentsLinkRequest(id, paymentLinkFileSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {});
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param paymentLinkFileSaveRequestDto {@link PaymentLinkFileSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<PaymentLinkFileGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkFileGetResponseDto> addAnImageToAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull PaymentLinkFileSaveRequestDto paymentLinkFileSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildAddAnImageToAPaymentsLinkRequest(id, paymentLinkFileSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {})
    );
  }

  private Request buildAddAnImageToAPaymentsLinkRequest(
    @NonNull String id,
    @NonNull PaymentLinkFileSaveRequestDto paymentLinkFileSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
    if (paymentLinkFileSaveRequestDto.getMain() != null) {
      multipartBodyBuilder.addFormDataPart("main", paymentLinkFileSaveRequestDto.getMain().toString());
    }
    if (paymentLinkFileSaveRequestDto.getImage() != null) {
      multipartBodyBuilder.addFormDataPart(
        "image",
        _filename,
        RequestBody.create(paymentLinkFileSaveRequestDto.getImage(), MediaType.parse("application/octet-stream"))
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/images"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Retrieve a single payments link image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code PaymentLinkFileGetResponseDto}
   */
  public PaymentLinkFileGetResponseDto retrieveASinglePaymentsLinkImage(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentsLinkImageRequest(paymentLinkId, imageId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {});
  }

  /**
   * Retrieve a single payments link image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentLinkFileGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkFileGetResponseDto> retrieveASinglePaymentsLinkImageAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentsLinkImageRequest(paymentLinkId, imageId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentsLinkImageRequest(@NonNull String paymentLinkId, @NonNull String imageId) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .build();
  }

  /**
   * Remove an image from payments link
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code PaymentLinkFileDeleteResponseDto}
   */
  public PaymentLinkFileDeleteResponseDto removeAnImageFromPaymentsLink(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveAnImageFromPaymentsLinkRequest(paymentLinkId, imageId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkFileDeleteResponseDto>() {});
  }

  /**
   * Remove an image from payments link
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentLinkFileDeleteResponseDto>}
   */
  public CompletableFuture<PaymentLinkFileDeleteResponseDto> removeAnImageFromPaymentsLinkAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveAnImageFromPaymentsLinkRequest(paymentLinkId, imageId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkFileDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveAnImageFromPaymentsLinkRequest(@NonNull String paymentLinkId, @NonNull String imageId) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .build();
  }

  /**
   * Set payments link main image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLinkFileGetResponseDto}
   */
  public PaymentLinkFileGetResponseDto setPaymentsLinkMainImage(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSetPaymentsLinkMainImageRequest(paymentLinkId, imageId, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {});
  }

  /**
   * Set payments link main image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLinkFileGetResponseDto>}
   */
  public CompletableFuture<PaymentLinkFileGetResponseDto> setPaymentsLinkMainImageAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSetPaymentsLinkMainImageRequest(paymentLinkId, imageId, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLinkFileGetResponseDto>() {})
    );
  }

  private Request buildSetPaymentsLinkMainImageRequest(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull Object input
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}/setAsMain"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .setJsonContent(input)
      .build();
  }
}
