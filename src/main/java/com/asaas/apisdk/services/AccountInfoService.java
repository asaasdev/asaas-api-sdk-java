// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiCustomerUpdateRequestGetResponseDto;
import com.asaas.apisdk.models.ApiCustomerUpdateRequestSaveRequestDto;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ApiMyAccountDisableAccountResponseDto;
import com.asaas.apisdk.models.ApiMyAccountGetAccountFeesResponseDto;
import com.asaas.apisdk.models.ApiMyAccountGetAccountNumberResponseDto;
import com.asaas.apisdk.models.ApiMyAccountGetStatusResponseDto;
import com.asaas.apisdk.models.ApiPaymentCheckoutConfigGetResponseDto;
import com.asaas.apisdk.models.ApiPaymentCheckoutConfigSaveRequestDto;
import com.asaas.apisdk.models.ApiWalletShowResponseDto;
import com.asaas.apisdk.models.DeleteWhiteLabelSubaccountParameters;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AccountInfoService Service
 */
public class AccountInfoService extends BaseService {

  public AccountInfoService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve business data
   *
   * @return response of {@code ApiCustomerUpdateRequestGetResponseDto}
   */
  public ApiCustomerUpdateRequestGetResponseDto retrieveBusinessData() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveBusinessDataRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {});
  }

  /**
   * Retrieve business data
   *
   * @return response of {@code CompletableFuture<ApiCustomerUpdateRequestGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerUpdateRequestGetResponseDto> retrieveBusinessDataAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveBusinessDataRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {})
    );
  }

  private Request buildRetrieveBusinessDataRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/commercialInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Update business data
   *
   * @return response of {@code ApiCustomerUpdateRequestGetResponseDto}
   */
  public ApiCustomerUpdateRequestGetResponseDto updateBusinessData() throws ApiError {
    return this.updateBusinessData(ApiCustomerUpdateRequestSaveRequestDto.builder().build());
  }

  /**
   * Update business data
   *
   * @param apiCustomerUpdateRequestSaveRequestDto {@link ApiCustomerUpdateRequestSaveRequestDto} Request Body
   * @return response of {@code ApiCustomerUpdateRequestGetResponseDto}
   */
  public ApiCustomerUpdateRequestGetResponseDto updateBusinessData(
    @NonNull ApiCustomerUpdateRequestSaveRequestDto apiCustomerUpdateRequestSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateBusinessDataRequest(apiCustomerUpdateRequestSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {});
  }

  /**
   * Update business data
   *
   * @return response of {@code CompletableFuture<ApiCustomerUpdateRequestGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerUpdateRequestGetResponseDto> updateBusinessDataAsync() throws ApiError {
    return this.updateBusinessDataAsync(ApiCustomerUpdateRequestSaveRequestDto.builder().build());
  }

  /**
   * Update business data
   *
   * @param apiCustomerUpdateRequestSaveRequestDto {@link ApiCustomerUpdateRequestSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerUpdateRequestGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerUpdateRequestGetResponseDto> updateBusinessDataAsync(
    @NonNull ApiCustomerUpdateRequestSaveRequestDto apiCustomerUpdateRequestSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateBusinessDataRequest(apiCustomerUpdateRequestSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {})
    );
  }

  private Request buildUpdateBusinessDataRequest(
    @NonNull ApiCustomerUpdateRequestSaveRequestDto apiCustomerUpdateRequestSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/commercialInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCustomerUpdateRequestSaveRequestDto)
      .build();
  }

  /**
   * Retrieve personalization settings
   *
   * @return response of {@code ApiPaymentCheckoutConfigGetResponseDto}
   */
  public ApiPaymentCheckoutConfigGetResponseDto retrievePersonalizationSettings() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrievePersonalizationSettingsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {});
  }

  /**
   * Retrieve personalization settings
   *
   * @return response of {@code CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto> retrievePersonalizationSettingsAsync()
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrievePersonalizationSettingsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {})
    );
  }

  private Request buildRetrievePersonalizationSettingsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/paymentCheckoutConfig/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Save payment checkout customization
   *
   * @param apiPaymentCheckoutConfigSaveRequestDto {@link ApiPaymentCheckoutConfigSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiPaymentCheckoutConfigGetResponseDto}
   */
  public ApiPaymentCheckoutConfigGetResponseDto savePaymentCheckoutPersonalization(
    @NonNull ApiPaymentCheckoutConfigSaveRequestDto apiPaymentCheckoutConfigSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildSavePaymentCheckoutPersonalizationRequest(apiPaymentCheckoutConfigSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {});
  }

  /**
   * Save payment checkout customization
   *
   * @param apiPaymentCheckoutConfigSaveRequestDto {@link ApiPaymentCheckoutConfigSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto> savePaymentCheckoutPersonalizationAsync(
    @NonNull ApiPaymentCheckoutConfigSaveRequestDto apiPaymentCheckoutConfigSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildSavePaymentCheckoutPersonalizationRequest(apiPaymentCheckoutConfigSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {})
    );
  }

  private Request buildSavePaymentCheckoutPersonalizationRequest(
    @NonNull ApiPaymentCheckoutConfigSaveRequestDto apiPaymentCheckoutConfigSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("logoBackgroundColor", apiPaymentCheckoutConfigSaveRequestDto.getLogoBackgroundColor())
      .addFormDataPart("infoBackgroundColor", apiPaymentCheckoutConfigSaveRequestDto.getInfoBackgroundColor())
      .addFormDataPart("fontColor", apiPaymentCheckoutConfigSaveRequestDto.getFontColor());
    if (apiPaymentCheckoutConfigSaveRequestDto.getEnabled() != null) {
      multipartBodyBuilder.addFormDataPart("enabled", apiPaymentCheckoutConfigSaveRequestDto.getEnabled().toString());
    }
    if (apiPaymentCheckoutConfigSaveRequestDto.getLogoFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "logoFile",
        _filename,
        RequestBody.create(
          apiPaymentCheckoutConfigSaveRequestDto.getLogoFile(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/paymentCheckoutConfig/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Retrieve Asaas account number
   *
   * @return response of {@code ApiMyAccountGetAccountNumberResponseDto}
   */
  public ApiMyAccountGetAccountNumberResponseDto retrieveAsaasAccountNumber() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveAsaasAccountNumberRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiMyAccountGetAccountNumberResponseDto>() {});
  }

  /**
   * Retrieve Asaas account number
   *
   * @return response of {@code CompletableFuture<ApiMyAccountGetAccountNumberResponseDto>}
   */
  public CompletableFuture<ApiMyAccountGetAccountNumberResponseDto> retrieveAsaasAccountNumberAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveAsaasAccountNumberRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiMyAccountGetAccountNumberResponseDto>() {})
    );
  }

  private Request buildRetrieveAsaasAccountNumberRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/accountNumber"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve account fees
   *
   * @return response of {@code ApiMyAccountGetAccountFeesResponseDto}
   */
  public ApiMyAccountGetAccountFeesResponseDto retrieveAccountFees() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveAccountFeesRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiMyAccountGetAccountFeesResponseDto>() {});
  }

  /**
   * Retrieve account fees
   *
   * @return response of {@code CompletableFuture<ApiMyAccountGetAccountFeesResponseDto>}
   */
  public CompletableFuture<ApiMyAccountGetAccountFeesResponseDto> retrieveAccountFeesAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveAccountFeesRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiMyAccountGetAccountFeesResponseDto>() {})
    );
  }

  private Request buildRetrieveAccountFeesRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/fees/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Check account registration status
   *
   * @return response of {@code ApiMyAccountGetStatusResponseDto}
   */
  public ApiMyAccountGetStatusResponseDto checkAccountRegistrationStatus() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCheckAccountRegistrationStatusRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiMyAccountGetStatusResponseDto>() {});
  }

  /**
   * Check account registration status
   *
   * @return response of {@code CompletableFuture<ApiMyAccountGetStatusResponseDto>}
   */
  public CompletableFuture<ApiMyAccountGetStatusResponseDto> checkAccountRegistrationStatusAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCheckAccountRegistrationStatusRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiMyAccountGetStatusResponseDto>() {})
    );
  }

  private Request buildCheckAccountRegistrationStatusRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/status/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve WalletId
   *
   * @return response of {@code ApiWalletShowResponseDto}
   */
  public ApiWalletShowResponseDto retrieveWalletid() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveWalletidRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiWalletShowResponseDto>() {});
  }

  /**
   * Retrieve WalletId
   *
   * @return response of {@code CompletableFuture<ApiWalletShowResponseDto>}
   */
  public CompletableFuture<ApiWalletShowResponseDto> retrieveWalletidAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveWalletidRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiWalletShowResponseDto>() {})
    );
  }

  private Request buildRetrieveWalletidRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/wallets/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Delete White Label subaccount
   *
   * @return response of {@code ApiMyAccountDisableAccountResponseDto}
   */
  public ApiMyAccountDisableAccountResponseDto deleteWhiteLabelSubaccount() throws ApiError {
    return this.deleteWhiteLabelSubaccount(DeleteWhiteLabelSubaccountParameters.builder().build());
  }

  /**
   * Delete White Label subaccount
   *
   * @param requestParameters {@link DeleteWhiteLabelSubaccountParameters} Request Parameters Object
   * @return response of {@code ApiMyAccountDisableAccountResponseDto}
   */
  public ApiMyAccountDisableAccountResponseDto deleteWhiteLabelSubaccount(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildDeleteWhiteLabelSubaccountRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiMyAccountDisableAccountResponseDto>() {});
  }

  /**
   * Delete White Label subaccount
   *
   * @return response of {@code CompletableFuture<ApiMyAccountDisableAccountResponseDto>}
   */
  public CompletableFuture<ApiMyAccountDisableAccountResponseDto> deleteWhiteLabelSubaccountAsync() throws ApiError {
    return this.deleteWhiteLabelSubaccountAsync(DeleteWhiteLabelSubaccountParameters.builder().build());
  }

  /**
   * Delete White Label subaccount
   *
   * @param requestParameters {@link DeleteWhiteLabelSubaccountParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiMyAccountDisableAccountResponseDto>}
   */
  public CompletableFuture<ApiMyAccountDisableAccountResponseDto> deleteWhiteLabelSubaccountAsync(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildDeleteWhiteLabelSubaccountRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiMyAccountDisableAccountResponseDto>() {})
    );
  }

  private Request buildDeleteWhiteLabelSubaccountRequest(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("removeReason", requestParameters.getRemoveReason())
      .build();
  }
}
