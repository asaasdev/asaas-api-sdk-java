// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListTransfersParameters;
import com.asaas.apisdk.models.TransferGetResponseDto;
import com.asaas.apisdk.models.TransferListResponseDto;
import com.asaas.apisdk.models.TransferSaveInternalTransferRequestDto;
import com.asaas.apisdk.models.TransferSaveInternalTransferResponseDto;
import com.asaas.apisdk.models.TransferSaveRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.TransferSaveRequestDtoValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * TransferService Service
 */
public class TransferService extends BaseService {

  public TransferService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List transfers
   *
   * @return response of {@code TransferListResponseDto}
   */
  public TransferListResponseDto listTransfers() throws ApiError {
    return this.listTransfers(ListTransfersParameters.builder().build());
  }

  /**
   * List transfers
   *
   * @param requestParameters {@link ListTransfersParameters} Request Parameters Object
   * @return response of {@code TransferListResponseDto}
   */
  public TransferListResponseDto listTransfers(@NonNull ListTransfersParameters requestParameters) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListTransfersRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferListResponseDto>() {});
  }

  /**
   * List transfers
   *
   * @return response of {@code CompletableFuture<TransferListResponseDto>}
   */
  public CompletableFuture<TransferListResponseDto> listTransfersAsync() throws ApiError {
    return this.listTransfersAsync(ListTransfersParameters.builder().build());
  }

  /**
   * List transfers
   *
   * @param requestParameters {@link ListTransfersParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<TransferListResponseDto>}
   */
  public CompletableFuture<TransferListResponseDto> listTransfersAsync(
    @NonNull ListTransfersParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListTransfersRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferListResponseDto>() {})
    );
  }

  private Request buildListTransfersRequest(@NonNull ListTransfersParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("dateCreatedLe[ge]", requestParameters.getDateCreatedLeGe())
      .setOptionalQueryParameter("dateCreatedLe[le]", requestParameters.getDateCreatedLeLe())
      .setOptionalQueryParameter("transferDate[ge]", requestParameters.getTransferDateGe())
      .setOptionalQueryParameter("transferDate[le]", requestParameters.getTransferDateLe())
      .setOptionalQueryParameter("type", requestParameters.getType())
      .build();
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @return response of {@code TransferGetResponseDto}
   */
  public TransferGetResponseDto transferToAnotherInstitutionAccountOrPixKey() throws ApiError, ValidationException {
    return this.transferToAnotherInstitutionAccountOrPixKey(TransferSaveRequestDto.builder().build());
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @param transferSaveRequestDto {@link TransferSaveRequestDto} Request Body
   * @return response of {@code TransferGetResponseDto}
   */
  public TransferGetResponseDto transferToAnotherInstitutionAccountOrPixKey(
    @NonNull TransferSaveRequestDto transferSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildTransferToAnotherInstitutionAccountOrPixKeyRequest(transferSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {});
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @return response of {@code CompletableFuture<TransferGetResponseDto>}
   */
  public CompletableFuture<TransferGetResponseDto> transferToAnotherInstitutionAccountOrPixKeyAsync()
    throws ApiError, ValidationException {
    return this.transferToAnotherInstitutionAccountOrPixKeyAsync(TransferSaveRequestDto.builder().build());
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @param transferSaveRequestDto {@link TransferSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<TransferGetResponseDto>}
   */
  public CompletableFuture<TransferGetResponseDto> transferToAnotherInstitutionAccountOrPixKeyAsync(
    @NonNull TransferSaveRequestDto transferSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildTransferToAnotherInstitutionAccountOrPixKeyRequest(transferSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {})
    );
  }

  private Request buildTransferToAnotherInstitutionAccountOrPixKeyRequest(
    @NonNull TransferSaveRequestDto transferSaveRequestDto
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new TransferSaveRequestDtoValidator("transferSaveRequestDto").optional().validate(transferSaveRequestDto))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(transferSaveRequestDto)
      .build();
  }

  /**
   * Transfer to Asaas account
   *
   * @return response of {@code TransferSaveInternalTransferResponseDto}
   */
  public TransferSaveInternalTransferResponseDto transferToAsaasAccount() throws ApiError {
    return this.transferToAsaasAccount(TransferSaveInternalTransferRequestDto.builder().build());
  }

  /**
   * Transfer to Asaas account
   *
   * @param transferSaveInternalTransferRequestDto {@link TransferSaveInternalTransferRequestDto} Request Body
   * @return response of {@code TransferSaveInternalTransferResponseDto}
   */
  public TransferSaveInternalTransferResponseDto transferToAsaasAccount(
    @NonNull TransferSaveInternalTransferRequestDto transferSaveInternalTransferRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildTransferToAsaasAccountRequest(transferSaveInternalTransferRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferSaveInternalTransferResponseDto>() {});
  }

  /**
   * Transfer to Asaas account
   *
   * @return response of {@code CompletableFuture<TransferSaveInternalTransferResponseDto>}
   */
  public CompletableFuture<TransferSaveInternalTransferResponseDto> transferToAsaasAccountAsync() throws ApiError {
    return this.transferToAsaasAccountAsync(TransferSaveInternalTransferRequestDto.builder().build());
  }

  /**
   * Transfer to Asaas account
   *
   * @param transferSaveInternalTransferRequestDto {@link TransferSaveInternalTransferRequestDto} Request Body
   * @return response of {@code CompletableFuture<TransferSaveInternalTransferResponseDto>}
   */
  public CompletableFuture<TransferSaveInternalTransferResponseDto> transferToAsaasAccountAsync(
    @NonNull TransferSaveInternalTransferRequestDto transferSaveInternalTransferRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildTransferToAsaasAccountRequest(transferSaveInternalTransferRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferSaveInternalTransferResponseDto>() {})
    );
  }

  private Request buildTransferToAsaasAccountRequest(
    @NonNull TransferSaveInternalTransferRequestDto transferSaveInternalTransferRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(transferSaveInternalTransferRequestDto)
      .build();
  }

  /**
   * Retrieve a single transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code TransferGetResponseDto}
   */
  public TransferGetResponseDto retrieveASingleTransfer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleTransferRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {});
  }

  /**
   * Retrieve a single transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code CompletableFuture<TransferGetResponseDto>}
   */
  public CompletableFuture<TransferGetResponseDto> retrieveASingleTransferAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleTransferRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleTransferRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Cancel a transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code TransferGetResponseDto}
   */
  public TransferGetResponseDto cancelATransfer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelATransferRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {});
  }

  /**
   * Cancel a transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code CompletableFuture<TransferGetResponseDto>}
   */
  public CompletableFuture<TransferGetResponseDto> cancelATransferAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelATransferRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferGetResponseDto>() {})
    );
  }

  private Request buildCancelATransferRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
