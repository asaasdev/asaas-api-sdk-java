// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.GenerateInstallmentBookletParameters;
import com.asaas.apisdk.models.InstallmentDeleteResponseDto;
import com.asaas.apisdk.models.InstallmentGetResponseDto;
import com.asaas.apisdk.models.InstallmentListResponseDto;
import com.asaas.apisdk.models.InstallmentSaveRequestDto;
import com.asaas.apisdk.models.InstallmentSaveWithCreditCardRequestDto;
import com.asaas.apisdk.models.InstallmentUpdateSplitRequestDto;
import com.asaas.apisdk.models.InstallmentUpdateSplitResponseDto;
import com.asaas.apisdk.models.ListInstallmentsParameters;
import com.asaas.apisdk.models.ListPaymentsOfAInstallmentParameters;
import com.asaas.apisdk.models.PaymentListResponseDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListInstallmentsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * InstallmentService Service
 */
public class InstallmentService extends BaseService {

  public InstallmentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List installments
   *
   * @return response of {@code InstallmentListResponseDto}
   */
  public InstallmentListResponseDto listInstallments() throws ApiError, ValidationException {
    return this.listInstallments(ListInstallmentsParameters.builder().build());
  }

  /**
   * List installments
   *
   * @param requestParameters {@link ListInstallmentsParameters} Request Parameters Object
   * @return response of {@code InstallmentListResponseDto}
   */
  public InstallmentListResponseDto listInstallments(@NonNull ListInstallmentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListInstallmentsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentListResponseDto>() {});
  }

  /**
   * List installments
   *
   * @return response of {@code CompletableFuture<InstallmentListResponseDto>}
   */
  public CompletableFuture<InstallmentListResponseDto> listInstallmentsAsync() throws ApiError, ValidationException {
    return this.listInstallmentsAsync(ListInstallmentsParameters.builder().build());
  }

  /**
   * List installments
   *
   * @param requestParameters {@link ListInstallmentsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<InstallmentListResponseDto>}
   */
  public CompletableFuture<InstallmentListResponseDto> listInstallmentsAsync(
    @NonNull ListInstallmentsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListInstallmentsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentListResponseDto>() {})
    );
  }

  private Request buildListInstallmentsRequest(@NonNull ListInstallmentsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListInstallmentsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Create Installment
   *
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto createInstallment() throws ApiError {
    return this.createInstallment(InstallmentSaveRequestDto.builder().build());
  }

  /**
   * Create Installment
   *
   * @param installmentSaveRequestDto {@link InstallmentSaveRequestDto} Request Body
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto createInstallment(@NonNull InstallmentSaveRequestDto installmentSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateInstallmentRequest(installmentSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {});
  }

  /**
   * Create Installment
   *
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> createInstallmentAsync() throws ApiError {
    return this.createInstallmentAsync(InstallmentSaveRequestDto.builder().build());
  }

  /**
   * Create Installment
   *
   * @param installmentSaveRequestDto {@link InstallmentSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> createInstallmentAsync(
    @NonNull InstallmentSaveRequestDto installmentSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateInstallmentRequest(installmentSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {})
    );
  }

  private Request buildCreateInstallmentRequest(@NonNull InstallmentSaveRequestDto installmentSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(installmentSaveRequestDto)
      .build();
  }

  /**
   * Create Installment with credit card
   *
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto createInstallmentWithCreditCard() throws ApiError {
    return this.createInstallmentWithCreditCard(InstallmentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create Installment with credit card
   *
   * @param installmentSaveWithCreditCardRequestDto {@link InstallmentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto createInstallmentWithCreditCard(
    @NonNull InstallmentSaveWithCreditCardRequestDto installmentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateInstallmentWithCreditCardRequest(installmentSaveWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {});
  }

  /**
   * Create Installment with credit card
   *
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> createInstallmentWithCreditCardAsync() throws ApiError {
    return this.createInstallmentWithCreditCardAsync(InstallmentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create Installment with credit card
   *
   * @param installmentSaveWithCreditCardRequestDto {@link InstallmentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> createInstallmentWithCreditCardAsync(
    @NonNull InstallmentSaveWithCreditCardRequestDto installmentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateInstallmentWithCreditCardRequest(installmentSaveWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {})
    );
  }

  private Request buildCreateInstallmentWithCreditCardRequest(
    @NonNull InstallmentSaveWithCreditCardRequestDto installmentSaveWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(installmentSaveWithCreditCardRequestDto)
      .build();
  }

  /**
   * Retrieve a single installment
   *
   * @param id String Unique installment identifier in Asaas
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto retrieveASingleInstallment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleInstallmentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {});
  }

  /**
   * Retrieve a single installment
   *
   * @param id String Unique installment identifier in Asaas
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> retrieveASingleInstallmentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleInstallmentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleInstallmentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Remove installment
   *
   * @param id String Unique identifier of the installment to be removed.
   * @return response of {@code InstallmentDeleteResponseDto}
   */
  public InstallmentDeleteResponseDto removeInstallment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveInstallmentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentDeleteResponseDto>() {});
  }

  /**
   * Remove installment
   *
   * @param id String Unique identifier of the installment to be removed.
   * @return response of {@code CompletableFuture<InstallmentDeleteResponseDto>}
   */
  public CompletableFuture<InstallmentDeleteResponseDto> removeInstallmentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveInstallmentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveInstallmentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List payments of a installment
   *
   * @param id String Unique installment identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfAInstallmentParameters} Request Parameters Object
   * @return response of {@code PaymentListResponseDto}
   */
  public PaymentListResponseDto listPaymentsOfAInstallment(
    @NonNull String id,
    @NonNull ListPaymentsOfAInstallmentParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsOfAInstallmentRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {});
  }

  /**
   * List payments of a installment
   *
   * @param id String Unique installment identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfAInstallmentParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentListResponseDto>}
   */
  public CompletableFuture<PaymentListResponseDto> listPaymentsOfAInstallmentAsync(
    @NonNull String id,
    @NonNull ListPaymentsOfAInstallmentParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsOfAInstallmentRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {})
    );
  }

  private Request buildListPaymentsOfAInstallmentRequest(
    @NonNull String id,
    @NonNull ListPaymentsOfAInstallmentParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id);
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Generate installment booklet
   *
   * @param id String Unique installment identifier in Asaas
   * @param requestParameters {@link GenerateInstallmentBookletParameters} Request Parameters Object
   * @return response of {@code byte[]}
   */
  public byte[] generateInstallmentBooklet(
    @NonNull String id,
    @NonNull GenerateInstallmentBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGenerateInstallmentBookletRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.readBytes(response);
  }

  /**
   * Generate installment booklet
   *
   * @param id String Unique installment identifier in Asaas
   * @param requestParameters {@link GenerateInstallmentBookletParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<byte[]>}
   */
  public CompletableFuture<byte[]> generateInstallmentBookletAsync(
    @NonNull String id,
    @NonNull GenerateInstallmentBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGenerateInstallmentBookletRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response -> ModelConverter.readBytes(response));
  }

  private Request buildGenerateInstallmentBookletRequest(
    @NonNull String id,
    @NonNull GenerateInstallmentBookletParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}/paymentBook"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("sort", requestParameters.getSort())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .build();
  }

  /**
   * Refund installment
   *
   * @param id String Unique identifier of the installment to be refunded.
   * @param input Object Request Body
   * @return response of {@code InstallmentGetResponseDto}
   */
  public InstallmentGetResponseDto refundInstallment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundInstallmentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {});
  }

  /**
   * Refund installment
   *
   * @param id String Unique identifier of the installment to be refunded.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<InstallmentGetResponseDto>}
   */
  public CompletableFuture<InstallmentGetResponseDto> refundInstallmentAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundInstallmentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentGetResponseDto>() {})
    );
  }

  private Request buildRefundInstallmentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}/refund"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Update installment splits
   *
   * @param id String Installment ID
   * @param installmentUpdateSplitRequestDto {@link InstallmentUpdateSplitRequestDto} Request Body
   * @return response of {@code InstallmentUpdateSplitResponseDto}
   */
  public InstallmentUpdateSplitResponseDto updateInstallmentSplits(
    @NonNull String id,
    @NonNull InstallmentUpdateSplitRequestDto installmentUpdateSplitRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateInstallmentSplitsRequest(id, installmentUpdateSplitRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InstallmentUpdateSplitResponseDto>() {});
  }

  /**
   * Update installment splits
   *
   * @param id String Installment ID
   * @param installmentUpdateSplitRequestDto {@link InstallmentUpdateSplitRequestDto} Request Body
   * @return response of {@code CompletableFuture<InstallmentUpdateSplitResponseDto>}
   */
  public CompletableFuture<InstallmentUpdateSplitResponseDto> updateInstallmentSplitsAsync(
    @NonNull String id,
    @NonNull InstallmentUpdateSplitRequestDto installmentUpdateSplitRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateInstallmentSplitsRequest(id, installmentUpdateSplitRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InstallmentUpdateSplitResponseDto>() {})
    );
  }

  private Request buildUpdateInstallmentSplitsRequest(
    @NonNull String id,
    @NonNull InstallmentUpdateSplitRequestDto installmentUpdateSplitRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/installments/{id}/splits"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(installmentUpdateSplitRequestDto)
      .build();
  }
}
