// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListPaymentsParameters;
import com.asaas.apisdk.models.PaymentBillingInfoResponseDto;
import com.asaas.apisdk.models.PaymentDeleteResponseDto;
import com.asaas.apisdk.models.PaymentEscrowGetResponseDto;
import com.asaas.apisdk.models.PaymentGetResponseDto;
import com.asaas.apisdk.models.PaymentIdentificationFieldResponseDto;
import com.asaas.apisdk.models.PaymentLimitsResponseDto;
import com.asaas.apisdk.models.PaymentListResponseDto;
import com.asaas.apisdk.models.PaymentPayWithCreditCardRequestDto;
import com.asaas.apisdk.models.PaymentPixQrCodeResponseDto;
import com.asaas.apisdk.models.PaymentReceiveInCashRequestDto;
import com.asaas.apisdk.models.PaymentRefundRequestDto;
import com.asaas.apisdk.models.PaymentSaveRequestDto;
import com.asaas.apisdk.models.PaymentSaveWithCreditCardRequestDto;
import com.asaas.apisdk.models.PaymentSimulateRequestDto;
import com.asaas.apisdk.models.PaymentSimulateResponseDto;
import com.asaas.apisdk.models.PaymentStatusResponseDto;
import com.asaas.apisdk.models.PaymentUpdateRequestDto;
import com.asaas.apisdk.models.PaymentViewingInfoResponseDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PaymentService Service
 */
public class PaymentService extends BaseService {

  public PaymentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payments
   *
   * @return response of {@code PaymentListResponseDto}
   */
  public PaymentListResponseDto listPayments() throws ApiError, ValidationException {
    return this.listPayments(ListPaymentsParameters.builder().build());
  }

  /**
   * List payments
   *
   * @param requestParameters {@link ListPaymentsParameters} Request Parameters Object
   * @return response of {@code PaymentListResponseDto}
   */
  public PaymentListResponseDto listPayments(@NonNull ListPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {});
  }

  /**
   * List payments
   *
   * @return response of {@code CompletableFuture<PaymentListResponseDto>}
   */
  public CompletableFuture<PaymentListResponseDto> listPaymentsAsync() throws ApiError, ValidationException {
    return this.listPaymentsAsync(ListPaymentsParameters.builder().build());
  }

  /**
   * List payments
   *
   * @param requestParameters {@link ListPaymentsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentListResponseDto>}
   */
  public CompletableFuture<PaymentListResponseDto> listPaymentsAsync(@NonNull ListPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {})
    );
  }

  private Request buildListPaymentsRequest(@NonNull ListPaymentsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("customerGroupName", requestParameters.getCustomerGroupName())
      .setOptionalQueryParameter("subscription", requestParameters.getSubscription())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("paymentDate", requestParameters.getPaymentDate())
      .setOptionalQueryParameter("estimatedCreditDate", requestParameters.getEstimatedCreditDate())
      .setOptionalQueryParameter("pixQrCodeId", requestParameters.getPixQrCodeId())
      .setOptionalQueryParameter("anticipated", requestParameters.getAnticipated())
      .setOptionalQueryParameter("anticipable", requestParameters.getAnticipable())
      .setOptionalQueryParameter("dateCreated[ge]", requestParameters.getDateCreatedGe())
      .setOptionalQueryParameter("dateCreated[le]", requestParameters.getDateCreatedLe())
      .setOptionalQueryParameter("paymentDate[ge]", requestParameters.getPaymentDateGe())
      .setOptionalQueryParameter("paymentDate[le]", requestParameters.getPaymentDateLe())
      .setOptionalQueryParameter("estimatedCreditDate[ge]", requestParameters.getEstimatedCreditDateGe())
      .setOptionalQueryParameter("estimatedCreditDate[le]", requestParameters.getEstimatedCreditDateLe())
      .setOptionalQueryParameter("dueDate[ge]", requestParameters.getDueDateGe())
      .setOptionalQueryParameter("dueDate[le]", requestParameters.getDueDateLe())
      .setOptionalQueryParameter("user", requestParameters.getUser());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getInvoiceStatus() != null) {
      builder.setOptionalQueryParameter("invoiceStatus", requestParameters.getInvoiceStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create new payment
   *
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto createNewPayment() throws ApiError {
    return this.createNewPayment(PaymentSaveRequestDto.builder().build());
  }

  /**
   * Create new payment
   *
   * @param paymentSaveRequestDto {@link PaymentSaveRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto createNewPayment(@NonNull PaymentSaveRequestDto paymentSaveRequestDto) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentRequest(paymentSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Create new payment
   *
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> createNewPaymentAsync() throws ApiError {
    return this.createNewPaymentAsync(PaymentSaveRequestDto.builder().build());
  }

  /**
   * Create new payment
   *
   * @param paymentSaveRequestDto {@link PaymentSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> createNewPaymentAsync(
    @NonNull PaymentSaveRequestDto paymentSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentRequest(paymentSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildCreateNewPaymentRequest(@NonNull PaymentSaveRequestDto paymentSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentSaveRequestDto)
      .build();
  }

  /**
   * Create new payment with credit card
   *
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto createNewPaymentWithCreditCard() throws ApiError {
    return this.createNewPaymentWithCreditCard(PaymentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create new payment with credit card
   *
   * @param paymentSaveWithCreditCardRequestDto {@link PaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto createNewPaymentWithCreditCard(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentWithCreditCardRequest(paymentSaveWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Create new payment with credit card
   *
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> createNewPaymentWithCreditCardAsync() throws ApiError {
    return this.createNewPaymentWithCreditCardAsync(PaymentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create new payment with credit card
   *
   * @param paymentSaveWithCreditCardRequestDto {@link PaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> createNewPaymentWithCreditCardAsync(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentWithCreditCardRequest(paymentSaveWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildCreateNewPaymentWithCreditCardRequest(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentSaveWithCreditCardRequestDto)
      .build();
  }

  /**
   * Capture payment with Pre-Authorization
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto capturePaymentWithPreAuthorization(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Capture payment with Pre-Authorization
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> capturePaymentWithPreAuthorizationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildCapturePaymentWithPreAuthorizationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/captureAuthorizedPayment"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Pay a charge with a credit card
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentPayWithCreditCardRequestDto {@link PaymentPayWithCreditCardRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto payAChargeWithCreditCard(
    @NonNull String id,
    @NonNull PaymentPayWithCreditCardRequestDto paymentPayWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPayAChargeWithCreditCardRequest(id, paymentPayWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Pay a charge with a credit card
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentPayWithCreditCardRequestDto {@link PaymentPayWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> payAChargeWithCreditCardAsync(
    @NonNull String id,
    @NonNull PaymentPayWithCreditCardRequestDto paymentPayWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPayAChargeWithCreditCardRequest(id, paymentPayWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildPayAChargeWithCreditCardRequest(
    @NonNull String id,
    @NonNull PaymentPayWithCreditCardRequestDto paymentPayWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/payWithCreditCard"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentPayWithCreditCardRequestDto)
      .build();
  }

  /**
   * Retrieve payment billing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentBillingInfoResponseDto}
   */
  public PaymentBillingInfoResponseDto retrievePaymentBillingInformation(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrievePaymentBillingInformationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentBillingInfoResponseDto>() {});
  }

  /**
   * Retrieve payment billing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentBillingInfoResponseDto>}
   */
  public CompletableFuture<PaymentBillingInfoResponseDto> retrievePaymentBillingInformationAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrievePaymentBillingInformationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentBillingInfoResponseDto>() {})
    );
  }

  private Request buildRetrievePaymentBillingInformationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/billingInfo"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Payment viewing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentViewingInfoResponseDto}
   */
  public PaymentViewingInfoResponseDto paymentViewingInformation(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPaymentViewingInformationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentViewingInfoResponseDto>() {});
  }

  /**
   * Payment viewing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentViewingInfoResponseDto>}
   */
  public CompletableFuture<PaymentViewingInfoResponseDto> paymentViewingInformationAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPaymentViewingInformationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentViewingInfoResponseDto>() {})
    );
  }

  private Request buildPaymentViewingInformationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/viewingInfo"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Retrieve a single payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto retrieveASinglePayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Retrieve a single payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> retrieveASinglePaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentUpdateRequestDto {@link PaymentUpdateRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto updateExistingPayment(
    @NonNull String id,
    @NonNull PaymentUpdateRequestDto paymentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingPaymentRequest(id, paymentUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Update existing payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentUpdateRequestDto {@link PaymentUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> updateExistingPaymentAsync(
    @NonNull String id,
    @NonNull PaymentUpdateRequestDto paymentUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingPaymentRequest(id, paymentUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingPaymentRequest(
    @NonNull String id,
    @NonNull PaymentUpdateRequestDto paymentUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentUpdateRequestDto)
      .build();
  }

  /**
   * Delete payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentDeleteResponseDto}
   */
  public PaymentDeleteResponseDto deletePayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeletePaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDeleteResponseDto>() {});
  }

  /**
   * Delete payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentDeleteResponseDto>}
   */
  public CompletableFuture<PaymentDeleteResponseDto> deletePaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeletePaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDeleteResponseDto>() {})
    );
  }

  private Request buildDeletePaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore removed payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto restoreRemovedPayment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedPaymentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Restore removed payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> restoreRemovedPaymentAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedPaymentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildRestoreRemovedPaymentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Retrieve status of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentStatusResponseDto}
   */
  public PaymentStatusResponseDto retrieveStatusOfAPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveStatusOfAPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentStatusResponseDto>() {});
  }

  /**
   * Retrieve status of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentStatusResponseDto>}
   */
  public CompletableFuture<PaymentStatusResponseDto> retrieveStatusOfAPaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveStatusOfAPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentStatusResponseDto>() {})
    );
  }

  private Request buildRetrieveStatusOfAPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/status"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Refund payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentRefundRequestDto {@link PaymentRefundRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto refundPayment(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundPaymentRequest(id, paymentRefundRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Refund payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentRefundRequestDto {@link PaymentRefundRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> refundPaymentAsync(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundPaymentRequest(id, paymentRefundRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildRefundPaymentRequest(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/refund"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentRefundRequestDto)
      .build();
  }

  /**
   * Get digitable bill line
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentIdentificationFieldResponseDto}
   */
  public PaymentIdentificationFieldResponseDto getDigitableBillLine(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGetDigitableBillLineRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentIdentificationFieldResponseDto>() {});
  }

  /**
   * Get digitable bill line
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentIdentificationFieldResponseDto>}
   */
  public CompletableFuture<PaymentIdentificationFieldResponseDto> getDigitableBillLineAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGetDigitableBillLineRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentIdentificationFieldResponseDto>() {})
    );
  }

  private Request buildGetDigitableBillLineRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/identificationField"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Get QR Code for Pix payments
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentPixQrCodeResponseDto}
   */
  public PaymentPixQrCodeResponseDto getQrCodeForPixPayments(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGetQrCodeForPixPaymentsRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentPixQrCodeResponseDto>() {});
  }

  /**
   * Get QR Code for Pix payments
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentPixQrCodeResponseDto>}
   */
  public CompletableFuture<PaymentPixQrCodeResponseDto> getQrCodeForPixPaymentsAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGetQrCodeForPixPaymentsRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentPixQrCodeResponseDto>() {})
    );
  }

  private Request buildGetQrCodeForPixPaymentsRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/pixQrCode"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Confirm cash receipt
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentReceiveInCashRequestDto {@link PaymentReceiveInCashRequestDto} Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto confirmCashReceipt(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfirmCashReceiptRequest(id, paymentReceiveInCashRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Confirm cash receipt
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentReceiveInCashRequestDto {@link PaymentReceiveInCashRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> confirmCashReceiptAsync(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfirmCashReceiptRequest(id, paymentReceiveInCashRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildConfirmCashReceiptRequest(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/receiveInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentReceiveInCashRequestDto)
      .build();
  }

  /**
   * Undo cash receipt confirmation
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentGetResponseDto}
   */
  public PaymentGetResponseDto undoCashReceiptConfirmation(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUndoCashReceiptConfirmationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {});
  }

  /**
   * Undo cash receipt confirmation
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentGetResponseDto>}
   */
  public CompletableFuture<PaymentGetResponseDto> undoCashReceiptConfirmationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUndoCashReceiptConfirmationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentGetResponseDto>() {})
    );
  }

  private Request buildUndoCashReceiptConfirmationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/undoReceivedInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Sales simulator
   *
   * @return response of {@code PaymentSimulateResponseDto}
   */
  public PaymentSimulateResponseDto salesSimulator() throws ApiError {
    return this.salesSimulator(PaymentSimulateRequestDto.builder().build());
  }

  /**
   * Sales simulator
   *
   * @param paymentSimulateRequestDto {@link PaymentSimulateRequestDto} Request Body
   * @return response of {@code PaymentSimulateResponseDto}
   */
  public PaymentSimulateResponseDto salesSimulator(@NonNull PaymentSimulateRequestDto paymentSimulateRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSalesSimulatorRequest(paymentSimulateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentSimulateResponseDto>() {});
  }

  /**
   * Sales simulator
   *
   * @return response of {@code CompletableFuture<PaymentSimulateResponseDto>}
   */
  public CompletableFuture<PaymentSimulateResponseDto> salesSimulatorAsync() throws ApiError {
    return this.salesSimulatorAsync(PaymentSimulateRequestDto.builder().build());
  }

  /**
   * Sales simulator
   *
   * @param paymentSimulateRequestDto {@link PaymentSimulateRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentSimulateResponseDto>}
   */
  public CompletableFuture<PaymentSimulateResponseDto> salesSimulatorAsync(
    @NonNull PaymentSimulateRequestDto paymentSimulateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSalesSimulatorRequest(paymentSimulateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentSimulateResponseDto>() {})
    );
  }

  private Request buildSalesSimulatorRequest(@NonNull PaymentSimulateRequestDto paymentSimulateRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentSimulateRequestDto)
      .build();
  }

  /**
   * Retrieve payment escrow in the Escrow Account
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentEscrowGetResponseDto}
   */
  public PaymentEscrowGetResponseDto retrievePaymentEscrowInTheEscrowAccount(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrievePaymentEscrowInTheEscrowAccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentEscrowGetResponseDto>() {});
  }

  /**
   * Retrieve payment escrow in the Escrow Account
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentEscrowGetResponseDto>}
   */
  public CompletableFuture<PaymentEscrowGetResponseDto> retrievePaymentEscrowInTheEscrowAccountAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrievePaymentEscrowInTheEscrowAccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentEscrowGetResponseDto>() {})
    );
  }

  private Request buildRetrievePaymentEscrowInTheEscrowAccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Recovering payment limits
   *
   * @return response of {@code PaymentLimitsResponseDto}
   */
  public PaymentLimitsResponseDto recoveringPaymentLimits() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRecoveringPaymentLimitsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLimitsResponseDto>() {});
  }

  /**
   * Recovering payment limits
   *
   * @return response of {@code CompletableFuture<PaymentLimitsResponseDto>}
   */
  public CompletableFuture<PaymentLimitsResponseDto> recoveringPaymentLimitsAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRecoveringPaymentLimitsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLimitsResponseDto>() {})
    );
  }

  private Request buildRecoveringPaymentLimitsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/limits"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }
}
