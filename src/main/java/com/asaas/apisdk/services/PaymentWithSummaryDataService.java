// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListPaymentsWithSummaryDataParameters;
import com.asaas.apisdk.models.PaymentDeleteResponseDto;
import com.asaas.apisdk.models.PaymentLeanGetResponseDto;
import com.asaas.apisdk.models.PaymentLeanListResponseDto;
import com.asaas.apisdk.models.PaymentLeanSaveWithCreditCardResponseDto;
import com.asaas.apisdk.models.PaymentReceiveInCashRequestDto;
import com.asaas.apisdk.models.PaymentRefundRequestDto;
import com.asaas.apisdk.models.PaymentSaveRequestDto;
import com.asaas.apisdk.models.PaymentSaveWithCreditCardRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentsWithSummaryDataParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PaymentWithSummaryDataService Service
 */
public class PaymentWithSummaryDataService extends BaseService {

  public PaymentWithSummaryDataService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payments with summary data
   *
   * @return response of {@code PaymentLeanListResponseDto}
   */
  public PaymentLeanListResponseDto listPaymentsWithSummaryData() throws ApiError, ValidationException {
    return this.listPaymentsWithSummaryData(ListPaymentsWithSummaryDataParameters.builder().build());
  }

  /**
   * List payments with summary data
   *
   * @param requestParameters {@link ListPaymentsWithSummaryDataParameters} Request Parameters Object
   * @return response of {@code PaymentLeanListResponseDto}
   */
  public PaymentLeanListResponseDto listPaymentsWithSummaryData(
    @NonNull ListPaymentsWithSummaryDataParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsWithSummaryDataRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanListResponseDto>() {});
  }

  /**
   * List payments with summary data
   *
   * @return response of {@code CompletableFuture<PaymentLeanListResponseDto>}
   */
  public CompletableFuture<PaymentLeanListResponseDto> listPaymentsWithSummaryDataAsync()
    throws ApiError, ValidationException {
    return this.listPaymentsWithSummaryDataAsync(ListPaymentsWithSummaryDataParameters.builder().build());
  }

  /**
   * List payments with summary data
   *
   * @param requestParameters {@link ListPaymentsWithSummaryDataParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentLeanListResponseDto>}
   */
  public CompletableFuture<PaymentLeanListResponseDto> listPaymentsWithSummaryDataAsync(
    @NonNull ListPaymentsWithSummaryDataParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsWithSummaryDataRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanListResponseDto>() {})
    );
  }

  private Request buildListPaymentsWithSummaryDataRequest(
    @NonNull ListPaymentsWithSummaryDataParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ListPaymentsWithSummaryDataParametersValidator("requestParameters").optional().validate(requestParameters)
      )
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("customerGroupName", requestParameters.getCustomerGroupName())
      .setOptionalQueryParameter("subscription", requestParameters.getSubscription())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("paymentDate", requestParameters.getPaymentDate())
      .setOptionalQueryParameter("estimatedCreditDate", requestParameters.getEstimatedCreditDate())
      .setOptionalQueryParameter("pixQrCodeId", requestParameters.getPixQrCodeId())
      .setOptionalQueryParameter("anticipated", requestParameters.getAnticipated())
      .setOptionalQueryParameter("anticipable", requestParameters.getAnticipable())
      .setOptionalQueryParameter("dateCreated[ge]", requestParameters.getDateCreatedGe())
      .setOptionalQueryParameter("dateCreated[le]", requestParameters.getDateCreatedLe())
      .setOptionalQueryParameter("paymentDate[ge]", requestParameters.getPaymentDateGe())
      .setOptionalQueryParameter("paymentDate[le]", requestParameters.getPaymentDateLe())
      .setOptionalQueryParameter("estimatedCreditDate[ge]", requestParameters.getEstimatedCreditDateGe())
      .setOptionalQueryParameter("estimatedCreditDate[le]", requestParameters.getEstimatedCreditDateLe())
      .setOptionalQueryParameter("dueDate[ge]", requestParameters.getDueDateGe())
      .setOptionalQueryParameter("dueDate[le]", requestParameters.getDueDateLe())
      .setOptionalQueryParameter("user", requestParameters.getUser());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getInvoiceStatus() != null) {
      builder.setOptionalQueryParameter("invoiceStatus", requestParameters.getInvoiceStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create new payment with summary data in response
   *
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto createNewPaymentWithSummaryDataInResponse() throws ApiError {
    return this.createNewPaymentWithSummaryDataInResponse(PaymentSaveRequestDto.builder().build());
  }

  /**
   * Create new payment with summary data in response
   *
   * @param paymentSaveRequestDto {@link PaymentSaveRequestDto} Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto createNewPaymentWithSummaryDataInResponse(
    @NonNull PaymentSaveRequestDto paymentSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentWithSummaryDataInResponseRequest(paymentSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Create new payment with summary data in response
   *
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> createNewPaymentWithSummaryDataInResponseAsync() throws ApiError {
    return this.createNewPaymentWithSummaryDataInResponseAsync(PaymentSaveRequestDto.builder().build());
  }

  /**
   * Create new payment with summary data in response
   *
   * @param paymentSaveRequestDto {@link PaymentSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> createNewPaymentWithSummaryDataInResponseAsync(
    @NonNull PaymentSaveRequestDto paymentSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewPaymentWithSummaryDataInResponseRequest(paymentSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildCreateNewPaymentWithSummaryDataInResponseRequest(
    @NonNull PaymentSaveRequestDto paymentSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentSaveRequestDto)
      .build();
  }

  /**
   * Create new payment with credit card with summary data in response
   *
   * @return response of {@code PaymentLeanSaveWithCreditCardResponseDto}
   */
  public PaymentLeanSaveWithCreditCardResponseDto createNewPaymentWithCreditCardWithSummaryDataInResponse()
    throws ApiError {
    return this.createNewPaymentWithCreditCardWithSummaryDataInResponse(
        PaymentSaveWithCreditCardRequestDto.builder().build()
      );
  }

  /**
   * Create new payment with credit card with summary data in response
   *
   * @param paymentSaveWithCreditCardRequestDto {@link PaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code PaymentLeanSaveWithCreditCardResponseDto}
   */
  public PaymentLeanSaveWithCreditCardResponseDto createNewPaymentWithCreditCardWithSummaryDataInResponse(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildCreateNewPaymentWithCreditCardWithSummaryDataInResponseRequest(paymentSaveWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanSaveWithCreditCardResponseDto>() {});
  }

  /**
   * Create new payment with credit card with summary data in response
   *
   * @return response of {@code CompletableFuture<PaymentLeanSaveWithCreditCardResponseDto>}
   */
  public CompletableFuture<
    PaymentLeanSaveWithCreditCardResponseDto
  > createNewPaymentWithCreditCardWithSummaryDataInResponseAsync() throws ApiError {
    return this.createNewPaymentWithCreditCardWithSummaryDataInResponseAsync(
        PaymentSaveWithCreditCardRequestDto.builder().build()
      );
  }

  /**
   * Create new payment with credit card with summary data in response
   *
   * @param paymentSaveWithCreditCardRequestDto {@link PaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLeanSaveWithCreditCardResponseDto>}
   */
  public CompletableFuture<
    PaymentLeanSaveWithCreditCardResponseDto
  > createNewPaymentWithCreditCardWithSummaryDataInResponseAsync(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildCreateNewPaymentWithCreditCardWithSummaryDataInResponseRequest(paymentSaveWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanSaveWithCreditCardResponseDto>() {})
    );
  }

  private Request buildCreateNewPaymentWithCreditCardWithSummaryDataInResponseRequest(
    @NonNull PaymentSaveWithCreditCardRequestDto paymentSaveWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(paymentSaveWithCreditCardRequestDto)
      .build();
  }

  /**
   * Capture payment with Pre-Authorization with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto capturePaymentWithPreAuthorizationWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationWithSummaryDataInResponseRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Capture payment with Pre-Authorization with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> capturePaymentWithPreAuthorizationWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationWithSummaryDataInResponseRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildCapturePaymentWithPreAuthorizationWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull Object input
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}/captureAuthorizedPayment"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Retrieve a single payment with summary data
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto retrieveASinglePaymentWithSummaryData(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentWithSummaryDataRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Retrieve a single payment with summary data
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> retrieveASinglePaymentWithSummaryDataAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASinglePaymentWithSummaryDataRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentWithSummaryDataRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto updateExistingPaymentWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingPaymentWithSummaryDataInResponseRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Update existing payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> updateExistingPaymentWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingPaymentWithSummaryDataInResponseRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingPaymentWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull Object input
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Delete payment with summary data
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentDeleteResponseDto}
   */
  public PaymentDeleteResponseDto deletePaymentWithSummaryData(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeletePaymentWithSummaryDataRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDeleteResponseDto>() {});
  }

  /**
   * Delete payment with summary data
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentDeleteResponseDto>}
   */
  public CompletableFuture<PaymentDeleteResponseDto> deletePaymentWithSummaryDataAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeletePaymentWithSummaryDataRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDeleteResponseDto>() {})
    );
  }

  private Request buildDeletePaymentWithSummaryDataRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore removed payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto restoreRemovedPaymentWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedPaymentWithSummaryDataInResponseRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Restore removed payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> restoreRemovedPaymentWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedPaymentWithSummaryDataInResponseRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildRestoreRemovedPaymentWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull Object input
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Refund payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentRefundRequestDto {@link PaymentRefundRequestDto} Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto refundPaymentWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundPaymentWithSummaryDataInResponseRequest(id, paymentRefundRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Refund payment with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentRefundRequestDto {@link PaymentRefundRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> refundPaymentWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRefundPaymentWithSummaryDataInResponseRequest(id, paymentRefundRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildRefundPaymentWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull PaymentRefundRequestDto paymentRefundRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}/refund"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentRefundRequestDto)
      .build();
  }

  /**
   * Confirm cash receipt with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentReceiveInCashRequestDto {@link PaymentReceiveInCashRequestDto} Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto confirmCashReceiptWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfirmCashReceiptWithSummaryDataInResponseRequest(id, paymentReceiveInCashRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Confirm cash receipt with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param paymentReceiveInCashRequestDto {@link PaymentReceiveInCashRequestDto} Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> confirmCashReceiptWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfirmCashReceiptWithSummaryDataInResponseRequest(id, paymentReceiveInCashRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildConfirmCashReceiptWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull PaymentReceiveInCashRequestDto paymentReceiveInCashRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}/receiveInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(paymentReceiveInCashRequestDto)
      .build();
  }

  /**
   * Undo cash receipt confirmation with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code PaymentLeanGetResponseDto}
   */
  public PaymentLeanGetResponseDto undoCashReceiptConfirmationWithSummaryDataInResponse(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUndoCashReceiptConfirmationWithSummaryDataInResponseRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {});
  }

  /**
   * Undo cash receipt confirmation with summary data in response
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentLeanGetResponseDto>}
   */
  public CompletableFuture<PaymentLeanGetResponseDto> undoCashReceiptConfirmationWithSummaryDataInResponseAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUndoCashReceiptConfirmationWithSummaryDataInResponseRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentLeanGetResponseDto>() {})
    );
  }

  private Request buildUndoCashReceiptConfirmationWithSummaryDataInResponseRequest(
    @NonNull String id,
    @NonNull Object input
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/lean/payments/{id}/undoReceivedInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
