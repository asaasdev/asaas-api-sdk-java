// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.AccountDocumentDeleteResponseDto;
import com.asaas.apisdk.models.AccountDocumentGetResponseDto;
import com.asaas.apisdk.models.AccountDocumentSaveRequestAccountDocumentType;
import com.asaas.apisdk.models.AccountDocumentSaveRequestDto;
import com.asaas.apisdk.models.AccountDocumentShowResponseDto;
import com.asaas.apisdk.models.AccountDocumentUpdateRequestDto;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AccountDocumentService Service
 */
public class AccountDocumentService extends BaseService {

  public AccountDocumentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Check pending documents
   *
   * @return response of {@code AccountDocumentShowResponseDto}
   */
  public AccountDocumentShowResponseDto checkPendingDocuments() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AccountDocumentShowResponseDto>() {});
  }

  /**
   * Check pending documents
   *
   * @return response of {@code CompletableFuture<AccountDocumentShowResponseDto>}
   */
  public CompletableFuture<AccountDocumentShowResponseDto> checkPendingDocumentsAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AccountDocumentShowResponseDto>() {})
    );
  }

  private Request buildCheckPendingDocumentsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Send documents
   *
   * @param id String Unique document identifier in Asaas
   * @param accountDocumentSaveRequestDto {@link AccountDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code AccountDocumentGetResponseDto}
   */
  public AccountDocumentGetResponseDto sendDocuments(
    @NonNull String id,
    @NonNull AccountDocumentSaveRequestDto accountDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSendDocumentsRequest(id, accountDocumentSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {});
  }

  /**
   * Send documents
   *
   * @param id String Unique document identifier in Asaas
   * @param accountDocumentSaveRequestDto {@link AccountDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<AccountDocumentGetResponseDto>}
   */
  public CompletableFuture<AccountDocumentGetResponseDto> sendDocumentsAsync(
    @NonNull String id,
    @NonNull AccountDocumentSaveRequestDto accountDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSendDocumentsRequest(id, accountDocumentSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildSendDocumentsRequest(
    @NonNull String id,
    @NonNull AccountDocumentSaveRequestDto accountDocumentSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
    if (accountDocumentSaveRequestDto.getDocumentFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documentFile",
        _filename,
        RequestBody.create(accountDocumentSaveRequestDto.getDocumentFile(), MediaType.parse("application/octet-stream"))
      );
    }
    if (accountDocumentSaveRequestDto.getType() != null) {
      multipartBodyBuilder.addFormDataPart("type", accountDocumentSaveRequestDto.getType().getValue());
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code AccountDocumentGetResponseDto}
   */
  public AccountDocumentGetResponseDto viewDocumentSent(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildViewDocumentSentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {});
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<AccountDocumentGetResponseDto>}
   */
  public CompletableFuture<AccountDocumentGetResponseDto> viewDocumentSentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildViewDocumentSentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildViewDocumentSentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param accountDocumentUpdateRequestDto {@link AccountDocumentUpdateRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code AccountDocumentGetResponseDto}
   */
  public AccountDocumentGetResponseDto updateSentDocument(
    @NonNull String id,
    @NonNull AccountDocumentUpdateRequestDto accountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateSentDocumentRequest(id, accountDocumentUpdateRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {});
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param accountDocumentUpdateRequestDto {@link AccountDocumentUpdateRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<AccountDocumentGetResponseDto>}
   */
  public CompletableFuture<AccountDocumentGetResponseDto> updateSentDocumentAsync(
    @NonNull String id,
    @NonNull AccountDocumentUpdateRequestDto accountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateSentDocumentRequest(id, accountDocumentUpdateRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildUpdateSentDocumentRequest(
    @NonNull String id,
    @NonNull AccountDocumentUpdateRequestDto accountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "documentFile",
            _filename,
            RequestBody.create(
              accountDocumentUpdateRequestDto.getDocumentFile(),
              MediaType.parse("application/octet-stream")
            )
          )
          .build()
      )
      .build();
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code AccountDocumentDeleteResponseDto}
   */
  public AccountDocumentDeleteResponseDto removeSentDocument(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<AccountDocumentDeleteResponseDto>() {});
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<AccountDocumentDeleteResponseDto>}
   */
  public CompletableFuture<AccountDocumentDeleteResponseDto> removeSentDocumentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<AccountDocumentDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveSentDocumentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
