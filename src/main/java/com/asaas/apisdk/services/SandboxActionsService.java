// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ApiPaymentGetResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SandboxActionsService Service
 */
public class SandboxActionsService extends BaseService {

  public SandboxActionsService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * (Sandbox only) Confirm payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto confirmPayment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildConfirmPaymentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * (Sandbox only) Confirm payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> confirmPaymentAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildConfirmPaymentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildConfirmPaymentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/sandbox/payment/{id}/confirm"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * (Sandbox only) Force charge overdue
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto forceExpire(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildForceExpireRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * (Sandbox only) Force charge overdue
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> forceExpireAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildForceExpireRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildForceExpireRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/sandbox/payment/{id}/overdue"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
