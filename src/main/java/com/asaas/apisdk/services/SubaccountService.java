// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiCustomerGetResponseDto;
import com.asaas.apisdk.models.ApiCustomerListResponseDto;
import com.asaas.apisdk.models.ApiCustomerPaymentCustodyConfigDto;
import com.asaas.apisdk.models.ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto;
import com.asaas.apisdk.models.ApiCustomerSaveRequestDto;
import com.asaas.apisdk.models.ApiCustomerSaveResponseDto;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ListSubaccountsParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListSubaccountsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SubaccountService Service
 */
public class SubaccountService extends BaseService {

  public SubaccountService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List subaccounts
   *
   * @return response of {@code ApiCustomerListResponseDto}
   */
  public ApiCustomerListResponseDto listSubaccounts() throws ApiError, ValidationException {
    return this.listSubaccounts(ListSubaccountsParameters.builder().build());
  }

  /**
   * List subaccounts
   *
   * @param requestParameters {@link ListSubaccountsParameters} Request Parameters Object
   * @return response of {@code ApiCustomerListResponseDto}
   */
  public ApiCustomerListResponseDto listSubaccounts(@NonNull ListSubaccountsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListSubaccountsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerListResponseDto>() {});
  }

  /**
   * List subaccounts
   *
   * @return response of {@code CompletableFuture<ApiCustomerListResponseDto>}
   */
  public CompletableFuture<ApiCustomerListResponseDto> listSubaccountsAsync() throws ApiError, ValidationException {
    return this.listSubaccountsAsync(ListSubaccountsParameters.builder().build());
  }

  /**
   * List subaccounts
   *
   * @param requestParameters {@link ListSubaccountsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerListResponseDto>}
   */
  public CompletableFuture<ApiCustomerListResponseDto> listSubaccountsAsync(
    @NonNull ListSubaccountsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListSubaccountsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerListResponseDto>() {})
    );
  }

  private Request buildListSubaccountsRequest(@NonNull ListSubaccountsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListSubaccountsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("cpfCnpj", requestParameters.getCpfCnpj())
      .setOptionalQueryParameter("email", requestParameters.getEmail())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("walletId", requestParameters.getWalletId())
      .build();
  }

  /**
   * Create subaccount
   *
   * @return response of {@code ApiCustomerSaveResponseDto}
   */
  public ApiCustomerSaveResponseDto createSubaccount() throws ApiError {
    return this.createSubaccount(ApiCustomerSaveRequestDto.builder().build());
  }

  /**
   * Create subaccount
   *
   * @param apiCustomerSaveRequestDto {@link ApiCustomerSaveRequestDto} Request Body
   * @return response of {@code ApiCustomerSaveResponseDto}
   */
  public ApiCustomerSaveResponseDto createSubaccount(@NonNull ApiCustomerSaveRequestDto apiCustomerSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateSubaccountRequest(apiCustomerSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerSaveResponseDto>() {});
  }

  /**
   * Create subaccount
   *
   * @return response of {@code CompletableFuture<ApiCustomerSaveResponseDto>}
   */
  public CompletableFuture<ApiCustomerSaveResponseDto> createSubaccountAsync() throws ApiError {
    return this.createSubaccountAsync(ApiCustomerSaveRequestDto.builder().build());
  }

  /**
   * Create subaccount
   *
   * @param apiCustomerSaveRequestDto {@link ApiCustomerSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerSaveResponseDto>}
   */
  public CompletableFuture<ApiCustomerSaveResponseDto> createSubaccountAsync(
    @NonNull ApiCustomerSaveRequestDto apiCustomerSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateSubaccountRequest(apiCustomerSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerSaveResponseDto>() {})
    );
  }

  private Request buildCreateSubaccountRequest(@NonNull ApiCustomerSaveRequestDto apiCustomerSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCustomerSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code ApiCustomerGetResponseDto}
   */
  public ApiCustomerGetResponseDto retrieveASingleSubaccount(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleSubaccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerGetResponseDto>() {});
  }

  /**
   * Retrieve a single subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerGetResponseDto> retrieveASingleSubaccountAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleSubaccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleSubaccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Reterive Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code ApiCustomerPaymentCustodyConfigDto}
   */
  public ApiCustomerPaymentCustodyConfigDto reteriveEscrowAccountConfigurationForSubaccount(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildReteriveEscrowAccountConfigurationForSubaccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {});
  }

  /**
   * Reterive Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerPaymentCustodyConfigDto>}
   */
  public CompletableFuture<ApiCustomerPaymentCustodyConfigDto> reteriveEscrowAccountConfigurationForSubaccountAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildReteriveEscrowAccountConfigurationForSubaccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {})
    );
  }

  private Request buildReteriveEscrowAccountConfigurationForSubaccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Save or update Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @param apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto {@link ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto} Request Body
   * @return response of {@code ApiCustomerPaymentCustodyConfigDto}
   */
  public ApiCustomerPaymentCustodyConfigDto saveOrUpdateEscrowAccountConfigurationForSubaccount(
    @NonNull String id,
    @NonNull ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
          id,
          apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto
        );
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {});
  }

  /**
   * Save or update Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @param apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto {@link ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerPaymentCustodyConfigDto>}
   */
  public CompletableFuture<ApiCustomerPaymentCustodyConfigDto> saveOrUpdateEscrowAccountConfigurationForSubaccountAsync(
    @NonNull String id,
    @NonNull ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request =
      this.buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
          id,
          apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto
        );
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {})
    );
  }

  private Request buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
    @NonNull String id,
    @NonNull ApiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiCustomerSaveOrUpdatePaymentCustodyConfigRequestDto)
      .build();
  }
}
