// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.CheckoutSessionResponseDto;
import com.asaas.apisdk.models.CheckoutSessionSaveRequestDto;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.CheckoutSessionSaveRequestDtoValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CheckoutService Service
 */
public class CheckoutService extends BaseService {

  public CheckoutService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create new checkout
   *
   * @return response of {@code CheckoutSessionResponseDto}
   */
  public CheckoutSessionResponseDto createNewCheckout() throws ApiError, ValidationException {
    return this.createNewCheckout(CheckoutSessionSaveRequestDto.builder().build());
  }

  /**
   * Create new checkout
   *
   * @param checkoutSessionSaveRequestDto {@link CheckoutSessionSaveRequestDto} Request Body
   * @return response of {@code CheckoutSessionResponseDto}
   */
  public CheckoutSessionResponseDto createNewCheckout(
    @NonNull CheckoutSessionSaveRequestDto checkoutSessionSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewCheckoutRequest(checkoutSessionSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CheckoutSessionResponseDto>() {});
  }

  /**
   * Create new checkout
   *
   * @return response of {@code CompletableFuture<CheckoutSessionResponseDto>}
   */
  public CompletableFuture<CheckoutSessionResponseDto> createNewCheckoutAsync() throws ApiError, ValidationException {
    return this.createNewCheckoutAsync(CheckoutSessionSaveRequestDto.builder().build());
  }

  /**
   * Create new checkout
   *
   * @param checkoutSessionSaveRequestDto {@link CheckoutSessionSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<CheckoutSessionResponseDto>}
   */
  public CompletableFuture<CheckoutSessionResponseDto> createNewCheckoutAsync(
    @NonNull CheckoutSessionSaveRequestDto checkoutSessionSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewCheckoutRequest(checkoutSessionSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CheckoutSessionResponseDto>() {})
    );
  }

  private Request buildCreateNewCheckoutRequest(@NonNull CheckoutSessionSaveRequestDto checkoutSessionSaveRequestDto)
    throws ValidationException {
    new ViolationAggregator()
      .add(
        new CheckoutSessionSaveRequestDtoValidator("checkoutSessionSaveRequestDto")
          .optional()
          .validate(checkoutSessionSaveRequestDto)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/checkouts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(checkoutSessionSaveRequestDto)
      .build();
  }

  /**
   * Cancel a checkout
   *
   * @param id String Unique identifier of checkout in Asaas
   * @param input Object Request Body
   * @return response of {@code CheckoutSessionResponseDto}
   */
  public CheckoutSessionResponseDto cancelACheckout(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelACheckoutRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CheckoutSessionResponseDto>() {});
  }

  /**
   * Cancel a checkout
   *
   * @param id String Unique identifier of checkout in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<CheckoutSessionResponseDto>}
   */
  public CompletableFuture<CheckoutSessionResponseDto> cancelACheckoutAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelACheckoutRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CheckoutSessionResponseDto>() {})
    );
  }

  private Request buildCancelACheckoutRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/checkouts/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
