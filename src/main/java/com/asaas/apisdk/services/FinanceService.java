// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.BillingStatisticsParameters;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.FinanceBalanceResponseDto;
import com.asaas.apisdk.models.FinanceGetPaymentStatisticsResponseDto;
import com.asaas.apisdk.models.FinanceGetSplitStatisticsResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * FinanceService Service
 */
public class FinanceService extends BaseService {

  public FinanceService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve account balance
   *
   * @return response of {@code FinanceBalanceResponseDto}
   */
  public FinanceBalanceResponseDto retrieveAccountBalance() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveAccountBalanceRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FinanceBalanceResponseDto>() {});
  }

  /**
   * Retrieve account balance
   *
   * @return response of {@code CompletableFuture<FinanceBalanceResponseDto>}
   */
  public CompletableFuture<FinanceBalanceResponseDto> retrieveAccountBalanceAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveAccountBalanceRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FinanceBalanceResponseDto>() {})
    );
  }

  private Request buildRetrieveAccountBalanceRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/finance/balance"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Collections statistics
   *
   * @return response of {@code FinanceGetPaymentStatisticsResponseDto}
   */
  public FinanceGetPaymentStatisticsResponseDto billingStatistics() throws ApiError {
    return this.billingStatistics(BillingStatisticsParameters.builder().build());
  }

  /**
   * Collections statistics
   *
   * @param requestParameters {@link BillingStatisticsParameters} Request Parameters Object
   * @return response of {@code FinanceGetPaymentStatisticsResponseDto}
   */
  public FinanceGetPaymentStatisticsResponseDto billingStatistics(
    @NonNull BillingStatisticsParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildBillingStatisticsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FinanceGetPaymentStatisticsResponseDto>() {});
  }

  /**
   * Collections statistics
   *
   * @return response of {@code CompletableFuture<FinanceGetPaymentStatisticsResponseDto>}
   */
  public CompletableFuture<FinanceGetPaymentStatisticsResponseDto> billingStatisticsAsync() throws ApiError {
    return this.billingStatisticsAsync(BillingStatisticsParameters.builder().build());
  }

  /**
   * Collections statistics
   *
   * @param requestParameters {@link BillingStatisticsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<FinanceGetPaymentStatisticsResponseDto>}
   */
  public CompletableFuture<FinanceGetPaymentStatisticsResponseDto> billingStatisticsAsync(
    @NonNull BillingStatisticsParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildBillingStatisticsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FinanceGetPaymentStatisticsResponseDto>() {})
    );
  }

  private Request buildBillingStatisticsRequest(@NonNull BillingStatisticsParameters requestParameters) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/finance/payment/statistics"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("anticipated", requestParameters.getAnticipated())
      .setOptionalQueryParameter("dateCreated[ge]", requestParameters.getDateCreatedGe())
      .setOptionalQueryParameter("dateCreated[le]", requestParameters.getDateCreatedLe())
      .setOptionalQueryParameter("dueDate[ge]", requestParameters.getDueDateGe())
      .setOptionalQueryParameter("dueDate[le]", requestParameters.getDueDateLe())
      .setOptionalQueryParameter("estimatedCreditDate[ge]", requestParameters.getEstimatedCreditDateGe())
      .setOptionalQueryParameter("estimatedCreditDate[le]", requestParameters.getEstimatedCreditDateLe())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Retrieve split values
   *
   * @return response of {@code FinanceGetSplitStatisticsResponseDto}
   */
  public FinanceGetSplitStatisticsResponseDto retrieveSplitValues() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveSplitValuesRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FinanceGetSplitStatisticsResponseDto>() {});
  }

  /**
   * Retrieve split values
   *
   * @return response of {@code CompletableFuture<FinanceGetSplitStatisticsResponseDto>}
   */
  public CompletableFuture<FinanceGetSplitStatisticsResponseDto> retrieveSplitValuesAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveSplitValuesRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FinanceGetSplitStatisticsResponseDto>() {})
    );
  }

  private Request buildRetrieveSplitValuesRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/finance/split/statistics"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }
}
