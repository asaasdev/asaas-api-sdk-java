// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiCustomerAccountDeleteResponseDto;
import com.asaas.apisdk.models.ApiCustomerAccountGetResponseDto;
import com.asaas.apisdk.models.ApiCustomerAccountListResponseDto;
import com.asaas.apisdk.models.ApiCustomerAccountSaveRequestDto;
import com.asaas.apisdk.models.ApiCustomerAccountUpdateRequestDto;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ApiNotificationListResponseDto;
import com.asaas.apisdk.models.ListCustomersParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListCustomersParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CustomerService Service
 */
public class CustomerService extends BaseService {

  public CustomerService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List customers
   *
   * @return response of {@code ApiCustomerAccountListResponseDto}
   */
  public ApiCustomerAccountListResponseDto listCustomers() throws ApiError, ValidationException {
    return this.listCustomers(ListCustomersParameters.builder().build());
  }

  /**
   * List customers
   *
   * @param requestParameters {@link ListCustomersParameters} Request Parameters Object
   * @return response of {@code ApiCustomerAccountListResponseDto}
   */
  public ApiCustomerAccountListResponseDto listCustomers(@NonNull ListCustomersParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListCustomersRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountListResponseDto>() {});
  }

  /**
   * List customers
   *
   * @return response of {@code CompletableFuture<ApiCustomerAccountListResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountListResponseDto> listCustomersAsync()
    throws ApiError, ValidationException {
    return this.listCustomersAsync(ListCustomersParameters.builder().build());
  }

  /**
   * List customers
   *
   * @param requestParameters {@link ListCustomersParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerAccountListResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountListResponseDto> listCustomersAsync(
    @NonNull ListCustomersParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListCustomersRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountListResponseDto>() {})
    );
  }

  private Request buildListCustomersRequest(@NonNull ListCustomersParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListCustomersParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("email", requestParameters.getEmail())
      .setOptionalQueryParameter("cpfCnpj", requestParameters.getCpfCnpj())
      .setOptionalQueryParameter("groupName", requestParameters.getGroupName())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .build();
  }

  /**
   * Create new customer
   *
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto createNewCustomer() throws ApiError {
    return this.createNewCustomer(ApiCustomerAccountSaveRequestDto.builder().build());
  }

  /**
   * Create new customer
   *
   * @param apiCustomerAccountSaveRequestDto {@link ApiCustomerAccountSaveRequestDto} Request Body
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto createNewCustomer(
    @NonNull ApiCustomerAccountSaveRequestDto apiCustomerAccountSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateNewCustomerRequest(apiCustomerAccountSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Create new customer
   *
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> createNewCustomerAsync() throws ApiError {
    return this.createNewCustomerAsync(ApiCustomerAccountSaveRequestDto.builder().build());
  }

  /**
   * Create new customer
   *
   * @param apiCustomerAccountSaveRequestDto {@link ApiCustomerAccountSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> createNewCustomerAsync(
    @NonNull ApiCustomerAccountSaveRequestDto apiCustomerAccountSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateNewCustomerRequest(apiCustomerAccountSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildCreateNewCustomerRequest(
    @NonNull ApiCustomerAccountSaveRequestDto apiCustomerAccountSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCustomerAccountSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto retrieveASingleCustomer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleCustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Retrieve a single customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> retrieveASingleCustomerAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleCustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleCustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing customer
   *
   * @param id String Unique identifier of the customer to be updated.
   * @param apiCustomerAccountUpdateRequestDto {@link ApiCustomerAccountUpdateRequestDto} Request Body
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto updateExistingCustomer(
    @NonNull String id,
    @NonNull ApiCustomerAccountUpdateRequestDto apiCustomerAccountUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingCustomerRequest(id, apiCustomerAccountUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Update existing customer
   *
   * @param id String Unique identifier of the customer to be updated.
   * @param apiCustomerAccountUpdateRequestDto {@link ApiCustomerAccountUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> updateExistingCustomerAsync(
    @NonNull String id,
    @NonNull ApiCustomerAccountUpdateRequestDto apiCustomerAccountUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingCustomerRequest(id, apiCustomerAccountUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingCustomerRequest(
    @NonNull String id,
    @NonNull ApiCustomerAccountUpdateRequestDto apiCustomerAccountUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiCustomerAccountUpdateRequestDto)
      .build();
  }

  /**
   * Remove Customer
   *
   * @param id String Unique identifier of the customer to be removed
   * @return response of {@code ApiCustomerAccountDeleteResponseDto}
   */
  public ApiCustomerAccountDeleteResponseDto removeCustomer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRemoveCustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountDeleteResponseDto>() {});
  }

  /**
   * Remove Customer
   *
   * @param id String Unique identifier of the customer to be removed
   * @return response of {@code CompletableFuture<ApiCustomerAccountDeleteResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountDeleteResponseDto> removeCustomerAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRemoveCustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveCustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore removed customer
   *
   * @param id String Unique identifier of the client to be restored.
   * @param input Object Request Body
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto restoreRemovedCustomer(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedCustomerRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Restore removed customer
   *
   * @param id String Unique identifier of the client to be restored.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> restoreRemovedCustomerAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRestoreRemovedCustomerRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildRestoreRemovedCustomerRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Retrieve notifications from a customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code ApiNotificationListResponseDto}
   */
  public ApiNotificationListResponseDto retrieveNotificationsFromACustomer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveNotificationsFromACustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiNotificationListResponseDto>() {});
  }

  /**
   * Retrieve notifications from a customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code CompletableFuture<ApiNotificationListResponseDto>}
   */
  public CompletableFuture<ApiNotificationListResponseDto> retrieveNotificationsFromACustomerAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveNotificationsFromACustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiNotificationListResponseDto>() {})
    );
  }

  private Request buildRetrieveNotificationsFromACustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}/notifications"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
