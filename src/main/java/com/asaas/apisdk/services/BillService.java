// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.BillGetResponseDto;
import com.asaas.apisdk.models.BillListResponseDto;
import com.asaas.apisdk.models.BillSaveRequestDto;
import com.asaas.apisdk.models.BillSimulateRequestDto;
import com.asaas.apisdk.models.BillSimulateResponseDto;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListBillPaymentsParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListBillPaymentsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * BillService Service
 */
public class BillService extends BaseService {

  public BillService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List bill payments
   *
   * @return response of {@code BillListResponseDto}
   */
  public BillListResponseDto listBillPayments() throws ApiError, ValidationException {
    return this.listBillPayments(ListBillPaymentsParameters.builder().build());
  }

  /**
   * List bill payments
   *
   * @param requestParameters {@link ListBillPaymentsParameters} Request Parameters Object
   * @return response of {@code BillListResponseDto}
   */
  public BillListResponseDto listBillPayments(@NonNull ListBillPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListBillPaymentsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<BillListResponseDto>() {});
  }

  /**
   * List bill payments
   *
   * @return response of {@code CompletableFuture<BillListResponseDto>}
   */
  public CompletableFuture<BillListResponseDto> listBillPaymentsAsync() throws ApiError, ValidationException {
    return this.listBillPaymentsAsync(ListBillPaymentsParameters.builder().build());
  }

  /**
   * List bill payments
   *
   * @param requestParameters {@link ListBillPaymentsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<BillListResponseDto>}
   */
  public CompletableFuture<BillListResponseDto> listBillPaymentsAsync(
    @NonNull ListBillPaymentsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListBillPaymentsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<BillListResponseDto>() {})
    );
  }

  private Request buildListBillPaymentsRequest(@NonNull ListBillPaymentsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListBillPaymentsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Create a bill payment
   *
   * @return response of {@code BillGetResponseDto}
   */
  public BillGetResponseDto createABillPayment() throws ApiError {
    return this.createABillPayment(BillSaveRequestDto.builder().build());
  }

  /**
   * Create a bill payment
   *
   * @param billSaveRequestDto {@link BillSaveRequestDto} Request Body
   * @return response of {@code BillGetResponseDto}
   */
  public BillGetResponseDto createABillPayment(@NonNull BillSaveRequestDto billSaveRequestDto) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateABillPaymentRequest(billSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {});
  }

  /**
   * Create a bill payment
   *
   * @return response of {@code CompletableFuture<BillGetResponseDto>}
   */
  public CompletableFuture<BillGetResponseDto> createABillPaymentAsync() throws ApiError {
    return this.createABillPaymentAsync(BillSaveRequestDto.builder().build());
  }

  /**
   * Create a bill payment
   *
   * @param billSaveRequestDto {@link BillSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<BillGetResponseDto>}
   */
  public CompletableFuture<BillGetResponseDto> createABillPaymentAsync(@NonNull BillSaveRequestDto billSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateABillPaymentRequest(billSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {})
    );
  }

  private Request buildCreateABillPaymentRequest(@NonNull BillSaveRequestDto billSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(billSaveRequestDto)
      .build();
  }

  /**
   * Simulate a bill payment
   *
   * @return response of {@code BillSimulateResponseDto}
   */
  public BillSimulateResponseDto simulateABillPayment() throws ApiError {
    return this.simulateABillPayment(BillSimulateRequestDto.builder().build());
  }

  /**
   * Simulate a bill payment
   *
   * @param billSimulateRequestDto {@link BillSimulateRequestDto} Request Body
   * @return response of {@code BillSimulateResponseDto}
   */
  public BillSimulateResponseDto simulateABillPayment(@NonNull BillSimulateRequestDto billSimulateRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateABillPaymentRequest(billSimulateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<BillSimulateResponseDto>() {});
  }

  /**
   * Simulate a bill payment
   *
   * @return response of {@code CompletableFuture<BillSimulateResponseDto>}
   */
  public CompletableFuture<BillSimulateResponseDto> simulateABillPaymentAsync() throws ApiError {
    return this.simulateABillPaymentAsync(BillSimulateRequestDto.builder().build());
  }

  /**
   * Simulate a bill payment
   *
   * @param billSimulateRequestDto {@link BillSimulateRequestDto} Request Body
   * @return response of {@code CompletableFuture<BillSimulateResponseDto>}
   */
  public CompletableFuture<BillSimulateResponseDto> simulateABillPaymentAsync(
    @NonNull BillSimulateRequestDto billSimulateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateABillPaymentRequest(billSimulateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<BillSimulateResponseDto>() {})
    );
  }

  private Request buildSimulateABillPaymentRequest(@NonNull BillSimulateRequestDto billSimulateRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(billSimulateRequestDto)
      .build();
  }

  /**
   * Retrieve a single bill payment
   *
   * @param id String Unique bill payment identifier in Asaas
   * @return response of {@code BillGetResponseDto}
   */
  public BillGetResponseDto retrieveASingleBillPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleBillPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {});
  }

  /**
   * Retrieve a single bill payment
   *
   * @param id String Unique bill payment identifier in Asaas
   * @return response of {@code CompletableFuture<BillGetResponseDto>}
   */
  public CompletableFuture<BillGetResponseDto> retrieveASingleBillPaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleBillPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleBillPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Cancel bill payments
   *
   * @param id String Unique identifier of the bill payment to be cancelled
   * @param input Object Request Body
   * @return response of {@code BillGetResponseDto}
   */
  public BillGetResponseDto cancelBillPayment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelBillPaymentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {});
  }

  /**
   * Cancel bill payments
   *
   * @param id String Unique identifier of the bill payment to be cancelled
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<BillGetResponseDto>}
   */
  public CompletableFuture<BillGetResponseDto> cancelBillPaymentAsync(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelBillPaymentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<BillGetResponseDto>() {})
    );
  }

  private Request buildCancelBillPaymentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
