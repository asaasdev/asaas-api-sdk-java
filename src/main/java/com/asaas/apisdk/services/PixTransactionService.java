// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListTransactionsParameters;
import com.asaas.apisdk.models.PixQrCodeDecodeRequestDto;
import com.asaas.apisdk.models.PixQrCodeDecodeResponseDto;
import com.asaas.apisdk.models.PixTransactionGetResponseDto;
import com.asaas.apisdk.models.PixTransactionListResponseDto;
import com.asaas.apisdk.models.PixTransactionSaveRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListTransactionsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PixTransactionService Service
 */
public class PixTransactionService extends BaseService {

  public PixTransactionService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Pay a QRCode
   *
   * @return response of {@code PixTransactionGetResponseDto}
   */
  public PixTransactionGetResponseDto payAQrcode() throws ApiError {
    return this.payAQrcode(PixTransactionSaveRequestDto.builder().build());
  }

  /**
   * Pay a QRCode
   *
   * @param pixTransactionSaveRequestDto {@link PixTransactionSaveRequestDto} Request Body
   * @return response of {@code PixTransactionGetResponseDto}
   */
  public PixTransactionGetResponseDto payAQrcode(@NonNull PixTransactionSaveRequestDto pixTransactionSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPayAQrcodeRequest(pixTransactionSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {});
  }

  /**
   * Pay a QRCode
   *
   * @return response of {@code CompletableFuture<PixTransactionGetResponseDto>}
   */
  public CompletableFuture<PixTransactionGetResponseDto> payAQrcodeAsync() throws ApiError {
    return this.payAQrcodeAsync(PixTransactionSaveRequestDto.builder().build());
  }

  /**
   * Pay a QRCode
   *
   * @param pixTransactionSaveRequestDto {@link PixTransactionSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PixTransactionGetResponseDto>}
   */
  public CompletableFuture<PixTransactionGetResponseDto> payAQrcodeAsync(
    @NonNull PixTransactionSaveRequestDto pixTransactionSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildPayAQrcodeRequest(pixTransactionSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {})
    );
  }

  private Request buildPayAQrcodeRequest(@NonNull PixTransactionSaveRequestDto pixTransactionSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/pay"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(pixTransactionSaveRequestDto)
      .build();
  }

  /**
   * Decode a QRCode for payment
   *
   * @return response of {@code PixQrCodeDecodeResponseDto}
   */
  public PixQrCodeDecodeResponseDto decodeAQrcodeForPayment() throws ApiError {
    return this.decodeAQrcodeForPayment(PixQrCodeDecodeRequestDto.builder().build());
  }

  /**
   * Decode a QRCode for payment
   *
   * @param pixQrCodeDecodeRequestDto {@link PixQrCodeDecodeRequestDto} Request Body
   * @return response of {@code PixQrCodeDecodeResponseDto}
   */
  public PixQrCodeDecodeResponseDto decodeAQrcodeForPayment(
    @NonNull PixQrCodeDecodeRequestDto pixQrCodeDecodeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDecodeAQrcodeForPaymentRequest(pixQrCodeDecodeRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixQrCodeDecodeResponseDto>() {});
  }

  /**
   * Decode a QRCode for payment
   *
   * @return response of {@code CompletableFuture<PixQrCodeDecodeResponseDto>}
   */
  public CompletableFuture<PixQrCodeDecodeResponseDto> decodeAQrcodeForPaymentAsync() throws ApiError {
    return this.decodeAQrcodeForPaymentAsync(PixQrCodeDecodeRequestDto.builder().build());
  }

  /**
   * Decode a QRCode for payment
   *
   * @param pixQrCodeDecodeRequestDto {@link PixQrCodeDecodeRequestDto} Request Body
   * @return response of {@code CompletableFuture<PixQrCodeDecodeResponseDto>}
   */
  public CompletableFuture<PixQrCodeDecodeResponseDto> decodeAQrcodeForPaymentAsync(
    @NonNull PixQrCodeDecodeRequestDto pixQrCodeDecodeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDecodeAQrcodeForPaymentRequest(pixQrCodeDecodeRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixQrCodeDecodeResponseDto>() {})
    );
  }

  private Request buildDecodeAQrcodeForPaymentRequest(@NonNull PixQrCodeDecodeRequestDto pixQrCodeDecodeRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/decode"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(pixQrCodeDecodeRequestDto)
      .build();
  }

  /**
   * Retrieve a single transaction
   *
   * @param id String Unique identifier of the Pix transaction in Asaas
   * @return response of {@code PixTransactionGetResponseDto}
   */
  public PixTransactionGetResponseDto retrieveASingleTransaction(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleTransactionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {});
  }

  /**
   * Retrieve a single transaction
   *
   * @param id String Unique identifier of the Pix transaction in Asaas
   * @return response of {@code CompletableFuture<PixTransactionGetResponseDto>}
   */
  public CompletableFuture<PixTransactionGetResponseDto> retrieveASingleTransactionAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleTransactionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleTransactionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List transactions
   *
   * @return response of {@code PixTransactionListResponseDto}
   */
  public PixTransactionListResponseDto listTransactions() throws ApiError, ValidationException {
    return this.listTransactions(ListTransactionsParameters.builder().build());
  }

  /**
   * List transactions
   *
   * @param requestParameters {@link ListTransactionsParameters} Request Parameters Object
   * @return response of {@code PixTransactionListResponseDto}
   */
  public PixTransactionListResponseDto listTransactions(@NonNull ListTransactionsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListTransactionsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixTransactionListResponseDto>() {});
  }

  /**
   * List transactions
   *
   * @return response of {@code CompletableFuture<PixTransactionListResponseDto>}
   */
  public CompletableFuture<PixTransactionListResponseDto> listTransactionsAsync() throws ApiError, ValidationException {
    return this.listTransactionsAsync(ListTransactionsParameters.builder().build());
  }

  /**
   * List transactions
   *
   * @param requestParameters {@link ListTransactionsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PixTransactionListResponseDto>}
   */
  public CompletableFuture<PixTransactionListResponseDto> listTransactionsAsync(
    @NonNull ListTransactionsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListTransactionsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixTransactionListResponseDto>() {})
    );
  }

  private Request buildListTransactionsRequest(@NonNull ListTransactionsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListTransactionsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("endToEndIdentifier", requestParameters.getEndToEndIdentifier());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getType() != null) {
      builder.setOptionalQueryParameter("type", requestParameters.getType().getValue());
    }
    return builder.build();
  }

  /**
   * Cancel a scheduled transaction
   *
   * @param id String Unique identifier of the Pix transaction scheduled to be canceled.
   * @param input Object Request Body
   * @return response of {@code PixTransactionGetResponseDto}
   */
  public PixTransactionGetResponseDto cancelAScheduledTransaction(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelAScheduledTransactionRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {});
  }

  /**
   * Cancel a scheduled transaction
   *
   * @param id String Unique identifier of the Pix transaction scheduled to be canceled.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PixTransactionGetResponseDto>}
   */
  public CompletableFuture<PixTransactionGetResponseDto> cancelAScheduledTransactionAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelAScheduledTransactionRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixTransactionGetResponseDto>() {})
    );
  }

  private Request buildCancelAScheduledTransactionRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
