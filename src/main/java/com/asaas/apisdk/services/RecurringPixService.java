// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto;
import com.asaas.apisdk.models.ApiPixTransactionRecurringCheckoutScheduleGetResponseDto;
import com.asaas.apisdk.models.ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto;
import com.asaas.apisdk.models.ApiPixTransactionRecurringCheckoutScheduleListResponseDto;
import com.asaas.apisdk.models.ListRecurrenceItemsParameters;
import com.asaas.apisdk.models.ListRecurrencesParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListRecurrenceItemsParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListRecurrencesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * RecurringPixService Service
 */
public class RecurringPixService extends BaseService {

  public RecurringPixService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List recurrences
   *
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleListResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleListResponseDto listRecurrences()
    throws ApiError, ValidationException {
    return this.listRecurrences(ListRecurrencesParameters.builder().build());
  }

  /**
   * List recurrences
   *
   * @param requestParameters {@link ListRecurrencesParameters} Request Parameters Object
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleListResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleListResponseDto listRecurrences(
    @NonNull ListRecurrencesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListRecurrencesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiPixTransactionRecurringCheckoutScheduleListResponseDto>() {}
    );
  }

  /**
   * List recurrences
   *
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListResponseDto> listRecurrencesAsync()
    throws ApiError, ValidationException {
    return this.listRecurrencesAsync(ListRecurrencesParameters.builder().build());
  }

  /**
   * List recurrences
   *
   * @param requestParameters {@link ListRecurrencesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListResponseDto> listRecurrencesAsync(
    @NonNull ListRecurrencesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListRecurrencesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(
        response,
        new TypeReference<ApiPixTransactionRecurringCheckoutScheduleListResponseDto>() {}
      )
    );
  }

  private Request buildListRecurrencesRequest(@NonNull ListRecurrencesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListRecurrencesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/recurrings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("value", requestParameters.getValue())
      .setOptionalQueryParameter("searchText", requestParameters.getSearchText());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Retrieve a single recurrence
   *
   * @param id String Unique recurrence identifier in Asaas
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleGetResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleGetResponseDto retrieveASingleRecurrence(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleRecurrenceRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>() {}
    );
  }

  /**
   * Retrieve a single recurrence
   *
   * @param id String Unique recurrence identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto> retrieveASingleRecurrenceAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleRecurrenceRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleRecurrenceRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/recurrings/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Cancel a recurrence
   *
   * @param id String Unique recurrence identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleGetResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleGetResponseDto cancelARecurrence(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelARecurrenceRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>() {}
    );
  }

  /**
   * Cancel a recurrence
   *
   * @param id String Unique recurrence identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto> cancelARecurrenceAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelARecurrenceRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetResponseDto>() {})
    );
  }

  private Request buildCancelARecurrenceRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/recurrings/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * List recurrence items
   *
   * @param id String Unique recurrence identifier in Asaas
   * @param requestParameters {@link ListRecurrenceItemsParameters} Request Parameters Object
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto listRecurrenceItems(
    @NonNull String id,
    @NonNull ListRecurrenceItemsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListRecurrenceItemsRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto>() {}
    );
  }

  /**
   * List recurrence items
   *
   * @param id String Unique recurrence identifier in Asaas
   * @param requestParameters {@link ListRecurrenceItemsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto> listRecurrenceItemsAsync(
    @NonNull String id,
    @NonNull ListRecurrenceItemsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListRecurrenceItemsRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(
        response,
        new TypeReference<ApiPixTransactionRecurringCheckoutScheduleListItemsResponseDto>() {}
      )
    );
  }

  private Request buildListRecurrenceItemsRequest(
    @NonNull String id,
    @NonNull ListRecurrenceItemsParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new ListRecurrenceItemsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/recurrings/{id}/items"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Cancel a recurrence item
   *
   * @param id String Unique recurrence item identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto}
   */
  public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto cancelARecurrenceItem(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelARecurrenceItemRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto>() {}
    );
  }

  /**
   * Cancel a recurrence item
   *
   * @param id String Unique recurrence item identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto> cancelARecurrenceItemAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelARecurrenceItemRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(
        response,
        new TypeReference<ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto>() {}
      )
    );
  }

  private Request buildCancelARecurrenceItemRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/recurrings/items/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
