// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiCreditBureauReportGetResponseDto;
import com.asaas.apisdk.models.ApiCreditBureauReportListResponseDto;
import com.asaas.apisdk.models.ApiCreditBureauReportSaveRequestDto;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ListCreditBureauReportsParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListCreditBureauReportsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CreditBureauReportService Service
 */
public class CreditBureauReportService extends BaseService {

  public CreditBureauReportService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List credit bureau reports
   *
   * @return response of {@code ApiCreditBureauReportListResponseDto}
   */
  public ApiCreditBureauReportListResponseDto listCreditBureauReports() throws ApiError, ValidationException {
    return this.listCreditBureauReports(ListCreditBureauReportsParameters.builder().build());
  }

  /**
   * List credit bureau reports
   *
   * @param requestParameters {@link ListCreditBureauReportsParameters} Request Parameters Object
   * @return response of {@code ApiCreditBureauReportListResponseDto}
   */
  public ApiCreditBureauReportListResponseDto listCreditBureauReports(
    @NonNull ListCreditBureauReportsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListCreditBureauReportsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportListResponseDto>() {});
  }

  /**
   * List credit bureau reports
   *
   * @return response of {@code CompletableFuture<ApiCreditBureauReportListResponseDto>}
   */
  public CompletableFuture<ApiCreditBureauReportListResponseDto> listCreditBureauReportsAsync()
    throws ApiError, ValidationException {
    return this.listCreditBureauReportsAsync(ListCreditBureauReportsParameters.builder().build());
  }

  /**
   * List credit bureau reports
   *
   * @param requestParameters {@link ListCreditBureauReportsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCreditBureauReportListResponseDto>}
   */
  public CompletableFuture<ApiCreditBureauReportListResponseDto> listCreditBureauReportsAsync(
    @NonNull ListCreditBureauReportsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListCreditBureauReportsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportListResponseDto>() {})
    );
  }

  private Request buildListCreditBureauReportsRequest(@NonNull ListCreditBureauReportsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListCreditBureauReportsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/creditBureauReport"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("startDate", requestParameters.getStartDate())
      .setOptionalQueryParameter("endDate", requestParameters.getEndDate())
      .build();
  }

  /**
   * Make consultation
   *
   * @return response of {@code ApiCreditBureauReportGetResponseDto}
   */
  public ApiCreditBureauReportGetResponseDto makeConsultation() throws ApiError {
    return this.makeConsultation(ApiCreditBureauReportSaveRequestDto.builder().build());
  }

  /**
   * Make consultation
   *
   * @param apiCreditBureauReportSaveRequestDto {@link ApiCreditBureauReportSaveRequestDto} Request Body
   * @return response of {@code ApiCreditBureauReportGetResponseDto}
   */
  public ApiCreditBureauReportGetResponseDto makeConsultation(
    @NonNull ApiCreditBureauReportSaveRequestDto apiCreditBureauReportSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildMakeConsultationRequest(apiCreditBureauReportSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportGetResponseDto>() {});
  }

  /**
   * Make consultation
   *
   * @return response of {@code CompletableFuture<ApiCreditBureauReportGetResponseDto>}
   */
  public CompletableFuture<ApiCreditBureauReportGetResponseDto> makeConsultationAsync() throws ApiError {
    return this.makeConsultationAsync(ApiCreditBureauReportSaveRequestDto.builder().build());
  }

  /**
   * Make consultation
   *
   * @param apiCreditBureauReportSaveRequestDto {@link ApiCreditBureauReportSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCreditBureauReportGetResponseDto>}
   */
  public CompletableFuture<ApiCreditBureauReportGetResponseDto> makeConsultationAsync(
    @NonNull ApiCreditBureauReportSaveRequestDto apiCreditBureauReportSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildMakeConsultationRequest(apiCreditBureauReportSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportGetResponseDto>() {})
    );
  }

  private Request buildMakeConsultationRequest(
    @NonNull ApiCreditBureauReportSaveRequestDto apiCreditBureauReportSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/creditBureauReport"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCreditBureauReportSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a credit bureau report
   *
   * @param id String Unique report identifier in Asaas
   * @return response of {@code ApiCreditBureauReportGetResponseDto}
   */
  public ApiCreditBureauReportGetResponseDto retrieveACreditBureauReport(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveACreditBureauReportRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportGetResponseDto>() {});
  }

  /**
   * Retrieve a credit bureau report
   *
   * @param id String Unique report identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCreditBureauReportGetResponseDto>}
   */
  public CompletableFuture<ApiCreditBureauReportGetResponseDto> retrieveACreditBureauReportAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveACreditBureauReportRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCreditBureauReportGetResponseDto>() {})
    );
  }

  private Request buildRetrieveACreditBureauReportRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/creditBureauReport/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
