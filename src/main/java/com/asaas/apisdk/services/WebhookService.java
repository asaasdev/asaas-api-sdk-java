// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListWebhooksParameters;
import com.asaas.apisdk.models.WebhookConfigDeleteResponseDto;
import com.asaas.apisdk.models.WebhookConfigGetResponseDto;
import com.asaas.apisdk.models.WebhookConfigListResponseDto;
import com.asaas.apisdk.models.WebhookConfigSaveRequestDto;
import com.asaas.apisdk.models.WebhookConfigUpdateRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListWebhooksParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * WebhookService Service
 */
public class WebhookService extends BaseService {

  public WebhookService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List Webhooks
   *
   * @return response of {@code WebhookConfigListResponseDto}
   */
  public WebhookConfigListResponseDto listWebhooks() throws ApiError, ValidationException {
    return this.listWebhooks(ListWebhooksParameters.builder().build());
  }

  /**
   * List Webhooks
   *
   * @param requestParameters {@link ListWebhooksParameters} Request Parameters Object
   * @return response of {@code WebhookConfigListResponseDto}
   */
  public WebhookConfigListResponseDto listWebhooks(@NonNull ListWebhooksParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListWebhooksRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<WebhookConfigListResponseDto>() {});
  }

  /**
   * List Webhooks
   *
   * @return response of {@code CompletableFuture<WebhookConfigListResponseDto>}
   */
  public CompletableFuture<WebhookConfigListResponseDto> listWebhooksAsync() throws ApiError, ValidationException {
    return this.listWebhooksAsync(ListWebhooksParameters.builder().build());
  }

  /**
   * List Webhooks
   *
   * @param requestParameters {@link ListWebhooksParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<WebhookConfigListResponseDto>}
   */
  public CompletableFuture<WebhookConfigListResponseDto> listWebhooksAsync(
    @NonNull ListWebhooksParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListWebhooksRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<WebhookConfigListResponseDto>() {})
    );
  }

  private Request buildListWebhooksRequest(@NonNull ListWebhooksParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListWebhooksParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/webhooks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Create new Webhook
   *
   * @return response of {@code WebhookConfigGetResponseDto}
   */
  public WebhookConfigGetResponseDto createNewWebhook() throws ApiError {
    return this.createNewWebhook(WebhookConfigSaveRequestDto.builder().build());
  }

  /**
   * Create new Webhook
   *
   * @param webhookConfigSaveRequestDto {@link WebhookConfigSaveRequestDto} Request Body
   * @return response of {@code WebhookConfigGetResponseDto}
   */
  public WebhookConfigGetResponseDto createNewWebhook(@NonNull WebhookConfigSaveRequestDto webhookConfigSaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewWebhookRequest(webhookConfigSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {});
  }

  /**
   * Create new Webhook
   *
   * @return response of {@code CompletableFuture<WebhookConfigGetResponseDto>}
   */
  public CompletableFuture<WebhookConfigGetResponseDto> createNewWebhookAsync() throws ApiError {
    return this.createNewWebhookAsync(WebhookConfigSaveRequestDto.builder().build());
  }

  /**
   * Create new Webhook
   *
   * @param webhookConfigSaveRequestDto {@link WebhookConfigSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<WebhookConfigGetResponseDto>}
   */
  public CompletableFuture<WebhookConfigGetResponseDto> createNewWebhookAsync(
    @NonNull WebhookConfigSaveRequestDto webhookConfigSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewWebhookRequest(webhookConfigSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {})
    );
  }

  private Request buildCreateNewWebhookRequest(@NonNull WebhookConfigSaveRequestDto webhookConfigSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/webhooks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(webhookConfigSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single Webhook
   *
   * @param id String Unique Webhook Identifier
   * @return response of {@code WebhookConfigGetResponseDto}
   */
  public WebhookConfigGetResponseDto retrieveASingleWebhook(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleWebhookRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {});
  }

  /**
   * Retrieve a single Webhook
   *
   * @param id String Unique Webhook Identifier
   * @return response of {@code CompletableFuture<WebhookConfigGetResponseDto>}
   */
  public CompletableFuture<WebhookConfigGetResponseDto> retrieveASingleWebhookAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleWebhookRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleWebhookRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/webhooks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update Existing Webhook
   *
   * @param id String Unique Webhook Identifier
   * @param webhookConfigUpdateRequestDto {@link WebhookConfigUpdateRequestDto} Request Body
   * @return response of {@code WebhookConfigGetResponseDto}
   */
  public WebhookConfigGetResponseDto updateExistingWebhook(
    @NonNull String id,
    @NonNull WebhookConfigUpdateRequestDto webhookConfigUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingWebhookRequest(id, webhookConfigUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {});
  }

  /**
   * Update Existing Webhook
   *
   * @param id String Unique Webhook Identifier
   * @param webhookConfigUpdateRequestDto {@link WebhookConfigUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<WebhookConfigGetResponseDto>}
   */
  public CompletableFuture<WebhookConfigGetResponseDto> updateExistingWebhookAsync(
    @NonNull String id,
    @NonNull WebhookConfigUpdateRequestDto webhookConfigUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingWebhookRequest(id, webhookConfigUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<WebhookConfigGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingWebhookRequest(
    @NonNull String id,
    @NonNull WebhookConfigUpdateRequestDto webhookConfigUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/webhooks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(webhookConfigUpdateRequestDto)
      .build();
  }

  /**
   * Remove Webhook
   *
   * @param id String Unique Webhook Identifier
   * @return response of {@code WebhookConfigDeleteResponseDto}
   */
  public WebhookConfigDeleteResponseDto removeWebhook(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveWebhookRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<WebhookConfigDeleteResponseDto>() {});
  }

  /**
   * Remove Webhook
   *
   * @param id String Unique Webhook Identifier
   * @return response of {@code CompletableFuture<WebhookConfigDeleteResponseDto>}
   */
  public CompletableFuture<WebhookConfigDeleteResponseDto> removeWebhookAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveWebhookRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<WebhookConfigDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveWebhookRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/webhooks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
