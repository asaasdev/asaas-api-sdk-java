// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.EventHistoryListsParameters;
import com.asaas.apisdk.models.ListPaymentDunningsParameters;
import com.asaas.apisdk.models.ListPaymentsAvailableForPaymentDunningParameters;
import com.asaas.apisdk.models.ListPaymentsReceivedParameters;
import com.asaas.apisdk.models.PaymentDunningCancelResponseDto;
import com.asaas.apisdk.models.PaymentDunningListHistoryResponseDto;
import com.asaas.apisdk.models.PaymentDunningListPartialPaymentsResponseDto;
import com.asaas.apisdk.models.PaymentDunningListResponseDto;
import com.asaas.apisdk.models.PaymentDunningPaymentsAvailableForDunningResponseDto;
import com.asaas.apisdk.models.PaymentDunningSaveDocumentsRequestDto;
import com.asaas.apisdk.models.PaymentDunningSaveDocumentsResponseDto;
import com.asaas.apisdk.models.PaymentDunningSaveRequestDto;
import com.asaas.apisdk.models.PaymentDunningSaveRequestPaymentDunningType;
import com.asaas.apisdk.models.PaymentDunningShowResponseDto;
import com.asaas.apisdk.models.PaymentDunningSimulateResponseDto;
import com.asaas.apisdk.models.SimulateAPaymentDunningParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.EventHistoryListsParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentDunningsParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentsAvailableForPaymentDunningParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListPaymentsReceivedParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentDunningService Service
 */
public class PaymentDunningService extends BaseService {

  public PaymentDunningService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payment dunnings
   *
   * @return response of {@code PaymentDunningListResponseDto}
   */
  public PaymentDunningListResponseDto listPaymentDunnings() throws ApiError, ValidationException {
    return this.listPaymentDunnings(ListPaymentDunningsParameters.builder().build());
  }

  /**
   * List payment dunnings
   *
   * @param requestParameters {@link ListPaymentDunningsParameters} Request Parameters Object
   * @return response of {@code PaymentDunningListResponseDto}
   */
  public PaymentDunningListResponseDto listPaymentDunnings(@NonNull ListPaymentDunningsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentDunningsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningListResponseDto>() {});
  }

  /**
   * List payment dunnings
   *
   * @return response of {@code CompletableFuture<PaymentDunningListResponseDto>}
   */
  public CompletableFuture<PaymentDunningListResponseDto> listPaymentDunningsAsync()
    throws ApiError, ValidationException {
    return this.listPaymentDunningsAsync(ListPaymentDunningsParameters.builder().build());
  }

  /**
   * List payment dunnings
   *
   * @param requestParameters {@link ListPaymentDunningsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentDunningListResponseDto>}
   */
  public CompletableFuture<PaymentDunningListResponseDto> listPaymentDunningsAsync(
    @NonNull ListPaymentDunningsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentDunningsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningListResponseDto>() {})
    );
  }

  private Request buildListPaymentDunningsRequest(@NonNull ListPaymentDunningsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentDunningsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("requestStartDate", requestParameters.getRequestStartDate())
      .setOptionalQueryParameter("requestEndDate", requestParameters.getRequestEndDate());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getType() != null) {
      builder.setOptionalQueryParameter("type", requestParameters.getType().getValue());
    }
    return builder.build();
  }

  /**
   * Create a payment dunning
   *
   * @param paymentDunningSaveRequestDto {@link PaymentDunningSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code PaymentDunningShowResponseDto}
   */
  public PaymentDunningShowResponseDto createAPaymentDunning(
    @NonNull PaymentDunningSaveRequestDto paymentDunningSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAPaymentDunningRequest(paymentDunningSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningShowResponseDto>() {});
  }

  /**
   * Create a payment dunning
   *
   * @param paymentDunningSaveRequestDto {@link PaymentDunningSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<PaymentDunningShowResponseDto>}
   */
  public CompletableFuture<PaymentDunningShowResponseDto> createAPaymentDunningAsync(
    @NonNull PaymentDunningSaveRequestDto paymentDunningSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAPaymentDunningRequest(paymentDunningSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningShowResponseDto>() {})
    );
  }

  private Request buildCreateAPaymentDunningRequest(
    @NonNull PaymentDunningSaveRequestDto paymentDunningSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("payment", paymentDunningSaveRequestDto.getPayment())
      .addFormDataPart("type", paymentDunningSaveRequestDto.getType().getValue())
      .addFormDataPart("description", paymentDunningSaveRequestDto.getDescription())
      .addFormDataPart("customerName", paymentDunningSaveRequestDto.getCustomerName())
      .addFormDataPart("customerCpfCnpj", paymentDunningSaveRequestDto.getCustomerCpfCnpj())
      .addFormDataPart("customerPrimaryPhone", paymentDunningSaveRequestDto.getCustomerPrimaryPhone())
      .addFormDataPart("customerSecondaryPhone", paymentDunningSaveRequestDto.getCustomerSecondaryPhone())
      .addFormDataPart("customerPostalCode", paymentDunningSaveRequestDto.getCustomerPostalCode())
      .addFormDataPart("customerAddress", paymentDunningSaveRequestDto.getCustomerAddress())
      .addFormDataPart("customerAddressNumber", paymentDunningSaveRequestDto.getCustomerAddressNumber())
      .addFormDataPart("customerComplement", paymentDunningSaveRequestDto.getCustomerComplement())
      .addFormDataPart("customerProvince", paymentDunningSaveRequestDto.getCustomerProvince());
    if (paymentDunningSaveRequestDto.getDocuments() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documents",
        _filename,
        RequestBody.create(paymentDunningSaveRequestDto.getDocuments(), MediaType.parse("application/octet-stream"))
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Simulate a payment dunning
   *
   * @return response of {@code PaymentDunningSimulateResponseDto}
   */
  public PaymentDunningSimulateResponseDto simulateAPaymentDunning() throws ApiError {
    return this.simulateAPaymentDunning(SimulateAPaymentDunningParameters.builder().build());
  }

  /**
   * Simulate a payment dunning
   *
   * @param requestParameters {@link SimulateAPaymentDunningParameters} Request Parameters Object
   * @return response of {@code PaymentDunningSimulateResponseDto}
   */
  public PaymentDunningSimulateResponseDto simulateAPaymentDunning(
    @NonNull SimulateAPaymentDunningParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateAPaymentDunningRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningSimulateResponseDto>() {});
  }

  /**
   * Simulate a payment dunning
   *
   * @return response of {@code CompletableFuture<PaymentDunningSimulateResponseDto>}
   */
  public CompletableFuture<PaymentDunningSimulateResponseDto> simulateAPaymentDunningAsync() throws ApiError {
    return this.simulateAPaymentDunningAsync(SimulateAPaymentDunningParameters.builder().build());
  }

  /**
   * Simulate a payment dunning
   *
   * @param requestParameters {@link SimulateAPaymentDunningParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentDunningSimulateResponseDto>}
   */
  public CompletableFuture<PaymentDunningSimulateResponseDto> simulateAPaymentDunningAsync(
    @NonNull SimulateAPaymentDunningParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildSimulateAPaymentDunningRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningSimulateResponseDto>() {})
    );
  }

  private Request buildSimulateAPaymentDunningRequest(@NonNull SimulateAPaymentDunningParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setJsonContent(requestParameters.getRequestBody())
      .build();
  }

  /**
   * Recover a single payment dunning
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @return response of {@code PaymentDunningShowResponseDto}
   */
  public PaymentDunningShowResponseDto recoverASinglePaymentDunning(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRecoverASinglePaymentDunningRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningShowResponseDto>() {});
  }

  /**
   * Recover a single payment dunning
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @return response of {@code CompletableFuture<PaymentDunningShowResponseDto>}
   */
  public CompletableFuture<PaymentDunningShowResponseDto> recoverASinglePaymentDunningAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRecoverASinglePaymentDunningRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningShowResponseDto>() {})
    );
  }

  private Request buildRecoverASinglePaymentDunningRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Event history lists
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link EventHistoryListsParameters} Request Parameters Object
   * @return response of {@code PaymentDunningListHistoryResponseDto}
   */
  public PaymentDunningListHistoryResponseDto eventHistoryLists(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildEventHistoryListsRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningListHistoryResponseDto>() {});
  }

  /**
   * Event history lists
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link EventHistoryListsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentDunningListHistoryResponseDto>}
   */
  public CompletableFuture<PaymentDunningListHistoryResponseDto> eventHistoryListsAsync(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildEventHistoryListsRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningListHistoryResponseDto>() {})
    );
  }

  private Request buildEventHistoryListsRequest(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new EventHistoryListsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/history"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * List payments received
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link ListPaymentsReceivedParameters} Request Parameters Object
   * @return response of {@code PaymentDunningListPartialPaymentsResponseDto}
   */
  public PaymentDunningListPartialPaymentsResponseDto listPaymentsReceived(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsReceivedRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningListPartialPaymentsResponseDto>() {});
  }

  /**
   * List payments received
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link ListPaymentsReceivedParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentDunningListPartialPaymentsResponseDto>}
   */
  public CompletableFuture<PaymentDunningListPartialPaymentsResponseDto> listPaymentsReceivedAsync(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsReceivedRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningListPartialPaymentsResponseDto>() {})
    );
  }

  private Request buildListPaymentsReceivedRequest(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsReceivedParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/partialPayments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * List payments available for payment dunning
   *
   * @return response of {@code PaymentDunningPaymentsAvailableForDunningResponseDto}
   */
  public PaymentDunningPaymentsAvailableForDunningResponseDto listPaymentsAvailableForPaymentDunning()
    throws ApiError, ValidationException {
    return this.listPaymentsAvailableForPaymentDunning(
        ListPaymentsAvailableForPaymentDunningParameters.builder().build()
      );
  }

  /**
   * List payments available for payment dunning
   *
   * @param requestParameters {@link ListPaymentsAvailableForPaymentDunningParameters} Request Parameters Object
   * @return response of {@code PaymentDunningPaymentsAvailableForDunningResponseDto}
   */
  public PaymentDunningPaymentsAvailableForDunningResponseDto listPaymentsAvailableForPaymentDunning(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsAvailableForPaymentDunningRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<PaymentDunningPaymentsAvailableForDunningResponseDto>() {}
    );
  }

  /**
   * List payments available for payment dunning
   *
   * @return response of {@code CompletableFuture<PaymentDunningPaymentsAvailableForDunningResponseDto>}
   */
  public CompletableFuture<
    PaymentDunningPaymentsAvailableForDunningResponseDto
  > listPaymentsAvailableForPaymentDunningAsync() throws ApiError, ValidationException {
    return this.listPaymentsAvailableForPaymentDunningAsync(
        ListPaymentsAvailableForPaymentDunningParameters.builder().build()
      );
  }

  /**
   * List payments available for payment dunning
   *
   * @param requestParameters {@link ListPaymentsAvailableForPaymentDunningParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentDunningPaymentsAvailableForDunningResponseDto>}
   */
  public CompletableFuture<
    PaymentDunningPaymentsAvailableForDunningResponseDto
  > listPaymentsAvailableForPaymentDunningAsync(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsAvailableForPaymentDunningRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningPaymentsAvailableForDunningResponseDto>() {})
    );
  }

  private Request buildListPaymentsAvailableForPaymentDunningRequest(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ListPaymentsAvailableForPaymentDunningParametersValidator("requestParameters")
          .optional()
          .validate(requestParameters)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/paymentsAvailableForDunning"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Resend documents
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param paymentDunningSaveDocumentsRequestDto {@link PaymentDunningSaveDocumentsRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code PaymentDunningSaveDocumentsResponseDto}
   */
  public PaymentDunningSaveDocumentsResponseDto resendDocuments(
    @NonNull String id,
    @NonNull PaymentDunningSaveDocumentsRequestDto paymentDunningSaveDocumentsRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildResendDocumentsRequest(id, paymentDunningSaveDocumentsRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningSaveDocumentsResponseDto>() {});
  }

  /**
   * Resend documents
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param paymentDunningSaveDocumentsRequestDto {@link PaymentDunningSaveDocumentsRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<PaymentDunningSaveDocumentsResponseDto>}
   */
  public CompletableFuture<PaymentDunningSaveDocumentsResponseDto> resendDocumentsAsync(
    @NonNull String id,
    @NonNull PaymentDunningSaveDocumentsRequestDto paymentDunningSaveDocumentsRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildResendDocumentsRequest(id, paymentDunningSaveDocumentsRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningSaveDocumentsResponseDto>() {})
    );
  }

  private Request buildResendDocumentsRequest(
    @NonNull String id,
    @NonNull PaymentDunningSaveDocumentsRequestDto paymentDunningSaveDocumentsRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "documents",
            _filename,
            RequestBody.create(
              paymentDunningSaveDocumentsRequestDto.getDocuments(),
              MediaType.parse("application/octet-stream")
            )
          )
          .build()
      )
      .build();
  }

  /**
   * Cancel payment dunning
   *
   * @param id String Unique identifier of the payment dunning to be cancelled.
   * @param input Object Request Body
   * @return response of {@code PaymentDunningCancelResponseDto}
   */
  public PaymentDunningCancelResponseDto cancelPaymentDunning(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelPaymentDunningRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentDunningCancelResponseDto>() {});
  }

  /**
   * Cancel payment dunning
   *
   * @param id String Unique identifier of the payment dunning to be cancelled.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<PaymentDunningCancelResponseDto>}
   */
  public CompletableFuture<PaymentDunningCancelResponseDto> cancelPaymentDunningAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCancelPaymentDunningRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentDunningCancelResponseDto>() {})
    );
  }

  private Request buildCancelPaymentDunningRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
