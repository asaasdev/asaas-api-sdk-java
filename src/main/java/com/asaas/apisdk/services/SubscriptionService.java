// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.GenerateSignatureBookletParameters;
import com.asaas.apisdk.models.InvoiceListResponseDto;
import com.asaas.apisdk.models.ListInvoicesForSubscriptionChargesParameters;
import com.asaas.apisdk.models.ListPaymentsOfASubscriptionParameters;
import com.asaas.apisdk.models.ListSubscriptionsParameters;
import com.asaas.apisdk.models.PaymentListResponseDto;
import com.asaas.apisdk.models.SubscriptionConfigureInvoiceRequestDto;
import com.asaas.apisdk.models.SubscriptionDeleteInvoiceConfigResponseDto;
import com.asaas.apisdk.models.SubscriptionDeleteResponseDto;
import com.asaas.apisdk.models.SubscriptionGetResponseDto;
import com.asaas.apisdk.models.SubscriptionInvoiceConfigGetResponseDto;
import com.asaas.apisdk.models.SubscriptionInvoiceConfigUpdateRequestDto;
import com.asaas.apisdk.models.SubscriptionListResponseDto;
import com.asaas.apisdk.models.SubscriptionSaveRequestDto;
import com.asaas.apisdk.models.SubscriptionSaveWithCreditCardRequestDto;
import com.asaas.apisdk.models.SubscriptionSaveWithCreditCardResponseDto;
import com.asaas.apisdk.models.SubscriptionUpdateCreditCardRequestDto;
import com.asaas.apisdk.models.SubscriptionUpdateRequestDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListInvoicesForSubscriptionChargesParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListSubscriptionsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SubscriptionService Service
 */
public class SubscriptionService extends BaseService {

  public SubscriptionService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List subscriptions
   *
   * @return response of {@code SubscriptionListResponseDto}
   */
  public SubscriptionListResponseDto listSubscriptions() throws ApiError, ValidationException {
    return this.listSubscriptions(ListSubscriptionsParameters.builder().build());
  }

  /**
   * List subscriptions
   *
   * @param requestParameters {@link ListSubscriptionsParameters} Request Parameters Object
   * @return response of {@code SubscriptionListResponseDto}
   */
  public SubscriptionListResponseDto listSubscriptions(@NonNull ListSubscriptionsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListSubscriptionsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionListResponseDto>() {});
  }

  /**
   * List subscriptions
   *
   * @return response of {@code CompletableFuture<SubscriptionListResponseDto>}
   */
  public CompletableFuture<SubscriptionListResponseDto> listSubscriptionsAsync() throws ApiError, ValidationException {
    return this.listSubscriptionsAsync(ListSubscriptionsParameters.builder().build());
  }

  /**
   * List subscriptions
   *
   * @param requestParameters {@link ListSubscriptionsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<SubscriptionListResponseDto>}
   */
  public CompletableFuture<SubscriptionListResponseDto> listSubscriptionsAsync(
    @NonNull ListSubscriptionsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListSubscriptionsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionListResponseDto>() {})
    );
  }

  private Request buildListSubscriptionsRequest(@NonNull ListSubscriptionsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListSubscriptionsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("customerGroupName", requestParameters.getCustomerGroupName())
      .setOptionalQueryParameter("deletedOnly", requestParameters.getDeletedOnly())
      .setOptionalQueryParameter("includeDeleted", requestParameters.getIncludeDeleted())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .setOptionalQueryParameter("sort", requestParameters.getSort());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create new subscription
   *
   * @return response of {@code SubscriptionGetResponseDto}
   */
  public SubscriptionGetResponseDto createNewSubscription() throws ApiError {
    return this.createNewSubscription(SubscriptionSaveRequestDto.builder().build());
  }

  /**
   * Create new subscription
   *
   * @param subscriptionSaveRequestDto {@link SubscriptionSaveRequestDto} Request Body
   * @return response of {@code SubscriptionGetResponseDto}
   */
  public SubscriptionGetResponseDto createNewSubscription(
    @NonNull SubscriptionSaveRequestDto subscriptionSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewSubscriptionRequest(subscriptionSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {});
  }

  /**
   * Create new subscription
   *
   * @return response of {@code CompletableFuture<SubscriptionGetResponseDto>}
   */
  public CompletableFuture<SubscriptionGetResponseDto> createNewSubscriptionAsync() throws ApiError {
    return this.createNewSubscriptionAsync(SubscriptionSaveRequestDto.builder().build());
  }

  /**
   * Create new subscription
   *
   * @param subscriptionSaveRequestDto {@link SubscriptionSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionGetResponseDto>}
   */
  public CompletableFuture<SubscriptionGetResponseDto> createNewSubscriptionAsync(
    @NonNull SubscriptionSaveRequestDto subscriptionSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateNewSubscriptionRequest(subscriptionSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {})
    );
  }

  private Request buildCreateNewSubscriptionRequest(@NonNull SubscriptionSaveRequestDto subscriptionSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(subscriptionSaveRequestDto)
      .build();
  }

  /**
   * Create subscription with credit card
   *
   * @return response of {@code SubscriptionSaveWithCreditCardResponseDto}
   */
  public SubscriptionSaveWithCreditCardResponseDto createSubscriptionWithCreditCard() throws ApiError {
    return this.createSubscriptionWithCreditCard(SubscriptionSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create subscription with credit card
   *
   * @param subscriptionSaveWithCreditCardRequestDto {@link SubscriptionSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code SubscriptionSaveWithCreditCardResponseDto}
   */
  public SubscriptionSaveWithCreditCardResponseDto createSubscriptionWithCreditCard(
    @NonNull SubscriptionSaveWithCreditCardRequestDto subscriptionSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateSubscriptionWithCreditCardRequest(subscriptionSaveWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionSaveWithCreditCardResponseDto>() {});
  }

  /**
   * Create subscription with credit card
   *
   * @return response of {@code CompletableFuture<SubscriptionSaveWithCreditCardResponseDto>}
   */
  public CompletableFuture<SubscriptionSaveWithCreditCardResponseDto> createSubscriptionWithCreditCardAsync()
    throws ApiError {
    return this.createSubscriptionWithCreditCardAsync(SubscriptionSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create subscription with credit card
   *
   * @param subscriptionSaveWithCreditCardRequestDto {@link SubscriptionSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionSaveWithCreditCardResponseDto>}
   */
  public CompletableFuture<SubscriptionSaveWithCreditCardResponseDto> createSubscriptionWithCreditCardAsync(
    @NonNull SubscriptionSaveWithCreditCardRequestDto subscriptionSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateSubscriptionWithCreditCardRequest(subscriptionSaveWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionSaveWithCreditCardResponseDto>() {})
    );
  }

  private Request buildCreateSubscriptionWithCreditCardRequest(
    @NonNull SubscriptionSaveWithCreditCardRequestDto subscriptionSaveWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(subscriptionSaveWithCreditCardRequestDto)
      .build();
  }

  /**
   * Retrieve a single subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code SubscriptionGetResponseDto}
   */
  public SubscriptionGetResponseDto retrieveASingleSubscription(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleSubscriptionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {});
  }

  /**
   * Retrieve a single subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<SubscriptionGetResponseDto>}
   */
  public CompletableFuture<SubscriptionGetResponseDto> retrieveASingleSubscriptionAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleSubscriptionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleSubscriptionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionUpdateRequestDto {@link SubscriptionUpdateRequestDto} Request Body
   * @return response of {@code SubscriptionGetResponseDto}
   */
  public SubscriptionGetResponseDto updateExistingSubscription(
    @NonNull String id,
    @NonNull SubscriptionUpdateRequestDto subscriptionUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingSubscriptionRequest(id, subscriptionUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {});
  }

  /**
   * Update existing subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionUpdateRequestDto {@link SubscriptionUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionGetResponseDto>}
   */
  public CompletableFuture<SubscriptionGetResponseDto> updateExistingSubscriptionAsync(
    @NonNull String id,
    @NonNull SubscriptionUpdateRequestDto subscriptionUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateExistingSubscriptionRequest(id, subscriptionUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingSubscriptionRequest(
    @NonNull String id,
    @NonNull SubscriptionUpdateRequestDto subscriptionUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(subscriptionUpdateRequestDto)
      .build();
  }

  /**
   * Remove subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code SubscriptionDeleteResponseDto}
   */
  public SubscriptionDeleteResponseDto removeSubscription(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveSubscriptionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionDeleteResponseDto>() {});
  }

  /**
   * Remove subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<SubscriptionDeleteResponseDto>}
   */
  public CompletableFuture<SubscriptionDeleteResponseDto> removeSubscriptionAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveSubscriptionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveSubscriptionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update credit card without charging the subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionUpdateCreditCardRequestDto {@link SubscriptionUpdateCreditCardRequestDto} Request Body
   * @return response of {@code SubscriptionGetResponseDto}
   */
  public SubscriptionGetResponseDto updateSubscriptionCreditCard(
    @NonNull String id,
    @NonNull SubscriptionUpdateCreditCardRequestDto subscriptionUpdateCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateSubscriptionCreditCardRequest(id, subscriptionUpdateCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {});
  }

  /**
   * Update credit card without charging the subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionUpdateCreditCardRequestDto {@link SubscriptionUpdateCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionGetResponseDto>}
   */
  public CompletableFuture<SubscriptionGetResponseDto> updateSubscriptionCreditCardAsync(
    @NonNull String id,
    @NonNull SubscriptionUpdateCreditCardRequestDto subscriptionUpdateCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildUpdateSubscriptionCreditCardRequest(id, subscriptionUpdateCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionGetResponseDto>() {})
    );
  }

  private Request buildUpdateSubscriptionCreditCardRequest(
    @NonNull String id,
    @NonNull SubscriptionUpdateCreditCardRequestDto subscriptionUpdateCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/creditCard"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(subscriptionUpdateCreditCardRequestDto)
      .build();
  }

  /**
   * List payments of a subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfASubscriptionParameters} Request Parameters Object
   * @return response of {@code PaymentListResponseDto}
   */
  public PaymentListResponseDto listPaymentsOfASubscription(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsOfASubscriptionRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {});
  }

  /**
   * List payments of a subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfASubscriptionParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PaymentListResponseDto>}
   */
  public CompletableFuture<PaymentListResponseDto> listPaymentsOfASubscriptionAsync(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListPaymentsOfASubscriptionRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentListResponseDto>() {})
    );
  }

  private Request buildListPaymentsOfASubscriptionRequest(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id);
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Generate subscription booklet
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link GenerateSignatureBookletParameters} Request Parameters Object
   * @return response of {@code Object}
   */
  public Object generateSignatureBooklet(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGenerateSignatureBookletRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<Object>() {});
  }

  /**
   * Generate subscription booklet
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link GenerateSignatureBookletParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Object>}
   */
  public CompletableFuture<Object> generateSignatureBookletAsync(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildGenerateSignatureBookletRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response -> ModelConverter.convert(response, new TypeReference<Object>() {}));
  }

  private Request buildGenerateSignatureBookletRequest(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/paymentBook"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("month", requestParameters.getMonth())
      .setOptionalQueryParameter("year", requestParameters.getYear())
      .setOptionalQueryParameter("sort", requestParameters.getSort())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .build();
  }

  /**
   * Retrieve configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code SubscriptionInvoiceConfigGetResponseDto}
   */
  public SubscriptionInvoiceConfigGetResponseDto retrieveConfigurationForIssuanceOfInvoices(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveConfigurationForIssuanceOfInvoicesRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {});
  }

  /**
   * Retrieve configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<SubscriptionInvoiceConfigGetResponseDto>}
   */
  public CompletableFuture<SubscriptionInvoiceConfigGetResponseDto> retrieveConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveConfigurationForIssuanceOfInvoicesRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {})
    );
  }

  private Request buildRetrieveConfigurationForIssuanceOfInvoicesRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Create configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionConfigureInvoiceRequestDto {@link SubscriptionConfigureInvoiceRequestDto} Request Body
   * @return response of {@code SubscriptionInvoiceConfigGetResponseDto}
   */
  public SubscriptionInvoiceConfigGetResponseDto createConfigurationForIssuanceOfInvoices(
    @NonNull String id,
    @NonNull SubscriptionConfigureInvoiceRequestDto subscriptionConfigureInvoiceRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildCreateConfigurationForIssuanceOfInvoicesRequest(id, subscriptionConfigureInvoiceRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {});
  }

  /**
   * Create configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionConfigureInvoiceRequestDto {@link SubscriptionConfigureInvoiceRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionInvoiceConfigGetResponseDto>}
   */
  public CompletableFuture<SubscriptionInvoiceConfigGetResponseDto> createConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id,
    @NonNull SubscriptionConfigureInvoiceRequestDto subscriptionConfigureInvoiceRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildCreateConfigurationForIssuanceOfInvoicesRequest(id, subscriptionConfigureInvoiceRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {})
    );
  }

  private Request buildCreateConfigurationForIssuanceOfInvoicesRequest(
    @NonNull String id,
    @NonNull SubscriptionConfigureInvoiceRequestDto subscriptionConfigureInvoiceRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(subscriptionConfigureInvoiceRequestDto)
      .build();
  }

  /**
   * Update configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionInvoiceConfigUpdateRequestDto {@link SubscriptionInvoiceConfigUpdateRequestDto} Request Body
   * @return response of {@code SubscriptionInvoiceConfigGetResponseDto}
   */
  public SubscriptionInvoiceConfigGetResponseDto updateConfigurationForIssuanceOfInvoices(
    @NonNull String id,
    @NonNull SubscriptionInvoiceConfigUpdateRequestDto subscriptionInvoiceConfigUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildUpdateConfigurationForIssuanceOfInvoicesRequest(id, subscriptionInvoiceConfigUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {});
  }

  /**
   * Update configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param subscriptionInvoiceConfigUpdateRequestDto {@link SubscriptionInvoiceConfigUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<SubscriptionInvoiceConfigGetResponseDto>}
   */
  public CompletableFuture<SubscriptionInvoiceConfigGetResponseDto> updateConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id,
    @NonNull SubscriptionInvoiceConfigUpdateRequestDto subscriptionInvoiceConfigUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request =
      this.buildUpdateConfigurationForIssuanceOfInvoicesRequest(id, subscriptionInvoiceConfigUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionInvoiceConfigGetResponseDto>() {})
    );
  }

  private Request buildUpdateConfigurationForIssuanceOfInvoicesRequest(
    @NonNull String id,
    @NonNull SubscriptionInvoiceConfigUpdateRequestDto subscriptionInvoiceConfigUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(subscriptionInvoiceConfigUpdateRequestDto)
      .build();
  }

  /**
   * Remove configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code SubscriptionDeleteInvoiceConfigResponseDto}
   */
  public SubscriptionDeleteInvoiceConfigResponseDto removeConfigurationForIssuanceOfInvoices(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveConfigurationForIssuanceOfInvoicesRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SubscriptionDeleteInvoiceConfigResponseDto>() {});
  }

  /**
   * Remove configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<SubscriptionDeleteInvoiceConfigResponseDto>}
   */
  public CompletableFuture<SubscriptionDeleteInvoiceConfigResponseDto> removeConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveConfigurationForIssuanceOfInvoicesRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SubscriptionDeleteInvoiceConfigResponseDto>() {})
    );
  }

  private Request buildRemoveConfigurationForIssuanceOfInvoicesRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List invoices for subscription charges
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListInvoicesForSubscriptionChargesParameters} Request Parameters Object
   * @return response of {@code InvoiceListResponseDto}
   */
  public InvoiceListResponseDto listInvoicesForSubscriptionCharges(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListInvoicesForSubscriptionChargesRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<InvoiceListResponseDto>() {});
  }

  /**
   * List invoices for subscription charges
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListInvoicesForSubscriptionChargesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<InvoiceListResponseDto>}
   */
  public CompletableFuture<InvoiceListResponseDto> listInvoicesForSubscriptionChargesAsync(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListInvoicesForSubscriptionChargesRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<InvoiceListResponseDto>() {})
    );
  }

  private Request buildListInvoicesForSubscriptionChargesRequest(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ListInvoicesForSubscriptionChargesParametersValidator("requestParameters")
          .optional()
          .validate(requestParameters)
      )
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("effectiveDate[ge]", requestParameters.getEffectiveDateGe())
      .setOptionalQueryParameter("effectiveDate[le]", requestParameters.getEffectiveDateLe())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }
}
