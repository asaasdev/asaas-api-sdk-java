// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.FiscalInfoGetResponseDto;
import com.asaas.apisdk.models.FiscalInfoListInvoiceNbsCodesResponseDto;
import com.asaas.apisdk.models.FiscalInfoListMunicipalServicesResponseDto;
import com.asaas.apisdk.models.FiscalInfoMunicipalOptionsGetResponseDto;
import com.asaas.apisdk.models.FiscalInfoSaveRequestDto;
import com.asaas.apisdk.models.FiscalInfoUpdateUseNationalPortalRequestDto;
import com.asaas.apisdk.models.FiscalInfoUpdateUseNationalPortalResponseDto;
import com.asaas.apisdk.models.ListMunicipalServicesParameters;
import com.asaas.apisdk.models.ListNbsCodesParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListMunicipalServicesParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.ListNbsCodesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * FiscalInfoService Service
 */
public class FiscalInfoService extends BaseService {

  public FiscalInfoService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code FiscalInfoMunicipalOptionsGetResponseDto}
   */
  public FiscalInfoMunicipalOptionsGetResponseDto listMunicipalConfigurations() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoMunicipalOptionsGetResponseDto>() {});
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code CompletableFuture<FiscalInfoMunicipalOptionsGetResponseDto>}
   */
  public CompletableFuture<FiscalInfoMunicipalOptionsGetResponseDto> listMunicipalConfigurationsAsync()
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoMunicipalOptionsGetResponseDto>() {})
    );
  }

  private Request buildListMunicipalConfigurationsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/municipalOptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code FiscalInfoGetResponseDto}
   */
  public FiscalInfoGetResponseDto retrieveTaxInformation() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoGetResponseDto>() {});
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code CompletableFuture<FiscalInfoGetResponseDto>}
   */
  public CompletableFuture<FiscalInfoGetResponseDto> retrieveTaxInformationAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoGetResponseDto>() {})
    );
  }

  private Request buildRetrieveTaxInformationRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Create and update tax information
   *
   * @param fiscalInfoSaveRequestDto {@link FiscalInfoSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code FiscalInfoGetResponseDto}
   */
  public FiscalInfoGetResponseDto createAndUpdateTaxInformation(
    @NonNull FiscalInfoSaveRequestDto fiscalInfoSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(fiscalInfoSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoGetResponseDto>() {});
  }

  /**
   * Create and update tax information
   *
   * @param fiscalInfoSaveRequestDto {@link FiscalInfoSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<FiscalInfoGetResponseDto>}
   */
  public CompletableFuture<FiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync(
    @NonNull FiscalInfoSaveRequestDto fiscalInfoSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(fiscalInfoSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoGetResponseDto>() {})
    );
  }

  private Request buildCreateAndUpdateTaxInformationRequest(
    @NonNull FiscalInfoSaveRequestDto fiscalInfoSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("email", fiscalInfoSaveRequestDto.getEmail())
      .addFormDataPart("municipalInscription", fiscalInfoSaveRequestDto.getMunicipalInscription())
      .addFormDataPart("simplesNacional", fiscalInfoSaveRequestDto.getSimplesNacional().toString())
      .addFormDataPart("cnae", fiscalInfoSaveRequestDto.getCnae())
      .addFormDataPart("specialTaxRegime", fiscalInfoSaveRequestDto.getSpecialTaxRegime())
      .addFormDataPart("serviceListItem", fiscalInfoSaveRequestDto.getServiceListItem())
      .addFormDataPart("nbsCode", fiscalInfoSaveRequestDto.getNbsCode())
      .addFormDataPart("rpsSerie", fiscalInfoSaveRequestDto.getRpsSerie())
      .addFormDataPart("username", fiscalInfoSaveRequestDto.getUsername())
      .addFormDataPart("password", fiscalInfoSaveRequestDto.getPassword())
      .addFormDataPart("accessToken", fiscalInfoSaveRequestDto.getAccessToken())
      .addFormDataPart("certificatePassword", fiscalInfoSaveRequestDto.getCertificatePassword())
      .addFormDataPart(
        "nationalPortalTaxCalculationRegime",
        fiscalInfoSaveRequestDto.getNationalPortalTaxCalculationRegime()
      );
    if (fiscalInfoSaveRequestDto.getCulturalProjectsPromoter() != null) {
      multipartBodyBuilder.addFormDataPart(
        "culturalProjectsPromoter",
        fiscalInfoSaveRequestDto.getCulturalProjectsPromoter().toString()
      );
    }
    if (fiscalInfoSaveRequestDto.getRpsNumber() != null) {
      multipartBodyBuilder.addFormDataPart("rpsNumber", fiscalInfoSaveRequestDto.getRpsNumber().toString());
    }
    if (fiscalInfoSaveRequestDto.getLoteNumber() != null) {
      multipartBodyBuilder.addFormDataPart("loteNumber", fiscalInfoSaveRequestDto.getLoteNumber().toString());
    }
    if (fiscalInfoSaveRequestDto.getCertificateFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "certificateFile",
        _filename,
        RequestBody.create(fiscalInfoSaveRequestDto.getCertificateFile(), MediaType.parse("application/octet-stream"))
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * List municipal services
   *
   * @return response of {@code FiscalInfoListMunicipalServicesResponseDto}
   */
  public FiscalInfoListMunicipalServicesResponseDto listMunicipalServices() throws ApiError, ValidationException {
    return this.listMunicipalServices(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code FiscalInfoListMunicipalServicesResponseDto}
   */
  public FiscalInfoListMunicipalServicesResponseDto listMunicipalServices(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoListMunicipalServicesResponseDto>() {});
  }

  /**
   * List municipal services
   *
   * @return response of {@code CompletableFuture<FiscalInfoListMunicipalServicesResponseDto>}
   */
  public CompletableFuture<FiscalInfoListMunicipalServicesResponseDto> listMunicipalServicesAsync()
    throws ApiError, ValidationException {
    return this.listMunicipalServicesAsync(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<FiscalInfoListMunicipalServicesResponseDto>}
   */
  public CompletableFuture<FiscalInfoListMunicipalServicesResponseDto> listMunicipalServicesAsync(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoListMunicipalServicesResponseDto>() {})
    );
  }

  private Request buildListMunicipalServicesRequest(@NonNull ListMunicipalServicesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListMunicipalServicesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/services"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("description", requestParameters.getDescription())
      .build();
  }

  /**
   * List NBS codes
   *
   * @return response of {@code FiscalInfoListInvoiceNbsCodesResponseDto}
   */
  public FiscalInfoListInvoiceNbsCodesResponseDto listNbsCodes() throws ApiError, ValidationException {
    return this.listNbsCodes(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code FiscalInfoListInvoiceNbsCodesResponseDto}
   */
  public FiscalInfoListInvoiceNbsCodesResponseDto listNbsCodes(@NonNull ListNbsCodesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoListInvoiceNbsCodesResponseDto>() {});
  }

  /**
   * List NBS codes
   *
   * @return response of {@code CompletableFuture<FiscalInfoListInvoiceNbsCodesResponseDto>}
   */
  public CompletableFuture<FiscalInfoListInvoiceNbsCodesResponseDto> listNbsCodesAsync()
    throws ApiError, ValidationException {
    return this.listNbsCodesAsync(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<FiscalInfoListInvoiceNbsCodesResponseDto>}
   */
  public CompletableFuture<FiscalInfoListInvoiceNbsCodesResponseDto> listNbsCodesAsync(
    @NonNull ListNbsCodesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoListInvoiceNbsCodesResponseDto>() {})
    );
  }

  private Request buildListNbsCodesRequest(@NonNull ListNbsCodesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListNbsCodesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nbsCodes"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("codeDescription", requestParameters.getCodeDescription())
      .build();
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code FiscalInfoUpdateUseNationalPortalResponseDto}
   */
  public FiscalInfoUpdateUseNationalPortalResponseDto configureInvoiceIssuingPortal() throws ApiError {
    return this.configureInvoiceIssuingPortal(FiscalInfoUpdateUseNationalPortalRequestDto.builder().build());
  }

  /**
   * Configure invoice issuing portal
   *
   * @param fiscalInfoUpdateUseNationalPortalRequestDto {@link FiscalInfoUpdateUseNationalPortalRequestDto} Request Body
   * @return response of {@code FiscalInfoUpdateUseNationalPortalResponseDto}
   */
  public FiscalInfoUpdateUseNationalPortalResponseDto configureInvoiceIssuingPortal(
    @NonNull FiscalInfoUpdateUseNationalPortalRequestDto fiscalInfoUpdateUseNationalPortalRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfigureInvoiceIssuingPortalRequest(fiscalInfoUpdateUseNationalPortalRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<FiscalInfoUpdateUseNationalPortalResponseDto>() {});
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code CompletableFuture<FiscalInfoUpdateUseNationalPortalResponseDto>}
   */
  public CompletableFuture<FiscalInfoUpdateUseNationalPortalResponseDto> configureInvoiceIssuingPortalAsync()
    throws ApiError {
    return this.configureInvoiceIssuingPortalAsync(FiscalInfoUpdateUseNationalPortalRequestDto.builder().build());
  }

  /**
   * Configure invoice issuing portal
   *
   * @param fiscalInfoUpdateUseNationalPortalRequestDto {@link FiscalInfoUpdateUseNationalPortalRequestDto} Request Body
   * @return response of {@code CompletableFuture<FiscalInfoUpdateUseNationalPortalResponseDto>}
   */
  public CompletableFuture<FiscalInfoUpdateUseNationalPortalResponseDto> configureInvoiceIssuingPortalAsync(
    @NonNull FiscalInfoUpdateUseNationalPortalRequestDto fiscalInfoUpdateUseNationalPortalRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildConfigureInvoiceIssuingPortalRequest(fiscalInfoUpdateUseNationalPortalRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<FiscalInfoUpdateUseNationalPortalResponseDto>() {})
    );
  }

  private Request buildConfigureInvoiceIssuingPortalRequest(
    @NonNull FiscalInfoUpdateUseNationalPortalRequestDto fiscalInfoUpdateUseNationalPortalRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nationalPortal"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(fiscalInfoUpdateUseNationalPortalRequestDto)
      .build();
  }
}
