// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ChargebackListResponseDto;
import com.asaas.apisdk.models.ChargebackSaveDisputeRequestDto;
import com.asaas.apisdk.models.ChargebackSaveDisputeResponseDto;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListChargebacksParameters;
import com.asaas.apisdk.models.PaymentChargebackResponseDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListChargebacksParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * ChargebackService Service
 */
public class ChargebackService extends BaseService {

  public ChargebackService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create a chargeback dispute
   *
   * @param id String Unique identifier of chargeback for which the dispute will be created.
   * @param chargebackSaveDisputeRequestDto {@link ChargebackSaveDisputeRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ChargebackSaveDisputeResponseDto}
   */
  public ChargebackSaveDisputeResponseDto createAChargebackDispute(
    @NonNull String id,
    @NonNull ChargebackSaveDisputeRequestDto chargebackSaveDisputeRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAChargebackDisputeRequest(id, chargebackSaveDisputeRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ChargebackSaveDisputeResponseDto>() {});
  }

  /**
   * Create a chargeback dispute
   *
   * @param id String Unique identifier of chargeback for which the dispute will be created.
   * @param chargebackSaveDisputeRequestDto {@link ChargebackSaveDisputeRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ChargebackSaveDisputeResponseDto>}
   */
  public CompletableFuture<ChargebackSaveDisputeResponseDto> createAChargebackDisputeAsync(
    @NonNull String id,
    @NonNull ChargebackSaveDisputeRequestDto chargebackSaveDisputeRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAChargebackDisputeRequest(id, chargebackSaveDisputeRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ChargebackSaveDisputeResponseDto>() {})
    );
  }

  private Request buildCreateAChargebackDisputeRequest(
    @NonNull String id,
    @NonNull ChargebackSaveDisputeRequestDto chargebackSaveDisputeRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/chargebacks/{id}/dispute"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "files",
            _filename,
            RequestBody.create(chargebackSaveDisputeRequestDto.getFiles(), MediaType.parse("application/octet-stream"))
          )
          .build()
      )
      .build();
  }

  /**
   * List chargebacks
   *
   * @return response of {@code ChargebackListResponseDto}
   */
  public ChargebackListResponseDto listChargebacks() throws ApiError, ValidationException {
    return this.listChargebacks(ListChargebacksParameters.builder().build());
  }

  /**
   * List chargebacks
   *
   * @param requestParameters {@link ListChargebacksParameters} Request Parameters Object
   * @return response of {@code ChargebackListResponseDto}
   */
  public ChargebackListResponseDto listChargebacks(@NonNull ListChargebacksParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListChargebacksRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ChargebackListResponseDto>() {});
  }

  /**
   * List chargebacks
   *
   * @return response of {@code CompletableFuture<ChargebackListResponseDto>}
   */
  public CompletableFuture<ChargebackListResponseDto> listChargebacksAsync() throws ApiError, ValidationException {
    return this.listChargebacksAsync(ListChargebacksParameters.builder().build());
  }

  /**
   * List chargebacks
   *
   * @param requestParameters {@link ListChargebacksParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ChargebackListResponseDto>}
   */
  public CompletableFuture<ChargebackListResponseDto> listChargebacksAsync(
    @NonNull ListChargebacksParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListChargebacksRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ChargebackListResponseDto>() {})
    );
  }

  private Request buildListChargebacksRequest(@NonNull ListChargebacksParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListChargebacksParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/chargebacks/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("originDisputeDate[le]", requestParameters.getOriginDisputeDateLe())
      .setOptionalQueryParameter("originDisputeDate[ge]", requestParameters.getOriginDisputeDateGe())
      .setOptionalQueryParameter("originTransactionDate[le]", requestParameters.getOriginTransactionDateLe())
      .setOptionalQueryParameter("originTransactionDate[ge]", requestParameters.getOriginTransactionDateGe());
    if (requestParameters.getCreditCardBrand() != null) {
      builder.setOptionalQueryParameter("creditCardBrand", requestParameters.getCreditCardBrand().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Retrieve a single chargeback
   *
   * @param id String Unique identifier of the payment or installment for which the chargeback will be retrieved.
   * @return response of {@code PaymentChargebackResponseDto}
   */
  public PaymentChargebackResponseDto retrieveASingleChargeback(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleChargebackRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentChargebackResponseDto>() {});
  }

  /**
   * Retrieve a single chargeback
   *
   * @param id String Unique identifier of the payment or installment for which the chargeback will be retrieved.
   * @return response of {@code CompletableFuture<PaymentChargebackResponseDto>}
   */
  public CompletableFuture<PaymentChargebackResponseDto> retrieveASingleChargebackAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleChargebackRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentChargebackResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleChargebackRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/chargeback"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
