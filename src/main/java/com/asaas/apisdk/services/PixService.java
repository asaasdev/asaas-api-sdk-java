// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ErrorResponseDto;
import com.asaas.apisdk.models.ListKeysParameters;
import com.asaas.apisdk.models.PixAddressKeyGetResponseDto;
import com.asaas.apisdk.models.PixAddressKeyListResponseDto;
import com.asaas.apisdk.models.PixAddressKeySaveRequestDto;
import com.asaas.apisdk.models.PixQrCodeDeleteResponseDto;
import com.asaas.apisdk.models.PixQrCodeSaveRequestDto;
import com.asaas.apisdk.models.PixQrCodeSaveResponseDto;
import com.asaas.apisdk.models.PixTokenBucketGetAddressKeyResponseDto;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListKeysParametersValidator;
import com.asaas.apisdk.validation.validators.modelValidators.PixQrCodeSaveRequestDtoValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PixService Service
 */
public class PixService extends BaseService {

  public PixService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List keys
   *
   * @return response of {@code PixAddressKeyListResponseDto}
   */
  public PixAddressKeyListResponseDto listKeys() throws ApiError, ValidationException {
    return this.listKeys(ListKeysParameters.builder().build());
  }

  /**
   * List keys
   *
   * @param requestParameters {@link ListKeysParameters} Request Parameters Object
   * @return response of {@code PixAddressKeyListResponseDto}
   */
  public PixAddressKeyListResponseDto listKeys(@NonNull ListKeysParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListKeysRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixAddressKeyListResponseDto>() {});
  }

  /**
   * List keys
   *
   * @return response of {@code CompletableFuture<PixAddressKeyListResponseDto>}
   */
  public CompletableFuture<PixAddressKeyListResponseDto> listKeysAsync() throws ApiError, ValidationException {
    return this.listKeysAsync(ListKeysParameters.builder().build());
  }

  /**
   * List keys
   *
   * @param requestParameters {@link ListKeysParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<PixAddressKeyListResponseDto>}
   */
  public CompletableFuture<PixAddressKeyListResponseDto> listKeysAsync(@NonNull ListKeysParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildListKeysRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixAddressKeyListResponseDto>() {})
    );
  }

  private Request buildListKeysRequest(@NonNull ListKeysParameters requestParameters) throws ValidationException {
    new ViolationAggregator()
      .add(new ListKeysParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("statusList", requestParameters.getStatusList());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create a key
   *
   * @return response of {@code PixAddressKeyGetResponseDto}
   */
  public PixAddressKeyGetResponseDto createAKey() throws ApiError {
    return this.createAKey(PixAddressKeySaveRequestDto.builder().build());
  }

  /**
   * Create a key
   *
   * @param pixAddressKeySaveRequestDto {@link PixAddressKeySaveRequestDto} Request Body
   * @return response of {@code PixAddressKeyGetResponseDto}
   */
  public PixAddressKeyGetResponseDto createAKey(@NonNull PixAddressKeySaveRequestDto pixAddressKeySaveRequestDto)
    throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAKeyRequest(pixAddressKeySaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {});
  }

  /**
   * Create a key
   *
   * @return response of {@code CompletableFuture<PixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<PixAddressKeyGetResponseDto> createAKeyAsync() throws ApiError {
    return this.createAKeyAsync(PixAddressKeySaveRequestDto.builder().build());
  }

  /**
   * Create a key
   *
   * @param pixAddressKeySaveRequestDto {@link PixAddressKeySaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<PixAddressKeyGetResponseDto> createAKeyAsync(
    @NonNull PixAddressKeySaveRequestDto pixAddressKeySaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateAKeyRequest(pixAddressKeySaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildCreateAKeyRequest(@NonNull PixAddressKeySaveRequestDto pixAddressKeySaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(pixAddressKeySaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code PixAddressKeyGetResponseDto}
   */
  public PixAddressKeyGetResponseDto retrieveASingleKey(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleKeyRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {});
  }

  /**
   * Retrieve a single key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code CompletableFuture<PixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<PixAddressKeyGetResponseDto> retrieveASingleKeyAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleKeyRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleKeyRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Remove key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code PixAddressKeyGetResponseDto}
   */
  public PixAddressKeyGetResponseDto removeKey(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveKeyRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {});
  }

  /**
   * Remove key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code CompletableFuture<PixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<PixAddressKeyGetResponseDto> removeKeyAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildRemoveKeyRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildRemoveKeyRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Create static QRCode
   *
   * @return response of {@code PixQrCodeSaveResponseDto}
   */
  public PixQrCodeSaveResponseDto createStaticQrcode() throws ApiError, ValidationException {
    return this.createStaticQrcode(PixQrCodeSaveRequestDto.builder().build());
  }

  /**
   * Create static QRCode
   *
   * @param pixQrCodeSaveRequestDto {@link PixQrCodeSaveRequestDto} Request Body
   * @return response of {@code PixQrCodeSaveResponseDto}
   */
  public PixQrCodeSaveResponseDto createStaticQrcode(@NonNull PixQrCodeSaveRequestDto pixQrCodeSaveRequestDto)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateStaticQrcodeRequest(pixQrCodeSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixQrCodeSaveResponseDto>() {});
  }

  /**
   * Create static QRCode
   *
   * @return response of {@code CompletableFuture<PixQrCodeSaveResponseDto>}
   */
  public CompletableFuture<PixQrCodeSaveResponseDto> createStaticQrcodeAsync() throws ApiError, ValidationException {
    return this.createStaticQrcodeAsync(PixQrCodeSaveRequestDto.builder().build());
  }

  /**
   * Create static QRCode
   *
   * @param pixQrCodeSaveRequestDto {@link PixQrCodeSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<PixQrCodeSaveResponseDto>}
   */
  public CompletableFuture<PixQrCodeSaveResponseDto> createStaticQrcodeAsync(
    @NonNull PixQrCodeSaveRequestDto pixQrCodeSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildCreateStaticQrcodeRequest(pixQrCodeSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixQrCodeSaveResponseDto>() {})
    );
  }

  private Request buildCreateStaticQrcodeRequest(@NonNull PixQrCodeSaveRequestDto pixQrCodeSaveRequestDto)
    throws ValidationException {
    new ViolationAggregator()
      .add(new PixQrCodeSaveRequestDtoValidator("pixQrCodeSaveRequestDto").optional().validate(pixQrCodeSaveRequestDto))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/static"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(pixQrCodeSaveRequestDto)
      .build();
  }

  /**
   * Remove a static QR Code
   *
   * @param id String Identifier of the QR Code that will be deleted.
   * @return response of {@code PixQrCodeDeleteResponseDto}
   */
  public PixQrCodeDeleteResponseDto deleteStaticQrcode(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeleteStaticQrcodeRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixQrCodeDeleteResponseDto>() {});
  }

  /**
   * Remove a static QR Code
   *
   * @param id String Identifier of the QR Code that will be deleted.
   * @return response of {@code CompletableFuture<PixQrCodeDeleteResponseDto>}
   */
  public CompletableFuture<PixQrCodeDeleteResponseDto> deleteStaticQrcodeAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildDeleteStaticQrcodeRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixQrCodeDeleteResponseDto>() {})
    );
  }

  private Request buildDeleteStaticQrcodeRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/static/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Available Token Bucket Check
   *
   * @return response of {@code PixTokenBucketGetAddressKeyResponseDto}
   */
  public PixTokenBucketGetAddressKeyResponseDto availableTokenBucketCheck() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildAvailableTokenBucketCheckRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PixTokenBucketGetAddressKeyResponseDto>() {});
  }

  /**
   * Available Token Bucket Check
   *
   * @return response of {@code CompletableFuture<PixTokenBucketGetAddressKeyResponseDto>}
   */
  public CompletableFuture<PixTokenBucketGetAddressKeyResponseDto> availableTokenBucketCheckAsync() throws ApiError {
    this.addErrorMapping(400, ErrorResponseDto.class, ErrorResponseDtoException.class);
    Request request = this.buildAvailableTokenBucketCheckRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PixTokenBucketGetAddressKeyResponseDto>() {})
    );
  }

  private Request buildAvailableTokenBucketCheckRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/tokenBucket/addressKey"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }
}
