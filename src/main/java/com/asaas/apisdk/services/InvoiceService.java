// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.services;

import com.asaas.apisdk.config.AsaasSdkConfig;
import com.asaas.apisdk.exceptions.ApiError;
import com.asaas.apisdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.apisdk.http.Environment;
import com.asaas.apisdk.http.HttpMethod;
import com.asaas.apisdk.http.ModelConverter;
import com.asaas.apisdk.http.util.RequestBuilder;
import com.asaas.apisdk.models.ApiCustomerInvoiceCancelRequestDto;
import com.asaas.apisdk.models.ApiCustomerInvoiceGetResponseDto;
import com.asaas.apisdk.models.ApiCustomerInvoiceListResponseDto;
import com.asaas.apisdk.models.ApiCustomerInvoiceSaveRequestDto;
import com.asaas.apisdk.models.ApiCustomerInvoiceUpdateRequestDto;
import com.asaas.apisdk.models.ApiErrorResponseDto;
import com.asaas.apisdk.models.ListInvoicesParameters;
import com.asaas.apisdk.validation.ViolationAggregator;
import com.asaas.apisdk.validation.exceptions.ValidationException;
import com.asaas.apisdk.validation.validators.modelValidators.ListInvoicesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * InvoiceService Service
 */
public class InvoiceService extends BaseService {

  public InvoiceService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List invoices
   *
   * @return response of {@code ApiCustomerInvoiceListResponseDto}
   */
  public ApiCustomerInvoiceListResponseDto listInvoices() throws ApiError, ValidationException {
    return this.listInvoices(ListInvoicesParameters.builder().build());
  }

  /**
   * List invoices
   *
   * @param requestParameters {@link ListInvoicesParameters} Request Parameters Object
   * @return response of {@code ApiCustomerInvoiceListResponseDto}
   */
  public ApiCustomerInvoiceListResponseDto listInvoices(@NonNull ListInvoicesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListInvoicesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceListResponseDto>() {});
  }

  /**
   * List invoices
   *
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceListResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceListResponseDto> listInvoicesAsync() throws ApiError, ValidationException {
    return this.listInvoicesAsync(ListInvoicesParameters.builder().build());
  }

  /**
   * List invoices
   *
   * @param requestParameters {@link ListInvoicesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceListResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceListResponseDto> listInvoicesAsync(
    @NonNull ListInvoicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildListInvoicesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceListResponseDto>() {})
    );
  }

  private Request buildListInvoicesRequest(@NonNull ListInvoicesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListInvoicesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("effectiveDate[Ge]", requestParameters.getEffectiveDateGe())
      .setOptionalQueryParameter("effectiveDate[Le]", requestParameters.getEffectiveDateLe())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Schedule invoice
   *
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto scheduleInvoice() throws ApiError {
    return this.scheduleInvoice(ApiCustomerInvoiceSaveRequestDto.builder().build());
  }

  /**
   * Schedule invoice
   *
   * @param apiCustomerInvoiceSaveRequestDto {@link ApiCustomerInvoiceSaveRequestDto} Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto scheduleInvoice(
    @NonNull ApiCustomerInvoiceSaveRequestDto apiCustomerInvoiceSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildScheduleInvoiceRequest(apiCustomerInvoiceSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Schedule invoice
   *
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> scheduleInvoiceAsync() throws ApiError {
    return this.scheduleInvoiceAsync(ApiCustomerInvoiceSaveRequestDto.builder().build());
  }

  /**
   * Schedule invoice
   *
   * @param apiCustomerInvoiceSaveRequestDto {@link ApiCustomerInvoiceSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> scheduleInvoiceAsync(
    @NonNull ApiCustomerInvoiceSaveRequestDto apiCustomerInvoiceSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildScheduleInvoiceRequest(apiCustomerInvoiceSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildScheduleInvoiceRequest(
    @NonNull ApiCustomerInvoiceSaveRequestDto apiCustomerInvoiceSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCustomerInvoiceSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto retrieveASingleInvoice(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleInvoiceRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Retrieve a single invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> retrieveASingleInvoiceAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveASingleInvoiceRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleInvoiceRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param apiCustomerInvoiceUpdateRequestDto {@link ApiCustomerInvoiceUpdateRequestDto} Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto updateInvoice(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceUpdateRequestDto apiCustomerInvoiceUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateInvoiceRequest(id, apiCustomerInvoiceUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Update invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param apiCustomerInvoiceUpdateRequestDto {@link ApiCustomerInvoiceUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> updateInvoiceAsync(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceUpdateRequestDto apiCustomerInvoiceUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateInvoiceRequest(id, apiCustomerInvoiceUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildUpdateInvoiceRequest(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceUpdateRequestDto apiCustomerInvoiceUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiCustomerInvoiceUpdateRequestDto)
      .build();
  }

  /**
   * Issue an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto issueAnInvoice(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildIssueAnInvoiceRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Issue an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> issueAnInvoiceAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildIssueAnInvoiceRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildIssueAnInvoiceRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}/authorize"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Cancel an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param apiCustomerInvoiceCancelRequestDto {@link ApiCustomerInvoiceCancelRequestDto} Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto cancelAnInvoice(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceCancelRequestDto apiCustomerInvoiceCancelRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelAnInvoiceRequest(id, apiCustomerInvoiceCancelRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Cancel an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param apiCustomerInvoiceCancelRequestDto {@link ApiCustomerInvoiceCancelRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> cancelAnInvoiceAsync(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceCancelRequestDto apiCustomerInvoiceCancelRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelAnInvoiceRequest(id, apiCustomerInvoiceCancelRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildCancelAnInvoiceRequest(
    @NonNull String id,
    @NonNull ApiCustomerInvoiceCancelRequestDto apiCustomerInvoiceCancelRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiCustomerInvoiceCancelRequestDto)
      .build();
  }
}
