// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCheckoutSessionResponseDto {

  /**
   * Payment methods
   */
  @JsonProperty("billingTypes")
  private JsonNullable<List<String>> billingTypes;

  /**
   * Charge types
   */
  @JsonProperty("chargeTypes")
  private JsonNullable<List<String>> chargeTypes;

  /**
   * Time in minutes for checkout expiration
   */
  @JsonProperty("minutesToExpire")
  private JsonNullable<Long> minutesToExpire;

  @JsonProperty("callback")
  private JsonNullable<ApiCheckoutSessionCallbackDto> callback;

  /**
   * List of items at checkout
   */
  @JsonProperty("items")
  private JsonNullable<List<ApiCheckoutSessionItemsDto>> items;

  @JsonProperty("customerData")
  private JsonNullable<ApiCheckoutSessionCustomerDataDto> customerData;

  @JsonProperty("subscription")
  private JsonNullable<ApiCheckoutSessionSubscriptionDto> subscription;

  @JsonProperty("installment")
  private JsonNullable<ApiCheckoutSessionInstallmentDto> installment;

  /**
   * Split Settings
   */
  @JsonProperty("split")
  private JsonNullable<List<ApiCheckoutSessionSplitDto>> split;

  @JsonIgnore
  public List<String> getBillingTypes() {
    return billingTypes.orElse(null);
  }

  @JsonIgnore
  public List<String> getChargeTypes() {
    return chargeTypes.orElse(null);
  }

  @JsonIgnore
  public Long getMinutesToExpire() {
    return minutesToExpire.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionCallbackDto getCallback() {
    return callback.orElse(null);
  }

  @JsonIgnore
  public List<ApiCheckoutSessionItemsDto> getItems() {
    return items.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionCustomerDataDto getCustomerData() {
    return customerData.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionSubscriptionDto getSubscription() {
    return subscription.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionInstallmentDto getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public List<ApiCheckoutSessionSplitDto> getSplit() {
    return split.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCheckoutSessionResponseDtoBuilder {

    private JsonNullable<List<String>> billingTypes = JsonNullable.undefined();

    @JsonProperty("billingTypes")
    public ApiCheckoutSessionResponseDtoBuilder billingTypes(List<String> value) {
      if (value == null) {
        throw new IllegalStateException("billingTypes cannot be null");
      }
      this.billingTypes = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<String>> chargeTypes = JsonNullable.undefined();

    @JsonProperty("chargeTypes")
    public ApiCheckoutSessionResponseDtoBuilder chargeTypes(List<String> value) {
      if (value == null) {
        throw new IllegalStateException("chargeTypes cannot be null");
      }
      this.chargeTypes = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> minutesToExpire = JsonNullable.undefined();

    @JsonProperty("minutesToExpire")
    public ApiCheckoutSessionResponseDtoBuilder minutesToExpire(Long value) {
      if (value == null) {
        throw new IllegalStateException("minutesToExpire cannot be null");
      }
      this.minutesToExpire = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionCallbackDto> callback = JsonNullable.undefined();

    @JsonProperty("callback")
    public ApiCheckoutSessionResponseDtoBuilder callback(ApiCheckoutSessionCallbackDto value) {
      if (value == null) {
        throw new IllegalStateException("callback cannot be null");
      }
      this.callback = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiCheckoutSessionItemsDto>> items = JsonNullable.undefined();

    @JsonProperty("items")
    public ApiCheckoutSessionResponseDtoBuilder items(List<ApiCheckoutSessionItemsDto> value) {
      if (value == null) {
        throw new IllegalStateException("items cannot be null");
      }
      this.items = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionCustomerDataDto> customerData = JsonNullable.undefined();

    @JsonProperty("customerData")
    public ApiCheckoutSessionResponseDtoBuilder customerData(ApiCheckoutSessionCustomerDataDto value) {
      if (value == null) {
        throw new IllegalStateException("customerData cannot be null");
      }
      this.customerData = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionSubscriptionDto> subscription = JsonNullable.undefined();

    @JsonProperty("subscription")
    public ApiCheckoutSessionResponseDtoBuilder subscription(ApiCheckoutSessionSubscriptionDto value) {
      if (value == null) {
        throw new IllegalStateException("subscription cannot be null");
      }
      this.subscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionInstallmentDto> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ApiCheckoutSessionResponseDtoBuilder installment(ApiCheckoutSessionInstallmentDto value) {
      if (value == null) {
        throw new IllegalStateException("installment cannot be null");
      }
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiCheckoutSessionSplitDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public ApiCheckoutSessionResponseDtoBuilder split(List<ApiCheckoutSessionSplitDto> value) {
      if (value == null) {
        throw new IllegalStateException("split cannot be null");
      }
      this.split = JsonNullable.of(value);
      return this;
    }
  }
}
