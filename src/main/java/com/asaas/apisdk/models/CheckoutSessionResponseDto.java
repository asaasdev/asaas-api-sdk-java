// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class CheckoutSessionResponseDto {

  /**
   * Payment methods
   */
  @JsonProperty("billingTypes")
  private JsonNullable<List<CheckoutSessionResponseBillingType>> billingTypes;

  /**
   * Charge types
   */
  @JsonProperty("chargeTypes")
  private JsonNullable<List<CheckoutSessionResponseChargeType>> chargeTypes;

  /**
   * Time in minutes for checkout expiration
   */
  @JsonProperty("minutesToExpire")
  private JsonNullable<Long> minutesToExpire;

  /**
   * Automatic redirection information after payment on the checkout screen
   */
  @JsonProperty("callback")
  private JsonNullable<CheckoutSessionCallbackDto> callback;

  /**
   * List of items at checkout
   */
  @JsonProperty("items")
  private JsonNullable<List<CheckoutSessionItemsDto>> items;

  /**
   * Customer data
   */
  @JsonProperty("customerData")
  private JsonNullable<CheckoutSessionCustomerDataDto> customerData;

  /**
   * Subscription details, required if chargeTypes includes `RECURRENT`
   */
  @JsonProperty("subscription")
  private JsonNullable<CheckoutSessionSubscriptionDto> subscription;

  /**
   * Installment details. If informed, it will be mandatory to include the `INSTALLMENT` chargeType
   */
  @JsonProperty("installment")
  private JsonNullable<CheckoutSessionInstallmentDto> installment;

  /**
   * Split Settings
   */
  @JsonProperty("split")
  private JsonNullable<List<CheckoutSessionSplitDto>> split;

  @JsonIgnore
  public List<CheckoutSessionResponseBillingType> getBillingTypes() {
    return billingTypes.orElse(null);
  }

  @JsonIgnore
  public List<CheckoutSessionResponseChargeType> getChargeTypes() {
    return chargeTypes.orElse(null);
  }

  @JsonIgnore
  public Long getMinutesToExpire() {
    return minutesToExpire.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionCallbackDto getCallback() {
    return callback.orElse(null);
  }

  @JsonIgnore
  public List<CheckoutSessionItemsDto> getItems() {
    return items.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionCustomerDataDto getCustomerData() {
    return customerData.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionSubscriptionDto getSubscription() {
    return subscription.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionInstallmentDto getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public List<CheckoutSessionSplitDto> getSplit() {
    return split.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class CheckoutSessionResponseDtoBuilder {

    private JsonNullable<List<CheckoutSessionResponseBillingType>> billingTypes = JsonNullable.undefined();

    @JsonProperty("billingTypes")
    public CheckoutSessionResponseDtoBuilder billingTypes(List<CheckoutSessionResponseBillingType> value) {
      this.billingTypes = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<CheckoutSessionResponseChargeType>> chargeTypes = JsonNullable.undefined();

    @JsonProperty("chargeTypes")
    public CheckoutSessionResponseDtoBuilder chargeTypes(List<CheckoutSessionResponseChargeType> value) {
      this.chargeTypes = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> minutesToExpire = JsonNullable.undefined();

    @JsonProperty("minutesToExpire")
    public CheckoutSessionResponseDtoBuilder minutesToExpire(Long value) {
      this.minutesToExpire = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionCallbackDto> callback = JsonNullable.undefined();

    @JsonProperty("callback")
    public CheckoutSessionResponseDtoBuilder callback(CheckoutSessionCallbackDto value) {
      this.callback = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<CheckoutSessionItemsDto>> items = JsonNullable.undefined();

    @JsonProperty("items")
    public CheckoutSessionResponseDtoBuilder items(List<CheckoutSessionItemsDto> value) {
      this.items = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionCustomerDataDto> customerData = JsonNullable.undefined();

    @JsonProperty("customerData")
    public CheckoutSessionResponseDtoBuilder customerData(CheckoutSessionCustomerDataDto value) {
      this.customerData = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionSubscriptionDto> subscription = JsonNullable.undefined();

    @JsonProperty("subscription")
    public CheckoutSessionResponseDtoBuilder subscription(CheckoutSessionSubscriptionDto value) {
      this.subscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionInstallmentDto> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public CheckoutSessionResponseDtoBuilder installment(CheckoutSessionInstallmentDto value) {
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<CheckoutSessionSplitDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public CheckoutSessionResponseDtoBuilder split(List<CheckoutSessionSplitDto> value) {
      this.split = JsonNullable.of(value);
      return this;
    }
  }
}
