// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListPaymentsWithSummaryDataParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Filter by customer group name
   */
  @JsonProperty("customerGroupName")
  private JsonNullable<String> customerGroupName;

  /**
   * Filter by billing type
   */
  @JsonProperty("billingType")
  private JsonNullable<PaymentListRequestBillingType> billingType;

  /**
   * Filter by status
   */
  @JsonProperty("status")
  private JsonNullable<PaymentListRequestPaymentStatus> status;

  /**
   * Filter by unique subscription identifier
   */
  @JsonProperty("subscription")
  private JsonNullable<String> subscription;

  /**
   * Filter by unique installment identifier
   */
  @JsonProperty("installment")
  private JsonNullable<String> installment;

  /**
   * Filter by your system identifier
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Filter by payment date
   */
  @JsonProperty("paymentDate")
  private JsonNullable<String> paymentDate;

  /**
   * Filter to return charges that have or do not have an invoice
   */
  @JsonProperty("invoiceStatus")
  private JsonNullable<PaymentListRequestInvoiceStatus> invoiceStatus;

  /**
   * Filter by estimated credit date
   */
  @JsonProperty("estimatedCreditDate")
  private JsonNullable<String> estimatedCreditDate;

  /**
   * Filter receipts originating from a static QrCode using the id generated when the QrCode was created
   */
  @JsonProperty("pixQrCodeId")
  private JsonNullable<String> pixQrCodeId;

  /**
   * Filter anticipated charges or not
   */
  @JsonProperty("anticipated")
  private JsonNullable<Boolean> anticipated;

  /**
   * Filter anticipable charges or not
   */
  @JsonProperty("anticipable")
  private JsonNullable<Boolean> anticipable;

  /**
   * Filter from initial creation date
   */
  @JsonProperty("dateCreated[ge]")
  private JsonNullable<String> dateCreatedGe;

  /**
   * Filter to final creation date
   */
  @JsonProperty("dateCreated[le]")
  private JsonNullable<String> dateCreatedLe;

  /**
   * Filter from initial payment date
   */
  @JsonProperty("paymentDate[ge]")
  private JsonNullable<String> paymentDateGe;

  /**
   * Filter to final payment date
   */
  @JsonProperty("paymentDate[le]")
  private JsonNullable<String> paymentDateLe;

  /**
   * Filter from estimated initial credit date
   */
  @JsonProperty("estimatedCreditDate[ge]")
  private JsonNullable<String> estimatedCreditDateGe;

  /**
   * Filter to estimated end credit date
   */
  @JsonProperty("estimatedCreditDate[le]")
  private JsonNullable<String> estimatedCreditDateLe;

  /**
   * Filter from initial due date
   */
  @JsonProperty("dueDate[ge]")
  private JsonNullable<String> dueDateGe;

  /**
   * Filter by final due date
   */
  @JsonProperty("dueDate[le]")
  private JsonNullable<String> dueDateLe;

  /**
   * Filter by the email address of the user who created the payment.
   */
  @JsonProperty("user")
  private JsonNullable<String> user;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public String getCustomerGroupName() {
    return customerGroupName.orElse(null);
  }

  @JsonIgnore
  public PaymentListRequestBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public PaymentListRequestPaymentStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getSubscription() {
    return subscription.orElse(null);
  }

  @JsonIgnore
  public String getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDate() {
    return paymentDate.orElse(null);
  }

  @JsonIgnore
  public PaymentListRequestInvoiceStatus getInvoiceStatus() {
    return invoiceStatus.orElse(null);
  }

  @JsonIgnore
  public String getEstimatedCreditDate() {
    return estimatedCreditDate.orElse(null);
  }

  @JsonIgnore
  public String getPixQrCodeId() {
    return pixQrCodeId.orElse(null);
  }

  @JsonIgnore
  public Boolean getAnticipated() {
    return anticipated.orElse(null);
  }

  @JsonIgnore
  public Boolean getAnticipable() {
    return anticipable.orElse(null);
  }

  @JsonIgnore
  public String getDateCreatedGe() {
    return dateCreatedGe.orElse(null);
  }

  @JsonIgnore
  public String getDateCreatedLe() {
    return dateCreatedLe.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDateGe() {
    return paymentDateGe.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDateLe() {
    return paymentDateLe.orElse(null);
  }

  @JsonIgnore
  public String getEstimatedCreditDateGe() {
    return estimatedCreditDateGe.orElse(null);
  }

  @JsonIgnore
  public String getEstimatedCreditDateLe() {
    return estimatedCreditDateLe.orElse(null);
  }

  @JsonIgnore
  public String getDueDateGe() {
    return dueDateGe.orElse(null);
  }

  @JsonIgnore
  public String getDueDateLe() {
    return dueDateLe.orElse(null);
  }

  @JsonIgnore
  public String getUser() {
    return user.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListPaymentsWithSummaryDataParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListPaymentsWithSummaryDataParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListPaymentsWithSummaryDataParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ListPaymentsWithSummaryDataParametersBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customerGroupName = JsonNullable.undefined();

    @JsonProperty("customerGroupName")
    public ListPaymentsWithSummaryDataParametersBuilder customerGroupName(String value) {
      if (value == null) {
        throw new IllegalStateException("customerGroupName cannot be null");
      }
      this.customerGroupName = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentListRequestBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ListPaymentsWithSummaryDataParametersBuilder billingType(PaymentListRequestBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentListRequestPaymentStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListPaymentsWithSummaryDataParametersBuilder status(PaymentListRequestPaymentStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> subscription = JsonNullable.undefined();

    @JsonProperty("subscription")
    public ListPaymentsWithSummaryDataParametersBuilder subscription(String value) {
      if (value == null) {
        throw new IllegalStateException("subscription cannot be null");
      }
      this.subscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ListPaymentsWithSummaryDataParametersBuilder installment(String value) {
      if (value == null) {
        throw new IllegalStateException("installment cannot be null");
      }
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ListPaymentsWithSummaryDataParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDate = JsonNullable.undefined();

    @JsonProperty("paymentDate")
    public ListPaymentsWithSummaryDataParametersBuilder paymentDate(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDate cannot be null");
      }
      this.paymentDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentListRequestInvoiceStatus> invoiceStatus = JsonNullable.undefined();

    @JsonProperty("invoiceStatus")
    public ListPaymentsWithSummaryDataParametersBuilder invoiceStatus(PaymentListRequestInvoiceStatus value) {
      if (value == null) {
        throw new IllegalStateException("invoiceStatus cannot be null");
      }
      this.invoiceStatus = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> estimatedCreditDate = JsonNullable.undefined();

    @JsonProperty("estimatedCreditDate")
    public ListPaymentsWithSummaryDataParametersBuilder estimatedCreditDate(String value) {
      if (value == null) {
        throw new IllegalStateException("estimatedCreditDate cannot be null");
      }
      this.estimatedCreditDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> pixQrCodeId = JsonNullable.undefined();

    @JsonProperty("pixQrCodeId")
    public ListPaymentsWithSummaryDataParametersBuilder pixQrCodeId(String value) {
      if (value == null) {
        throw new IllegalStateException("pixQrCodeId cannot be null");
      }
      this.pixQrCodeId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> anticipated = JsonNullable.undefined();

    @JsonProperty("anticipated")
    public ListPaymentsWithSummaryDataParametersBuilder anticipated(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("anticipated cannot be null");
      }
      this.anticipated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> anticipable = JsonNullable.undefined();

    @JsonProperty("anticipable")
    public ListPaymentsWithSummaryDataParametersBuilder anticipable(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("anticipable cannot be null");
      }
      this.anticipable = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreatedGe = JsonNullable.undefined();

    @JsonProperty("dateCreated[ge]")
    public ListPaymentsWithSummaryDataParametersBuilder dateCreatedGe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedGe cannot be null");
      }
      this.dateCreatedGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreatedLe = JsonNullable.undefined();

    @JsonProperty("dateCreated[le]")
    public ListPaymentsWithSummaryDataParametersBuilder dateCreatedLe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedLe cannot be null");
      }
      this.dateCreatedLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDateGe = JsonNullable.undefined();

    @JsonProperty("paymentDate[ge]")
    public ListPaymentsWithSummaryDataParametersBuilder paymentDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDateGe cannot be null");
      }
      this.paymentDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDateLe = JsonNullable.undefined();

    @JsonProperty("paymentDate[le]")
    public ListPaymentsWithSummaryDataParametersBuilder paymentDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDateLe cannot be null");
      }
      this.paymentDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> estimatedCreditDateGe = JsonNullable.undefined();

    @JsonProperty("estimatedCreditDate[ge]")
    public ListPaymentsWithSummaryDataParametersBuilder estimatedCreditDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("estimatedCreditDateGe cannot be null");
      }
      this.estimatedCreditDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> estimatedCreditDateLe = JsonNullable.undefined();

    @JsonProperty("estimatedCreditDate[le]")
    public ListPaymentsWithSummaryDataParametersBuilder estimatedCreditDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("estimatedCreditDateLe cannot be null");
      }
      this.estimatedCreditDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDateGe = JsonNullable.undefined();

    @JsonProperty("dueDate[ge]")
    public ListPaymentsWithSummaryDataParametersBuilder dueDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDateGe cannot be null");
      }
      this.dueDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDateLe = JsonNullable.undefined();

    @JsonProperty("dueDate[le]")
    public ListPaymentsWithSummaryDataParametersBuilder dueDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDateLe cannot be null");
      }
      this.dueDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> user = JsonNullable.undefined();

    @JsonProperty("user")
    public ListPaymentsWithSummaryDataParametersBuilder user(String value) {
      if (value == null) {
        throw new IllegalStateException("user cannot be null");
      }
      this.user = JsonNullable.of(value);
      return this;
    }
  }
}
