// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiReceivableAnticipationLimitsInfoResponseDto {

  /**
   * Anticipation limit released on the account
   */
  @JsonProperty("total")
  private JsonNullable<Double> total;

  /**
   * Limit available to anticipate
   */
  @JsonProperty("available")
  private JsonNullable<Double> available;

  @JsonIgnore
  public Double getTotal() {
    return total.orElse(null);
  }

  @JsonIgnore
  public Double getAvailable() {
    return available.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiReceivableAnticipationLimitsInfoResponseDtoBuilder {

    private JsonNullable<Double> total = JsonNullable.undefined();

    @JsonProperty("total")
    public ApiReceivableAnticipationLimitsInfoResponseDtoBuilder total(Double value) {
      if (value == null) {
        throw new IllegalStateException("total cannot be null");
      }
      this.total = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> available = JsonNullable.undefined();

    @JsonProperty("available")
    public ApiReceivableAnticipationLimitsInfoResponseDtoBuilder available(Double value) {
      if (value == null) {
        throw new IllegalStateException("available cannot be null");
      }
      this.available = JsonNullable.of(value);
      return this;
    }
  }
}
