// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * List of objects
 */
@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PaymentDunningPaymentsAvailableForDunningResponseDataDto {

  /**
   * Unique identifier of the payment to be recovered in Asaas
   */
  @JsonProperty("payment")
  private JsonNullable<String> payment;

  /**
   * Unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Payment amount
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Billing status
   */
  @JsonProperty("status")
  private JsonNullable<PaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus> status;

  /**
   * Form of payment
   */
  @JsonProperty("billingType")
  private JsonNullable<PaymentDunningPaymentsAvailableForDunningResponseDataBillingType> billingType;

  /**
   * Due date
   */
  @JsonProperty("dueDate")
  private JsonNullable<String> dueDate;

  /**
   * Simulation of denial request for each type of payment dunning available
   */
  @JsonProperty("typeSimulations")
  private JsonNullable<
    List<PaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDto>
  > typeSimulations;

  @JsonIgnore
  public String getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public PaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public PaymentDunningPaymentsAvailableForDunningResponseDataBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public String getDueDate() {
    return dueDate.orElse(null);
  }

  @JsonIgnore
  public List<PaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDto> getTypeSimulations() {
    return typeSimulations.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder {

    private JsonNullable<String> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder payment(String value) {
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder customer(String value) {
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder value(Double value) {
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus> status =
      JsonNullable.undefined();

    @JsonProperty("status")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder status(
      PaymentDunningPaymentsAvailableForDunningResponseDataPaymentStatus value
    ) {
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentDunningPaymentsAvailableForDunningResponseDataBillingType> billingType =
      JsonNullable.undefined();

    @JsonProperty("billingType")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder billingType(
      PaymentDunningPaymentsAvailableForDunningResponseDataBillingType value
    ) {
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDate = JsonNullable.undefined();

    @JsonProperty("dueDate")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder dueDate(String value) {
      this.dueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<
      List<PaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDto>
    > typeSimulations = JsonNullable.undefined();

    @JsonProperty("typeSimulations")
    public PaymentDunningPaymentsAvailableForDunningResponseDataDtoBuilder typeSimulations(
      List<PaymentDunningPaymentsAvailableForDunningResponseDataTypeSimulationItemDto> value
    ) {
      this.typeSimulations = JsonNullable.of(value);
      return this;
    }
  }
}
