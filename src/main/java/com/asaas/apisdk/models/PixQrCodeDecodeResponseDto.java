// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PixQrCodeDecodeResponseDto {

  /**
   * Copy and Paste of the QRCode
   */
  @JsonProperty("payload")
  private JsonNullable<String> payload;

  /**
   * QRCode Type
   */
  @JsonProperty("type")
  private JsonNullable<PixQrCodeDecodeResponsePixQrCodeType> type;

  /**
   * Transaction origin
   */
  @JsonProperty("transactionOriginType")
  private JsonNullable<PixQrCodeDecodeResponsePixTransactionOriginType> transactionOriginType;

  /**
   * Pix key used
   */
  @JsonProperty("pixKey")
  private JsonNullable<String> pixKey;

  /**
   * Unique Pix reconciliation identifier with Asaas
   */
  @JsonProperty("conciliationIdentifier")
  private JsonNullable<String> conciliationIdentifier;

  /**
   * Due date
   */
  @JsonProperty("dueDate")
  private JsonNullable<String> dueDate;

  /**
   * Expiration date
   */
  @JsonProperty("expirationDate")
  private JsonNullable<String> expirationDate;

  /**
   * Used to indicate whether it is a Withdrawal or Change
   */
  @JsonProperty("finality")
  private JsonNullable<PixQrCodeDecodeResponsePixTransactionCashValueFinality> finality;

  /**
   * QRCode Value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Change value
   */
  @JsonProperty("changeValue")
  private JsonNullable<Double> changeValue;

  /**
   * Interest value
   */
  @JsonProperty("interest")
  private JsonNullable<Double> interest;

  /**
   * Fine value
   */
  @JsonProperty("fine")
  private JsonNullable<Double> fine;

  /**
   * Discount value
   */
  @JsonProperty("discount")
  private JsonNullable<Double> discount;

  /**
   * Total amount with fine, interest and discount applied
   */
  @JsonProperty("totalValue")
  private JsonNullable<Double> totalValue;

  /**
   * Informs if the QRCode can be paid with another amount
   */
  @JsonProperty("canBePaidWithDifferentValue")
  private JsonNullable<Boolean> canBePaidWithDifferentValue;

  /**
   * Informs whether the change can be paid with another amount
   */
  @JsonProperty("canBeModifyChangeValue")
  private JsonNullable<Boolean> canBeModifyChangeValue;

  /**
   * Information about the receiver
   */
  @JsonProperty("receiver")
  private JsonNullable<PixQrCodeDecodeReceiverDto> receiver;

  /**
   * Information about the payer
   */
  @JsonProperty("payer")
  private JsonNullable<PixTransactionQrCodePayerResponseDto> payer;

  /**
   * Description provided during the creation of the QRCode
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Informs if the QRCode can be paid
   */
  @JsonProperty("canBePaid")
  private JsonNullable<Boolean> canBePaid;

  /**
   * Informs why QRCode cannot be paid
   */
  @JsonProperty("cannotBePaidReason")
  private JsonNullable<String> cannotBePaidReason;

  @JsonIgnore
  public String getPayload() {
    return payload.orElse(null);
  }

  @JsonIgnore
  public PixQrCodeDecodeResponsePixQrCodeType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public PixQrCodeDecodeResponsePixTransactionOriginType getTransactionOriginType() {
    return transactionOriginType.orElse(null);
  }

  @JsonIgnore
  public String getPixKey() {
    return pixKey.orElse(null);
  }

  @JsonIgnore
  public String getConciliationIdentifier() {
    return conciliationIdentifier.orElse(null);
  }

  @JsonIgnore
  public String getDueDate() {
    return dueDate.orElse(null);
  }

  @JsonIgnore
  public String getExpirationDate() {
    return expirationDate.orElse(null);
  }

  @JsonIgnore
  public PixQrCodeDecodeResponsePixTransactionCashValueFinality getFinality() {
    return finality.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getChangeValue() {
    return changeValue.orElse(null);
  }

  @JsonIgnore
  public Double getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public Double getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public Double getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public Double getTotalValue() {
    return totalValue.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBePaidWithDifferentValue() {
    return canBePaidWithDifferentValue.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBeModifyChangeValue() {
    return canBeModifyChangeValue.orElse(null);
  }

  @JsonIgnore
  public PixQrCodeDecodeReceiverDto getReceiver() {
    return receiver.orElse(null);
  }

  @JsonIgnore
  public PixTransactionQrCodePayerResponseDto getPayer() {
    return payer.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBePaid() {
    return canBePaid.orElse(null);
  }

  @JsonIgnore
  public String getCannotBePaidReason() {
    return cannotBePaidReason.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PixQrCodeDecodeResponseDtoBuilder {

    private JsonNullable<String> payload = JsonNullable.undefined();

    @JsonProperty("payload")
    public PixQrCodeDecodeResponseDtoBuilder payload(String value) {
      this.payload = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixQrCodeDecodeResponsePixQrCodeType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public PixQrCodeDecodeResponseDtoBuilder type(PixQrCodeDecodeResponsePixQrCodeType value) {
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixQrCodeDecodeResponsePixTransactionOriginType> transactionOriginType =
      JsonNullable.undefined();

    @JsonProperty("transactionOriginType")
    public PixQrCodeDecodeResponseDtoBuilder transactionOriginType(
      PixQrCodeDecodeResponsePixTransactionOriginType value
    ) {
      this.transactionOriginType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> pixKey = JsonNullable.undefined();

    @JsonProperty("pixKey")
    public PixQrCodeDecodeResponseDtoBuilder pixKey(String value) {
      this.pixKey = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> conciliationIdentifier = JsonNullable.undefined();

    @JsonProperty("conciliationIdentifier")
    public PixQrCodeDecodeResponseDtoBuilder conciliationIdentifier(String value) {
      this.conciliationIdentifier = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDate = JsonNullable.undefined();

    @JsonProperty("dueDate")
    public PixQrCodeDecodeResponseDtoBuilder dueDate(String value) {
      this.dueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> expirationDate = JsonNullable.undefined();

    @JsonProperty("expirationDate")
    public PixQrCodeDecodeResponseDtoBuilder expirationDate(String value) {
      this.expirationDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixQrCodeDecodeResponsePixTransactionCashValueFinality> finality = JsonNullable.undefined();

    @JsonProperty("finality")
    public PixQrCodeDecodeResponseDtoBuilder finality(PixQrCodeDecodeResponsePixTransactionCashValueFinality value) {
      this.finality = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public PixQrCodeDecodeResponseDtoBuilder value(Double value) {
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> changeValue = JsonNullable.undefined();

    @JsonProperty("changeValue")
    public PixQrCodeDecodeResponseDtoBuilder changeValue(Double value) {
      this.changeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public PixQrCodeDecodeResponseDtoBuilder interest(Double value) {
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public PixQrCodeDecodeResponseDtoBuilder fine(Double value) {
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public PixQrCodeDecodeResponseDtoBuilder discount(Double value) {
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> totalValue = JsonNullable.undefined();

    @JsonProperty("totalValue")
    public PixQrCodeDecodeResponseDtoBuilder totalValue(Double value) {
      this.totalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBePaidWithDifferentValue = JsonNullable.undefined();

    @JsonProperty("canBePaidWithDifferentValue")
    public PixQrCodeDecodeResponseDtoBuilder canBePaidWithDifferentValue(Boolean value) {
      this.canBePaidWithDifferentValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBeModifyChangeValue = JsonNullable.undefined();

    @JsonProperty("canBeModifyChangeValue")
    public PixQrCodeDecodeResponseDtoBuilder canBeModifyChangeValue(Boolean value) {
      this.canBeModifyChangeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixQrCodeDecodeReceiverDto> receiver = JsonNullable.undefined();

    @JsonProperty("receiver")
    public PixQrCodeDecodeResponseDtoBuilder receiver(PixQrCodeDecodeReceiverDto value) {
      this.receiver = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixTransactionQrCodePayerResponseDto> payer = JsonNullable.undefined();

    @JsonProperty("payer")
    public PixQrCodeDecodeResponseDtoBuilder payer(PixTransactionQrCodePayerResponseDto value) {
      this.payer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public PixQrCodeDecodeResponseDtoBuilder description(String value) {
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBePaid = JsonNullable.undefined();

    @JsonProperty("canBePaid")
    public PixQrCodeDecodeResponseDtoBuilder canBePaid(Boolean value) {
      this.canBePaid = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> cannotBePaidReason = JsonNullable.undefined();

    @JsonProperty("cannotBePaidReason")
    public PixQrCodeDecodeResponseDtoBuilder cannotBePaidReason(String value) {
      this.cannotBePaidReason = JsonNullable.of(value);
      return this;
    }
  }
}
