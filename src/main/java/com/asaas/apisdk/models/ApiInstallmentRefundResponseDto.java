// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiInstallmentRefundResponseDto {

  /**
   * Refund creation date
   */
  @JsonProperty("dateCreated")
  private JsonNullable<String> dateCreated;

  /**
   * Refund status
   */
  @JsonProperty("status")
  private JsonNullable<ApiInstallmentRefundResponsePaymentRefundStatus> status;

  /**
   * Refund value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * (Pix only) Unique identifier of the Pix transaction at the Central Bank
   */
  @JsonProperty("endToEndIdentifier")
  private JsonNullable<String> endToEndIdentifier;

  /**
   * Description of the refund
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * (Pix only) Refund effective date
   */
  @JsonProperty("effectiveDate")
  private JsonNullable<String> effectiveDate;

  /**
   * Transaction receipt link
   */
  @JsonProperty("transactionReceiptUrl")
  private JsonNullable<String> transactionReceiptUrl;

  /**
   * Refunded Splits, if any
   */
  @JsonProperty("refundedSplits")
  private JsonNullable<List<ApiPaymentRefundedSplitResponseDto>> refundedSplits;

  /**
   * Unique payment identifier in Asaas
   */
  @JsonProperty("paymentId")
  private JsonNullable<String> paymentId;

  @JsonIgnore
  public String getDateCreated() {
    return dateCreated.orElse(null);
  }

  @JsonIgnore
  public ApiInstallmentRefundResponsePaymentRefundStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public String getEndToEndIdentifier() {
    return endToEndIdentifier.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public String getEffectiveDate() {
    return effectiveDate.orElse(null);
  }

  @JsonIgnore
  public String getTransactionReceiptUrl() {
    return transactionReceiptUrl.orElse(null);
  }

  @JsonIgnore
  public List<ApiPaymentRefundedSplitResponseDto> getRefundedSplits() {
    return refundedSplits.orElse(null);
  }

  @JsonIgnore
  public String getPaymentId() {
    return paymentId.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiInstallmentRefundResponseDtoBuilder {

    private JsonNullable<String> dateCreated = JsonNullable.undefined();

    @JsonProperty("dateCreated")
    public ApiInstallmentRefundResponseDtoBuilder dateCreated(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreated cannot be null");
      }
      this.dateCreated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiInstallmentRefundResponsePaymentRefundStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiInstallmentRefundResponseDtoBuilder status(ApiInstallmentRefundResponsePaymentRefundStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiInstallmentRefundResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> endToEndIdentifier = JsonNullable.undefined();

    @JsonProperty("endToEndIdentifier")
    public ApiInstallmentRefundResponseDtoBuilder endToEndIdentifier(String value) {
      if (value == null) {
        throw new IllegalStateException("endToEndIdentifier cannot be null");
      }
      this.endToEndIdentifier = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiInstallmentRefundResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> effectiveDate = JsonNullable.undefined();

    @JsonProperty("effectiveDate")
    public ApiInstallmentRefundResponseDtoBuilder effectiveDate(String value) {
      if (value == null) {
        throw new IllegalStateException("effectiveDate cannot be null");
      }
      this.effectiveDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transactionReceiptUrl = JsonNullable.undefined();

    @JsonProperty("transactionReceiptUrl")
    public ApiInstallmentRefundResponseDtoBuilder transactionReceiptUrl(String value) {
      if (value == null) {
        throw new IllegalStateException("transactionReceiptUrl cannot be null");
      }
      this.transactionReceiptUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiPaymentRefundedSplitResponseDto>> refundedSplits = JsonNullable.undefined();

    @JsonProperty("refundedSplits")
    public ApiInstallmentRefundResponseDtoBuilder refundedSplits(List<ApiPaymentRefundedSplitResponseDto> value) {
      if (value == null) {
        throw new IllegalStateException("refundedSplits cannot be null");
      }
      this.refundedSplits = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentId = JsonNullable.undefined();

    @JsonProperty("paymentId")
    public ApiInstallmentRefundResponseDtoBuilder paymentId(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentId cannot be null");
      }
      this.paymentId = JsonNullable.of(value);
      return this;
    }
  }
}
