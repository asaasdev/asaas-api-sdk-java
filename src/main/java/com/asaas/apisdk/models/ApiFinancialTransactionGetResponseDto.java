// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiFinancialTransactionGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique transaction identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Transaction value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Value in account at the time of the transaction
   */
  @JsonProperty("balance")
  private JsonNullable<Double> balance;

  /**
   * Transaction type
   */
  @JsonProperty("type")
  private JsonNullable<ApiFinancialTransactionGetResponseFinancialTransactionType> type;

  /**
   * Transaction date
   */
  @JsonProperty("date")
  private JsonNullable<String> date;

  /**
   * Transaction description
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Payment identifier (If any)
   */
  @JsonProperty("paymentId")
  private JsonNullable<String> paymentId;

  /**
   * Split identifier (If any)
   */
  @JsonProperty("splitId")
  private JsonNullable<String> splitId;

  /**
   * Transfer identifier (If any)
   */
  @JsonProperty("transferId")
  private JsonNullable<String> transferId;

  /**
   * Anticipation identifier (If any)
   */
  @JsonProperty("anticipationId")
  private JsonNullable<String> anticipationId;

  /**
   * Bill payment identifier (If any)
   */
  @JsonProperty("billId")
  private JsonNullable<String> billId;

  /**
   * Invoice identifier (If any)
   */
  @JsonProperty("invoiceId")
  private JsonNullable<String> invoiceId;

  /**
   * Payment dunning identifier (If any)
   */
  @JsonProperty("paymentDunningId")
  private JsonNullable<String> paymentDunningId;

  /**
   * Serasa consultation identifier (If any)
   */
  @JsonProperty("creditBureauReportId")
  private JsonNullable<String> creditBureauReportId;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getBalance() {
    return balance.orElse(null);
  }

  @JsonIgnore
  public ApiFinancialTransactionGetResponseFinancialTransactionType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public String getDate() {
    return date.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public String getPaymentId() {
    return paymentId.orElse(null);
  }

  @JsonIgnore
  public String getSplitId() {
    return splitId.orElse(null);
  }

  @JsonIgnore
  public String getTransferId() {
    return transferId.orElse(null);
  }

  @JsonIgnore
  public String getAnticipationId() {
    return anticipationId.orElse(null);
  }

  @JsonIgnore
  public String getBillId() {
    return billId.orElse(null);
  }

  @JsonIgnore
  public String getInvoiceId() {
    return invoiceId.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDunningId() {
    return paymentDunningId.orElse(null);
  }

  @JsonIgnore
  public String getCreditBureauReportId() {
    return creditBureauReportId.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiFinancialTransactionGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiFinancialTransactionGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiFinancialTransactionGetResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiFinancialTransactionGetResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> balance = JsonNullable.undefined();

    @JsonProperty("balance")
    public ApiFinancialTransactionGetResponseDtoBuilder balance(Double value) {
      if (value == null) {
        throw new IllegalStateException("balance cannot be null");
      }
      this.balance = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiFinancialTransactionGetResponseFinancialTransactionType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ApiFinancialTransactionGetResponseDtoBuilder type(
      ApiFinancialTransactionGetResponseFinancialTransactionType value
    ) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> date = JsonNullable.undefined();

    @JsonProperty("date")
    public ApiFinancialTransactionGetResponseDtoBuilder date(String value) {
      if (value == null) {
        throw new IllegalStateException("date cannot be null");
      }
      this.date = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiFinancialTransactionGetResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentId = JsonNullable.undefined();

    @JsonProperty("paymentId")
    public ApiFinancialTransactionGetResponseDtoBuilder paymentId(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentId cannot be null");
      }
      this.paymentId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> splitId = JsonNullable.undefined();

    @JsonProperty("splitId")
    public ApiFinancialTransactionGetResponseDtoBuilder splitId(String value) {
      if (value == null) {
        throw new IllegalStateException("splitId cannot be null");
      }
      this.splitId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transferId = JsonNullable.undefined();

    @JsonProperty("transferId")
    public ApiFinancialTransactionGetResponseDtoBuilder transferId(String value) {
      if (value == null) {
        throw new IllegalStateException("transferId cannot be null");
      }
      this.transferId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> anticipationId = JsonNullable.undefined();

    @JsonProperty("anticipationId")
    public ApiFinancialTransactionGetResponseDtoBuilder anticipationId(String value) {
      if (value == null) {
        throw new IllegalStateException("anticipationId cannot be null");
      }
      this.anticipationId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> billId = JsonNullable.undefined();

    @JsonProperty("billId")
    public ApiFinancialTransactionGetResponseDtoBuilder billId(String value) {
      if (value == null) {
        throw new IllegalStateException("billId cannot be null");
      }
      this.billId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> invoiceId = JsonNullable.undefined();

    @JsonProperty("invoiceId")
    public ApiFinancialTransactionGetResponseDtoBuilder invoiceId(String value) {
      if (value == null) {
        throw new IllegalStateException("invoiceId cannot be null");
      }
      this.invoiceId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDunningId = JsonNullable.undefined();

    @JsonProperty("paymentDunningId")
    public ApiFinancialTransactionGetResponseDtoBuilder paymentDunningId(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDunningId cannot be null");
      }
      this.paymentDunningId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditBureauReportId = JsonNullable.undefined();

    @JsonProperty("creditBureauReportId")
    public ApiFinancialTransactionGetResponseDtoBuilder creditBureauReportId(String value) {
      if (value == null) {
        throw new IllegalStateException("creditBureauReportId cannot be null");
      }
      this.creditBureauReportId = JsonNullable.of(value);
      return this;
    }
  }
}
