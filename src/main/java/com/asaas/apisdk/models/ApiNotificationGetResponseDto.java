// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiNotificationGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique notification identifier
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Indicates whether notification is enabled
   */
  @JsonProperty("enabled")
  private JsonNullable<Boolean> enabled;

  /**
   * Indicates whether the email sent to you is enabled or disabled
   */
  @JsonProperty("emailEnabledForProvider")
  private JsonNullable<Boolean> emailEnabledForProvider;

  /**
   * Indicates whether the SMS sent to you is enabled or disabled
   */
  @JsonProperty("smsEnabledForProvider")
  private JsonNullable<Boolean> smsEnabledForProvider;

  /**
   * Indicates whether the email sent to the customer is enabled or disabled
   */
  @JsonProperty("emailEnabledForCustomer")
  private JsonNullable<Boolean> emailEnabledForCustomer;

  /**
   * Indicates whether the SMS sent to the customer is enabled or disabled
   */
  @JsonProperty("smsEnabledForCustomer")
  private JsonNullable<Boolean> smsEnabledForCustomer;

  /**
   * Indicates whether voice notification to the customer is enabled or disabled
   */
  @JsonProperty("phoneCallEnabledForCustomer")
  private JsonNullable<Boolean> phoneCallEnabledForCustomer;

  /**
   * Indicates whether the WhatsApp notification sent to the customer is enabled or disabled
   */
  @JsonProperty("whatsappEnabledForCustomer")
  private JsonNullable<Boolean> whatsappEnabledForCustomer;

  /**
   * Kind of event
   */
  @JsonProperty("event")
  private JsonNullable<ApiNotificationGetResponseNotificationEvent> event;

  /**
   * Specifies how many days before the due date the notification must be sent. Valid only for the `PAYMENT_DUEDATE_WARNING` and `PAYMENT_OVERDUE` events
   */
  @JsonProperty("scheduleOffset")
  private JsonNullable<ApiNotificationGetResponseDtoScheduleOffset> scheduleOffset;

  /**
   * Indicates whether the notification was deleted
   */
  @JsonProperty("deleted")
  private JsonNullable<Boolean> deleted;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public Boolean getEnabled() {
    return enabled.orElse(null);
  }

  @JsonIgnore
  public Boolean getEmailEnabledForProvider() {
    return emailEnabledForProvider.orElse(null);
  }

  @JsonIgnore
  public Boolean getSmsEnabledForProvider() {
    return smsEnabledForProvider.orElse(null);
  }

  @JsonIgnore
  public Boolean getEmailEnabledForCustomer() {
    return emailEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getSmsEnabledForCustomer() {
    return smsEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getPhoneCallEnabledForCustomer() {
    return phoneCallEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getWhatsappEnabledForCustomer() {
    return whatsappEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public ApiNotificationGetResponseNotificationEvent getEvent() {
    return event.orElse(null);
  }

  @JsonIgnore
  public ApiNotificationGetResponseDtoScheduleOffset getScheduleOffset() {
    return scheduleOffset.orElse(null);
  }

  @JsonIgnore
  public Boolean getDeleted() {
    return deleted.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiNotificationGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiNotificationGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiNotificationGetResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ApiNotificationGetResponseDtoBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> enabled = JsonNullable.undefined();

    @JsonProperty("enabled")
    public ApiNotificationGetResponseDtoBuilder enabled(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("enabled cannot be null");
      }
      this.enabled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> emailEnabledForProvider = JsonNullable.undefined();

    @JsonProperty("emailEnabledForProvider")
    public ApiNotificationGetResponseDtoBuilder emailEnabledForProvider(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("emailEnabledForProvider cannot be null");
      }
      this.emailEnabledForProvider = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> smsEnabledForProvider = JsonNullable.undefined();

    @JsonProperty("smsEnabledForProvider")
    public ApiNotificationGetResponseDtoBuilder smsEnabledForProvider(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("smsEnabledForProvider cannot be null");
      }
      this.smsEnabledForProvider = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> emailEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("emailEnabledForCustomer")
    public ApiNotificationGetResponseDtoBuilder emailEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("emailEnabledForCustomer cannot be null");
      }
      this.emailEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> smsEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("smsEnabledForCustomer")
    public ApiNotificationGetResponseDtoBuilder smsEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("smsEnabledForCustomer cannot be null");
      }
      this.smsEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> phoneCallEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("phoneCallEnabledForCustomer")
    public ApiNotificationGetResponseDtoBuilder phoneCallEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("phoneCallEnabledForCustomer cannot be null");
      }
      this.phoneCallEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> whatsappEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("whatsappEnabledForCustomer")
    public ApiNotificationGetResponseDtoBuilder whatsappEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("whatsappEnabledForCustomer cannot be null");
      }
      this.whatsappEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiNotificationGetResponseNotificationEvent> event = JsonNullable.undefined();

    @JsonProperty("event")
    public ApiNotificationGetResponseDtoBuilder event(ApiNotificationGetResponseNotificationEvent value) {
      if (value == null) {
        throw new IllegalStateException("event cannot be null");
      }
      this.event = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiNotificationGetResponseDtoScheduleOffset> scheduleOffset = JsonNullable.undefined();

    @JsonProperty("scheduleOffset")
    public ApiNotificationGetResponseDtoBuilder scheduleOffset(ApiNotificationGetResponseDtoScheduleOffset value) {
      if (value == null) {
        throw new IllegalStateException("scheduleOffset cannot be null");
      }
      this.scheduleOffset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> deleted = JsonNullable.of(true);

    @JsonProperty("deleted")
    public ApiNotificationGetResponseDtoBuilder deleted(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("deleted cannot be null");
      }
      this.deleted = JsonNullable.of(value);
      return this;
    }
  }
}
