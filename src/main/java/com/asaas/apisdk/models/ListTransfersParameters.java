// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListTransfersParameters {

  /**
   * Filter by initial creation date
   */
  @JsonProperty("dateCreatedLe[ge]")
  private JsonNullable<String> dateCreatedLeGe;

  /**
   * Filter by final creation date
   */
  @JsonProperty("dateCreatedLe[le]")
  private JsonNullable<String> dateCreatedLeLe;

  /**
   * Filter by the initial transfer effective date
   */
  @JsonProperty("transferDate[ge]")
  private JsonNullable<String> transferDateGe;

  /**
   * Filter by transfer end date
   */
  @JsonProperty("transferDate[le]")
  private JsonNullable<String> transferDateLe;

  /**
   * Filter by transfer type
   */
  @JsonProperty("type")
  private JsonNullable<String> type;

  @JsonIgnore
  public String getDateCreatedLeGe() {
    return dateCreatedLeGe.orElse(null);
  }

  @JsonIgnore
  public String getDateCreatedLeLe() {
    return dateCreatedLeLe.orElse(null);
  }

  @JsonIgnore
  public String getTransferDateGe() {
    return transferDateGe.orElse(null);
  }

  @JsonIgnore
  public String getTransferDateLe() {
    return transferDateLe.orElse(null);
  }

  @JsonIgnore
  public String getType() {
    return type.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListTransfersParametersBuilder {

    private JsonNullable<String> dateCreatedLeGe = JsonNullable.undefined();

    @JsonProperty("dateCreatedLe[ge]")
    public ListTransfersParametersBuilder dateCreatedLeGe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedLeGe cannot be null");
      }
      this.dateCreatedLeGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreatedLeLe = JsonNullable.undefined();

    @JsonProperty("dateCreatedLe[le]")
    public ListTransfersParametersBuilder dateCreatedLeLe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedLeLe cannot be null");
      }
      this.dateCreatedLeLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transferDateGe = JsonNullable.undefined();

    @JsonProperty("transferDate[ge]")
    public ListTransfersParametersBuilder transferDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("transferDateGe cannot be null");
      }
      this.transferDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transferDateLe = JsonNullable.undefined();

    @JsonProperty("transferDate[le]")
    public ListTransfersParametersBuilder transferDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("transferDateLe cannot be null");
      }
      this.transferDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ListTransfersParametersBuilder type(String value) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }
  }
}
