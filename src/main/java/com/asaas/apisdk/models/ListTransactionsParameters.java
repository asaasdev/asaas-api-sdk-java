// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListTransactionsParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by transaction status
   */
  @JsonProperty("status")
  private JsonNullable<ApiPixTransactionListRequestPixTransactionStatus> status;

  /**
   * Filter by transaction type
   */
  @JsonProperty("type")
  private JsonNullable<ApiPixTransactionListRequestPixTransactionType> type;

  /**
   * Filter by Pix transaction identifier at the Central Bank
   */
  @JsonProperty("endToEndIdentifier")
  private JsonNullable<String> endToEndIdentifier;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public ApiPixTransactionListRequestPixTransactionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public ApiPixTransactionListRequestPixTransactionType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public String getEndToEndIdentifier() {
    return endToEndIdentifier.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListTransactionsParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListTransactionsParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListTransactionsParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPixTransactionListRequestPixTransactionStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListTransactionsParametersBuilder status(ApiPixTransactionListRequestPixTransactionStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPixTransactionListRequestPixTransactionType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ListTransactionsParametersBuilder type(ApiPixTransactionListRequestPixTransactionType value) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> endToEndIdentifier = JsonNullable.undefined();

    @JsonProperty("endToEndIdentifier")
    public ListTransactionsParametersBuilder endToEndIdentifier(String value) {
      if (value == null) {
        throw new IllegalStateException("endToEndIdentifier cannot be null");
      }
      this.endToEndIdentifier = JsonNullable.of(value);
      return this;
    }
  }
}
