// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCustomerFiscalInfoGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Email used by Asaas to send invoice notifications and alerts
   */
  @JsonProperty("email")
  private JsonNullable<String> email;

  /**
   * Company municipal registration
   */
  @JsonProperty("municipalInscription")
  private JsonNullable<String> municipalInscription;

  /**
   * Indicates whether the company opts for the simple national system
   */
  @JsonProperty("simplesNacional")
  private JsonNullable<Boolean> simplesNacional;

  /**
   * Identifies whether the company is classified as a cultural promoter
   */
  @JsonProperty("culturalProjectsPromoter")
  private JsonNullable<Boolean> culturalProjectsPromoter;

  /**
   * CNAE code
   */
  @JsonProperty("cnae")
  private JsonNullable<String> cnae;

  /**
   * Special taxation regime identifier
   */
  @JsonProperty("specialTaxRegime")
  private JsonNullable<String> specialTaxRegime;

  /**
   * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
   */
  @JsonProperty("serviceListItem")
  private JsonNullable<String> serviceListItem;

  /**
   * NBS Code (Brazilian Nomenclature of Services). It must be included on the NFS-e (Electronic Service Invoice) when required by the municipal government and/or for import or export services. Check with your local government or your accounting department to determine whether this information is necessary.
   */
  @JsonProperty("nbsCode")
  private JsonNullable<String> nbsCode;

  /**
   * Serial Number registered for the company
   */
  @JsonProperty("rpsSerie")
  private JsonNullable<String> rpsSerie;

  /**
   * RPS number used in the last invoice issued to your company
   */
  @JsonProperty("rpsNumber")
  private JsonNullable<Long> rpsNumber;

  /**
   * Batch number used on the last invoice issued by your company
   */
  @JsonProperty("loteNumber")
  private JsonNullable<Long> loteNumber;

  /**
   * User to access your city's city hall website
   */
  @JsonProperty("username")
  private JsonNullable<String> username;

  /**
   * Indicates whether the password to access the city hall website has been entered
   */
  @JsonProperty("passwordSent")
  private JsonNullable<Boolean> passwordSent;

  /**
   * Indicates whether the token for accessing the city hall website was provided
   */
  @JsonProperty("accessTokenSent")
  private JsonNullable<Boolean> accessTokenSent;

  /**
   * Indicates whether the digital certificate for access to the city hall website has been provided
   */
  @JsonProperty("certificateSent")
  private JsonNullable<Boolean> certificateSent;

  /**
   * Identifier of the tax calculation regime
   */
  @JsonProperty("nationalPortalTaxCalculationRegime")
  private JsonNullable<String> nationalPortalTaxCalculationRegime;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getEmail() {
    return email.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalInscription() {
    return municipalInscription.orElse(null);
  }

  @JsonIgnore
  public Boolean getSimplesNacional() {
    return simplesNacional.orElse(null);
  }

  @JsonIgnore
  public Boolean getCulturalProjectsPromoter() {
    return culturalProjectsPromoter.orElse(null);
  }

  @JsonIgnore
  public String getCnae() {
    return cnae.orElse(null);
  }

  @JsonIgnore
  public String getSpecialTaxRegime() {
    return specialTaxRegime.orElse(null);
  }

  @JsonIgnore
  public String getServiceListItem() {
    return serviceListItem.orElse(null);
  }

  @JsonIgnore
  public String getNbsCode() {
    return nbsCode.orElse(null);
  }

  @JsonIgnore
  public String getRpsSerie() {
    return rpsSerie.orElse(null);
  }

  @JsonIgnore
  public Long getRpsNumber() {
    return rpsNumber.orElse(null);
  }

  @JsonIgnore
  public Long getLoteNumber() {
    return loteNumber.orElse(null);
  }

  @JsonIgnore
  public String getUsername() {
    return username.orElse(null);
  }

  @JsonIgnore
  public Boolean getPasswordSent() {
    return passwordSent.orElse(null);
  }

  @JsonIgnore
  public Boolean getAccessTokenSent() {
    return accessTokenSent.orElse(null);
  }

  @JsonIgnore
  public Boolean getCertificateSent() {
    return certificateSent.orElse(null);
  }

  @JsonIgnore
  public String getNationalPortalTaxCalculationRegime() {
    return nationalPortalTaxCalculationRegime.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCustomerFiscalInfoGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> email = JsonNullable.undefined();

    @JsonProperty("email")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder email(String value) {
      if (value == null) {
        throw new IllegalStateException("email cannot be null");
      }
      this.email = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalInscription = JsonNullable.undefined();

    @JsonProperty("municipalInscription")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder municipalInscription(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalInscription cannot be null");
      }
      this.municipalInscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> simplesNacional = JsonNullable.of(true);

    @JsonProperty("simplesNacional")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder simplesNacional(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("simplesNacional cannot be null");
      }
      this.simplesNacional = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> culturalProjectsPromoter = JsonNullable.of(true);

    @JsonProperty("culturalProjectsPromoter")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder culturalProjectsPromoter(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("culturalProjectsPromoter cannot be null");
      }
      this.culturalProjectsPromoter = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> cnae = JsonNullable.undefined();

    @JsonProperty("cnae")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder cnae(String value) {
      if (value == null) {
        throw new IllegalStateException("cnae cannot be null");
      }
      this.cnae = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> specialTaxRegime = JsonNullable.undefined();

    @JsonProperty("specialTaxRegime")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder specialTaxRegime(String value) {
      if (value == null) {
        throw new IllegalStateException("specialTaxRegime cannot be null");
      }
      this.specialTaxRegime = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> serviceListItem = JsonNullable.undefined();

    @JsonProperty("serviceListItem")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder serviceListItem(String value) {
      if (value == null) {
        throw new IllegalStateException("serviceListItem cannot be null");
      }
      this.serviceListItem = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nbsCode = JsonNullable.undefined();

    @JsonProperty("nbsCode")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder nbsCode(String value) {
      if (value == null) {
        throw new IllegalStateException("nbsCode cannot be null");
      }
      this.nbsCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> rpsSerie = JsonNullable.undefined();

    @JsonProperty("rpsSerie")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder rpsSerie(String value) {
      if (value == null) {
        throw new IllegalStateException("rpsSerie cannot be null");
      }
      this.rpsSerie = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> rpsNumber = JsonNullable.undefined();

    @JsonProperty("rpsNumber")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder rpsNumber(Long value) {
      if (value == null) {
        throw new IllegalStateException("rpsNumber cannot be null");
      }
      this.rpsNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> loteNumber = JsonNullable.undefined();

    @JsonProperty("loteNumber")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder loteNumber(Long value) {
      if (value == null) {
        throw new IllegalStateException("loteNumber cannot be null");
      }
      this.loteNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> username = JsonNullable.undefined();

    @JsonProperty("username")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder username(String value) {
      if (value == null) {
        throw new IllegalStateException("username cannot be null");
      }
      this.username = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> passwordSent = JsonNullable.of(true);

    @JsonProperty("passwordSent")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder passwordSent(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("passwordSent cannot be null");
      }
      this.passwordSent = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> accessTokenSent = JsonNullable.of(true);

    @JsonProperty("accessTokenSent")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder accessTokenSent(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("accessTokenSent cannot be null");
      }
      this.accessTokenSent = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> certificateSent = JsonNullable.of(true);

    @JsonProperty("certificateSent")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder certificateSent(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("certificateSent cannot be null");
      }
      this.certificateSent = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nationalPortalTaxCalculationRegime = JsonNullable.undefined();

    @JsonProperty("nationalPortalTaxCalculationRegime")
    public ApiCustomerFiscalInfoGetResponseDtoBuilder nationalPortalTaxCalculationRegime(String value) {
      if (value == null) {
        throw new IllegalStateException("nationalPortalTaxCalculationRegime cannot be null");
      }
      this.nationalPortalTaxCalculationRegime = JsonNullable.of(value);
      return this;
    }
  }
}
