// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiInstallmentGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique installment identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Installment amount
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Net installment amount
   */
  @JsonProperty("netValue")
  private JsonNullable<Double> netValue;

  /**
   * Value of each installment
   */
  @JsonProperty("paymentValue")
  private JsonNullable<Double> paymentValue;

  /**
   * Number of installments
   */
  @JsonProperty("installmentCount")
  private JsonNullable<Long> installmentCount;

  /**
   * Form of payment
   */
  @JsonProperty("billingType")
  private JsonNullable<ApiInstallmentGetResponseBillingType> billingType;

  /**
   * Bill settlement date on Asaas
   */
  @JsonProperty("paymentDate")
  private JsonNullable<String> paymentDate;

  /**
   * Description of the installment
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Due date of each installment
   */
  @JsonProperty("expirationDay")
  private JsonNullable<Long> expirationDay;

  /**
   * Installment creation date
   */
  @JsonProperty("dateCreated")
  private JsonNullable<String> dateCreated;

  /**
   * Unique identifier of the customer to whom the installment belongs
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Unique identifier of the payment link to which the installment belongs
   */
  @JsonProperty("paymentLink")
  private JsonNullable<String> paymentLink;

  /**
   * Unique checkout identifier
   */
  @JsonProperty("checkoutSession")
  private JsonNullable<String> checkoutSession;

  /**
   * URL of proof of confirmation, receipt, reversal or removal.
   */
  @JsonProperty("transactionReceiptUrl")
  private JsonNullable<String> transactionReceiptUrl;

  @JsonProperty("chargeback")
  private JsonNullable<ApiPaymentChargebackResponseDto> chargeback;

  @JsonProperty("creditCard")
  private JsonNullable<ApiPaymentSaveWithCreditCardCreditCardDto> creditCard;

  /**
   * Indicates whether the installment has been removed
   */
  @JsonProperty("deleted")
  private JsonNullable<Boolean> deleted;

  /**
   * Refunds information
   */
  @JsonProperty("refunds")
  private JsonNullable<List<ApiInstallmentRefundResponseDto>> refunds;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getNetValue() {
    return netValue.orElse(null);
  }

  @JsonIgnore
  public Double getPaymentValue() {
    return paymentValue.orElse(null);
  }

  @JsonIgnore
  public Long getInstallmentCount() {
    return installmentCount.orElse(null);
  }

  @JsonIgnore
  public ApiInstallmentGetResponseBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDate() {
    return paymentDate.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Long getExpirationDay() {
    return expirationDay.orElse(null);
  }

  @JsonIgnore
  public String getDateCreated() {
    return dateCreated.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public String getPaymentLink() {
    return paymentLink.orElse(null);
  }

  @JsonIgnore
  public String getCheckoutSession() {
    return checkoutSession.orElse(null);
  }

  @JsonIgnore
  public String getTransactionReceiptUrl() {
    return transactionReceiptUrl.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentChargebackResponseDto getChargeback() {
    return chargeback.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentSaveWithCreditCardCreditCardDto getCreditCard() {
    return creditCard.orElse(null);
  }

  @JsonIgnore
  public Boolean getDeleted() {
    return deleted.orElse(null);
  }

  @JsonIgnore
  public List<ApiInstallmentRefundResponseDto> getRefunds() {
    return refunds.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiInstallmentGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiInstallmentGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiInstallmentGetResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiInstallmentGetResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> netValue = JsonNullable.undefined();

    @JsonProperty("netValue")
    public ApiInstallmentGetResponseDtoBuilder netValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("netValue cannot be null");
      }
      this.netValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> paymentValue = JsonNullable.undefined();

    @JsonProperty("paymentValue")
    public ApiInstallmentGetResponseDtoBuilder paymentValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("paymentValue cannot be null");
      }
      this.paymentValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> installmentCount = JsonNullable.undefined();

    @JsonProperty("installmentCount")
    public ApiInstallmentGetResponseDtoBuilder installmentCount(Long value) {
      if (value == null) {
        throw new IllegalStateException("installmentCount cannot be null");
      }
      this.installmentCount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiInstallmentGetResponseBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ApiInstallmentGetResponseDtoBuilder billingType(ApiInstallmentGetResponseBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDate = JsonNullable.undefined();

    @JsonProperty("paymentDate")
    public ApiInstallmentGetResponseDtoBuilder paymentDate(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDate cannot be null");
      }
      this.paymentDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiInstallmentGetResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> expirationDay = JsonNullable.undefined();

    @JsonProperty("expirationDay")
    public ApiInstallmentGetResponseDtoBuilder expirationDay(Long value) {
      if (value == null) {
        throw new IllegalStateException("expirationDay cannot be null");
      }
      this.expirationDay = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreated = JsonNullable.undefined();

    @JsonProperty("dateCreated")
    public ApiInstallmentGetResponseDtoBuilder dateCreated(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreated cannot be null");
      }
      this.dateCreated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ApiInstallmentGetResponseDtoBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentLink = JsonNullable.undefined();

    @JsonProperty("paymentLink")
    public ApiInstallmentGetResponseDtoBuilder paymentLink(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentLink cannot be null");
      }
      this.paymentLink = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> checkoutSession = JsonNullable.undefined();

    @JsonProperty("checkoutSession")
    public ApiInstallmentGetResponseDtoBuilder checkoutSession(String value) {
      if (value == null) {
        throw new IllegalStateException("checkoutSession cannot be null");
      }
      this.checkoutSession = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transactionReceiptUrl = JsonNullable.undefined();

    @JsonProperty("transactionReceiptUrl")
    public ApiInstallmentGetResponseDtoBuilder transactionReceiptUrl(String value) {
      if (value == null) {
        throw new IllegalStateException("transactionReceiptUrl cannot be null");
      }
      this.transactionReceiptUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentChargebackResponseDto> chargeback = JsonNullable.undefined();

    @JsonProperty("chargeback")
    public ApiInstallmentGetResponseDtoBuilder chargeback(ApiPaymentChargebackResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("chargeback cannot be null");
      }
      this.chargeback = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentSaveWithCreditCardCreditCardDto> creditCard = JsonNullable.undefined();

    @JsonProperty("creditCard")
    public ApiInstallmentGetResponseDtoBuilder creditCard(ApiPaymentSaveWithCreditCardCreditCardDto value) {
      if (value == null) {
        throw new IllegalStateException("creditCard cannot be null");
      }
      this.creditCard = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> deleted = JsonNullable.undefined();

    @JsonProperty("deleted")
    public ApiInstallmentGetResponseDtoBuilder deleted(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("deleted cannot be null");
      }
      this.deleted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiInstallmentRefundResponseDto>> refunds = JsonNullable.undefined();

    @JsonProperty("refunds")
    public ApiInstallmentGetResponseDtoBuilder refunds(List<ApiInstallmentRefundResponseDto> value) {
      if (value == null) {
        throw new IllegalStateException("refunds cannot be null");
      }
      this.refunds = JsonNullable.of(value);
      return this;
    }
  }
}
