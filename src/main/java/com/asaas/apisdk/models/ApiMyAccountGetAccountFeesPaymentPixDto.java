// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiMyAccountGetAccountFeesPaymentPixDto {

  /**
   * Fixed fee (If any)
   */
  @JsonProperty("fixedFeeValue")
  private JsonNullable<Double> fixedFeeValue;

  /**
   * Promotional fixed rate (If any)
   */
  @JsonProperty("fixedFeeValueWithDiscount")
  private JsonNullable<Double> fixedFeeValueWithDiscount;

  /**
   * Percentage rate (If any)
   */
  @JsonProperty("percentageFee")
  private JsonNullable<Double> percentageFee;

  /**
   * Minimum fixed rate in case of percentage rate
   */
  @JsonProperty("minimumFeeValue")
  private JsonNullable<Double> minimumFeeValue;

  /**
   * Maximum fixed rate in case of percentage rate
   */
  @JsonProperty("maximumFeeValue")
  private JsonNullable<Double> maximumFeeValue;

  /**
   * Promotional fee expiration date (If any)
   */
  @JsonProperty("discountExpiration")
  private JsonNullable<String> discountExpiration;

  /**
   * Number of free transactions per month
   */
  @JsonProperty("monthlyCreditsWithoutFee")
  private JsonNullable<Long> monthlyCreditsWithoutFee;

  /**
   * How many transactions have you received this month?
   */
  @JsonProperty("creditsReceivedOfCurrentMonth")
  private JsonNullable<Long> creditsReceivedOfCurrentMonth;

  @JsonIgnore
  public Double getFixedFeeValue() {
    return fixedFeeValue.orElse(null);
  }

  @JsonIgnore
  public Double getFixedFeeValueWithDiscount() {
    return fixedFeeValueWithDiscount.orElse(null);
  }

  @JsonIgnore
  public Double getPercentageFee() {
    return percentageFee.orElse(null);
  }

  @JsonIgnore
  public Double getMinimumFeeValue() {
    return minimumFeeValue.orElse(null);
  }

  @JsonIgnore
  public Double getMaximumFeeValue() {
    return maximumFeeValue.orElse(null);
  }

  @JsonIgnore
  public String getDiscountExpiration() {
    return discountExpiration.orElse(null);
  }

  @JsonIgnore
  public Long getMonthlyCreditsWithoutFee() {
    return monthlyCreditsWithoutFee.orElse(null);
  }

  @JsonIgnore
  public Long getCreditsReceivedOfCurrentMonth() {
    return creditsReceivedOfCurrentMonth.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiMyAccountGetAccountFeesPaymentPixDtoBuilder {

    private JsonNullable<Double> fixedFeeValue = JsonNullable.undefined();

    @JsonProperty("fixedFeeValue")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder fixedFeeValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("fixedFeeValue cannot be null");
      }
      this.fixedFeeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> fixedFeeValueWithDiscount = JsonNullable.undefined();

    @JsonProperty("fixedFeeValueWithDiscount")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder fixedFeeValueWithDiscount(Double value) {
      if (value == null) {
        throw new IllegalStateException("fixedFeeValueWithDiscount cannot be null");
      }
      this.fixedFeeValueWithDiscount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> percentageFee = JsonNullable.undefined();

    @JsonProperty("percentageFee")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder percentageFee(Double value) {
      if (value == null) {
        throw new IllegalStateException("percentageFee cannot be null");
      }
      this.percentageFee = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> minimumFeeValue = JsonNullable.undefined();

    @JsonProperty("minimumFeeValue")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder minimumFeeValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("minimumFeeValue cannot be null");
      }
      this.minimumFeeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> maximumFeeValue = JsonNullable.undefined();

    @JsonProperty("maximumFeeValue")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder maximumFeeValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("maximumFeeValue cannot be null");
      }
      this.maximumFeeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> discountExpiration = JsonNullable.undefined();

    @JsonProperty("discountExpiration")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder discountExpiration(String value) {
      if (value == null) {
        throw new IllegalStateException("discountExpiration cannot be null");
      }
      this.discountExpiration = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> monthlyCreditsWithoutFee = JsonNullable.undefined();

    @JsonProperty("monthlyCreditsWithoutFee")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder monthlyCreditsWithoutFee(Long value) {
      if (value == null) {
        throw new IllegalStateException("monthlyCreditsWithoutFee cannot be null");
      }
      this.monthlyCreditsWithoutFee = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> creditsReceivedOfCurrentMonth = JsonNullable.undefined();

    @JsonProperty("creditsReceivedOfCurrentMonth")
    public ApiMyAccountGetAccountFeesPaymentPixDtoBuilder creditsReceivedOfCurrentMonth(Long value) {
      if (value == null) {
        throw new IllegalStateException("creditsReceivedOfCurrentMonth cannot be null");
      }
      this.creditsReceivedOfCurrentMonth = JsonNullable.of(value);
      return this;
    }
  }
}
