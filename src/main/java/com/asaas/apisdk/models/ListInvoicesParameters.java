// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListInvoicesParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by an issue date
   */
  @JsonProperty("effectiveDate[Ge]")
  private JsonNullable<String> effectiveDateGe;

  /**
   * Filter by an issue date
   */
  @JsonProperty("effectiveDate[Le]")
  private JsonNullable<String> effectiveDateLe;

  /**
   * Filter by unique payment identifier
   */
  @JsonProperty("payment")
  private JsonNullable<String> payment;

  /**
   * Filter by the unique installment identifier
   */
  @JsonProperty("installment")
  private JsonNullable<String> installment;

  /**
   * Filter by invoice identifier in your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Filter by situation
   */
  @JsonProperty("status")
  private JsonNullable<InvoiceListRequestInvoiceStatus> status;

  /**
   * Filter by unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public String getEffectiveDateGe() {
    return effectiveDateGe.orElse(null);
  }

  @JsonIgnore
  public String getEffectiveDateLe() {
    return effectiveDateLe.orElse(null);
  }

  @JsonIgnore
  public String getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public String getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public InvoiceListRequestInvoiceStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListInvoicesParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListInvoicesParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListInvoicesParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> effectiveDateGe = JsonNullable.undefined();

    @JsonProperty("effectiveDate[Ge]")
    public ListInvoicesParametersBuilder effectiveDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("effectiveDateGe cannot be null");
      }
      this.effectiveDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> effectiveDateLe = JsonNullable.undefined();

    @JsonProperty("effectiveDate[Le]")
    public ListInvoicesParametersBuilder effectiveDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("effectiveDateLe cannot be null");
      }
      this.effectiveDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public ListInvoicesParametersBuilder payment(String value) {
      if (value == null) {
        throw new IllegalStateException("payment cannot be null");
      }
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ListInvoicesParametersBuilder installment(String value) {
      if (value == null) {
        throw new IllegalStateException("installment cannot be null");
      }
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ListInvoicesParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<InvoiceListRequestInvoiceStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListInvoicesParametersBuilder status(InvoiceListRequestInvoiceStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ListInvoicesParametersBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }
  }
}
