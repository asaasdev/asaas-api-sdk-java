// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiAccountDocumentGroupResponseDto {

  /**
   * Unique document group identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Document group status
   */
  @JsonProperty("status")
  private JsonNullable<ApiAccountDocumentGroupResponseCustomerDocumentStatus> status;

  /**
   * Type of documents
   */
  @JsonProperty("type")
  private JsonNullable<ApiAccountDocumentGroupResponseCustomerDocumentType> type;

  /**
   * Document group title
   */
  @JsonProperty("title")
  private JsonNullable<String> title;

  /**
   * Description
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  @JsonProperty("responsible")
  private JsonNullable<ApiAccountDocumentGroupResponsibleResponseDto> responsible;

  /**
   * URL for sending documents
   */
  @JsonProperty("onboardingUrl")
  private JsonNullable<String> onboardingUrl;

  /**
   * Expiration date of the URL for sending documents
   */
  @JsonProperty("onboardingUrlExpirationDate")
  private JsonNullable<String> onboardingUrlExpirationDate;

  /**
   * Documents that have already been sent with their respective identifiers
   */
  @JsonProperty("documents")
  private JsonNullable<List<ApiAccountDocumentGetResponseDto>> documents;

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public ApiAccountDocumentGroupResponseCustomerDocumentStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public ApiAccountDocumentGroupResponseCustomerDocumentType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public String getTitle() {
    return title.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public ApiAccountDocumentGroupResponsibleResponseDto getResponsible() {
    return responsible.orElse(null);
  }

  @JsonIgnore
  public String getOnboardingUrl() {
    return onboardingUrl.orElse(null);
  }

  @JsonIgnore
  public String getOnboardingUrlExpirationDate() {
    return onboardingUrlExpirationDate.orElse(null);
  }

  @JsonIgnore
  public List<ApiAccountDocumentGetResponseDto> getDocuments() {
    return documents.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiAccountDocumentGroupResponseDtoBuilder {

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiAccountDocumentGroupResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiAccountDocumentGroupResponseCustomerDocumentStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiAccountDocumentGroupResponseDtoBuilder status(
      ApiAccountDocumentGroupResponseCustomerDocumentStatus value
    ) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiAccountDocumentGroupResponseCustomerDocumentType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ApiAccountDocumentGroupResponseDtoBuilder type(ApiAccountDocumentGroupResponseCustomerDocumentType value) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> title = JsonNullable.undefined();

    @JsonProperty("title")
    public ApiAccountDocumentGroupResponseDtoBuilder title(String value) {
      if (value == null) {
        throw new IllegalStateException("title cannot be null");
      }
      this.title = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiAccountDocumentGroupResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiAccountDocumentGroupResponsibleResponseDto> responsible = JsonNullable.undefined();

    @JsonProperty("responsible")
    public ApiAccountDocumentGroupResponseDtoBuilder responsible(ApiAccountDocumentGroupResponsibleResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("responsible cannot be null");
      }
      this.responsible = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> onboardingUrl = JsonNullable.undefined();

    @JsonProperty("onboardingUrl")
    public ApiAccountDocumentGroupResponseDtoBuilder onboardingUrl(String value) {
      if (value == null) {
        throw new IllegalStateException("onboardingUrl cannot be null");
      }
      this.onboardingUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> onboardingUrlExpirationDate = JsonNullable.undefined();

    @JsonProperty("onboardingUrlExpirationDate")
    public ApiAccountDocumentGroupResponseDtoBuilder onboardingUrlExpirationDate(String value) {
      if (value == null) {
        throw new IllegalStateException("onboardingUrlExpirationDate cannot be null");
      }
      this.onboardingUrlExpirationDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiAccountDocumentGetResponseDto>> documents = JsonNullable.undefined();

    @JsonProperty("documents")
    public ApiAccountDocumentGroupResponseDtoBuilder documents(List<ApiAccountDocumentGetResponseDto> value) {
      if (value == null) {
        throw new IllegalStateException("documents cannot be null");
      }
      this.documents = JsonNullable.of(value);
      return this;
    }
  }
}
