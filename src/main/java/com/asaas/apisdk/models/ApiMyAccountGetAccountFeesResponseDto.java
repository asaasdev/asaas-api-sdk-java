// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiMyAccountGetAccountFeesResponseDto {

  @JsonProperty("payment")
  private JsonNullable<ApiMyAccountGetAccountFeesPaymentDto> payment;

  @JsonProperty("transfer")
  private JsonNullable<ApiMyAccountGetAccountFeesTransferDto> transfer;

  @JsonProperty("notification")
  private JsonNullable<ApiMyAccountGetAccountFeesNotificationDto> notification;

  @JsonProperty("creditBureauReport")
  private JsonNullable<ApiMyAccountGetAccountFeesCreditBureauReportDto> creditBureauReport;

  @JsonProperty("invoice")
  private JsonNullable<ApiMyAccountGetAccountFeesInvoiceDto> invoice;

  @JsonProperty("anticipation")
  private JsonNullable<ApiMyAccountGetAccountFeesAnticipationDto> anticipation;

  @JsonIgnore
  public ApiMyAccountGetAccountFeesPaymentDto getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesTransferDto getTransfer() {
    return transfer.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesNotificationDto getNotification() {
    return notification.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesCreditBureauReportDto getCreditBureauReport() {
    return creditBureauReport.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesInvoiceDto getInvoice() {
    return invoice.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesAnticipationDto getAnticipation() {
    return anticipation.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiMyAccountGetAccountFeesResponseDtoBuilder {

    private JsonNullable<ApiMyAccountGetAccountFeesPaymentDto> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder payment(ApiMyAccountGetAccountFeesPaymentDto value) {
      if (value == null) {
        throw new IllegalStateException("payment cannot be null");
      }
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesTransferDto> transfer = JsonNullable.undefined();

    @JsonProperty("transfer")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder transfer(ApiMyAccountGetAccountFeesTransferDto value) {
      if (value == null) {
        throw new IllegalStateException("transfer cannot be null");
      }
      this.transfer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesNotificationDto> notification = JsonNullable.undefined();

    @JsonProperty("notification")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder notification(ApiMyAccountGetAccountFeesNotificationDto value) {
      if (value == null) {
        throw new IllegalStateException("notification cannot be null");
      }
      this.notification = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesCreditBureauReportDto> creditBureauReport = JsonNullable.undefined();

    @JsonProperty("creditBureauReport")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder creditBureauReport(
      ApiMyAccountGetAccountFeesCreditBureauReportDto value
    ) {
      if (value == null) {
        throw new IllegalStateException("creditBureauReport cannot be null");
      }
      this.creditBureauReport = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesInvoiceDto> invoice = JsonNullable.undefined();

    @JsonProperty("invoice")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder invoice(ApiMyAccountGetAccountFeesInvoiceDto value) {
      if (value == null) {
        throw new IllegalStateException("invoice cannot be null");
      }
      this.invoice = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesAnticipationDto> anticipation = JsonNullable.undefined();

    @JsonProperty("anticipation")
    public ApiMyAccountGetAccountFeesResponseDtoBuilder anticipation(ApiMyAccountGetAccountFeesAnticipationDto value) {
      if (value == null) {
        throw new IllegalStateException("anticipation cannot be null");
      }
      this.anticipation = JsonNullable.of(value);
      return this;
    }
  }
}
