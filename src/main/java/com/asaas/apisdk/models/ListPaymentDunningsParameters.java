// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListPaymentDunningsParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by payment dunning status
   */
  @JsonProperty("status")
  private JsonNullable<ApiPaymentDunningListRequestPaymentDunningStatus> status;

  /**
   * Filter by type of payment dunning
   */
  @JsonProperty("type")
  private JsonNullable<ApiPaymentDunningListRequestPaymentDunningType> type;

  /**
   * Filter by dunnings for a specific payment
   */
  @JsonProperty("payment")
  private JsonNullable<String> payment;

  /**
   * Filter from initial request date
   */
  @JsonProperty("requestStartDate")
  private JsonNullable<String> requestStartDate;

  /**
   * Filter from end request date
   */
  @JsonProperty("requestEndDate")
  private JsonNullable<String> requestEndDate;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDunningListRequestPaymentDunningStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDunningListRequestPaymentDunningType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public String getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public String getRequestStartDate() {
    return requestStartDate.orElse(null);
  }

  @JsonIgnore
  public String getRequestEndDate() {
    return requestEndDate.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListPaymentDunningsParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListPaymentDunningsParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListPaymentDunningsParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDunningListRequestPaymentDunningStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListPaymentDunningsParametersBuilder status(ApiPaymentDunningListRequestPaymentDunningStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDunningListRequestPaymentDunningType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ListPaymentDunningsParametersBuilder type(ApiPaymentDunningListRequestPaymentDunningType value) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public ListPaymentDunningsParametersBuilder payment(String value) {
      if (value == null) {
        throw new IllegalStateException("payment cannot be null");
      }
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> requestStartDate = JsonNullable.undefined();

    @JsonProperty("requestStartDate")
    public ListPaymentDunningsParametersBuilder requestStartDate(String value) {
      if (value == null) {
        throw new IllegalStateException("requestStartDate cannot be null");
      }
      this.requestStartDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> requestEndDate = JsonNullable.undefined();

    @JsonProperty("requestEndDate")
    public ListPaymentDunningsParametersBuilder requestEndDate(String value) {
      if (value == null) {
        throw new IllegalStateException("requestEndDate cannot be null");
      }
      this.requestEndDate = JsonNullable.of(value);
      return this;
    }
  }
}
