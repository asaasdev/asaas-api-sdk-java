// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListPaymentsLinksParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by activated or deactivated payment link
   */
  @JsonProperty("active")
  private JsonNullable<Boolean> active;

  /**
   * True to also retrieve removed payment links
   */
  @JsonProperty("includeDeleted")
  private JsonNullable<Boolean> includeDeleted;

  /**
   * Filter by payments link name
   */
  @JsonProperty("name")
  private JsonNullable<String> name;

  /**
   * Filter by your system identifier
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public Boolean getActive() {
    return active.orElse(null);
  }

  @JsonIgnore
  public Boolean getIncludeDeleted() {
    return includeDeleted.orElse(null);
  }

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListPaymentsLinksParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListPaymentsLinksParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListPaymentsLinksParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> active = JsonNullable.undefined();

    @JsonProperty("active")
    public ListPaymentsLinksParametersBuilder active(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("active cannot be null");
      }
      this.active = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> includeDeleted = JsonNullable.undefined();

    @JsonProperty("includeDeleted")
    public ListPaymentsLinksParametersBuilder includeDeleted(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("includeDeleted cannot be null");
      }
      this.includeDeleted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public ListPaymentsLinksParametersBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ListPaymentsLinksParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }
  }
}
