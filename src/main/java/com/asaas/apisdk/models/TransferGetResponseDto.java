// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class TransferGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique transfer identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Type of transfer
   */
  @JsonProperty("type")
  private JsonNullable<TransferGetResponseDtoType> type;

  /**
   * Transfer request date
   */
  @JsonProperty("dateCreated")
  private JsonNullable<String> dateCreated;

  /**
   * Transfer amount
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Net value minus transfer fee
   */
  @JsonProperty("netValue")
  private JsonNullable<Double> netValue;

  /**
   * Transfer status
   */
  @JsonProperty("status")
  private JsonNullable<TransferGetResponseTransferStatus> status;

  /**
   * Transfer rate
   */
  @JsonProperty("transferFee")
  private JsonNullable<Double> transferFee;

  /**
   * Effective date
   */
  @JsonProperty("effectiveDate")
  private JsonNullable<String> effectiveDate;

  /**
   * Schedule date
   */
  @JsonProperty("scheduleDate")
  private JsonNullable<String> scheduleDate;

  /**
   * Unique identifier of the Pix transaction at the Central Bank
   */
  @JsonProperty("endToEndIdentifier")
  private JsonNullable<String> endToEndIdentifier;

  /**
   * `false` when awaiting authorization via SMS Token
   */
  @JsonProperty("authorized")
  private JsonNullable<Boolean> authorized;

  /**
   * Reason for transfer failure
   */
  @JsonProperty("failReason")
  private JsonNullable<String> failReason;

  /**
   * Transfer identifier in your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Proof of transfer will be available after the transfer is confirmed
   */
  @JsonProperty("transactionReceiptUrl")
  private JsonNullable<String> transactionReceiptUrl;

  /**
   * Transfer method
   */
  @JsonProperty("operationType")
  private JsonNullable<TransferGetResponseTransferType> operationType;

  /**
   * Transfer description
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Unique recurrence identifier in Asaas
   */
  @JsonProperty("recurring")
  private JsonNullable<String> recurring;

  /**
   * Bank account details
   */
  @JsonProperty("bankAccount")
  private JsonNullable<TransferBankAccountGetResponseDto> bankAccount;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public TransferGetResponseDtoType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public String getDateCreated() {
    return dateCreated.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getNetValue() {
    return netValue.orElse(null);
  }

  @JsonIgnore
  public TransferGetResponseTransferStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public Double getTransferFee() {
    return transferFee.orElse(null);
  }

  @JsonIgnore
  public String getEffectiveDate() {
    return effectiveDate.orElse(null);
  }

  @JsonIgnore
  public String getScheduleDate() {
    return scheduleDate.orElse(null);
  }

  @JsonIgnore
  public String getEndToEndIdentifier() {
    return endToEndIdentifier.orElse(null);
  }

  @JsonIgnore
  public Boolean getAuthorized() {
    return authorized.orElse(null);
  }

  @JsonIgnore
  public String getFailReason() {
    return failReason.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public String getTransactionReceiptUrl() {
    return transactionReceiptUrl.orElse(null);
  }

  @JsonIgnore
  public TransferGetResponseTransferType getOperationType() {
    return operationType.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public String getRecurring() {
    return recurring.orElse(null);
  }

  @JsonIgnore
  public TransferBankAccountGetResponseDto getBankAccount() {
    return bankAccount.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class TransferGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public TransferGetResponseDtoBuilder object(String value) {
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public TransferGetResponseDtoBuilder id(String value) {
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<TransferGetResponseDtoType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public TransferGetResponseDtoBuilder type(TransferGetResponseDtoType value) {
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreated = JsonNullable.undefined();

    @JsonProperty("dateCreated")
    public TransferGetResponseDtoBuilder dateCreated(String value) {
      this.dateCreated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public TransferGetResponseDtoBuilder value(Double value) {
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> netValue = JsonNullable.undefined();

    @JsonProperty("netValue")
    public TransferGetResponseDtoBuilder netValue(Double value) {
      this.netValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<TransferGetResponseTransferStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public TransferGetResponseDtoBuilder status(TransferGetResponseTransferStatus value) {
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> transferFee = JsonNullable.undefined();

    @JsonProperty("transferFee")
    public TransferGetResponseDtoBuilder transferFee(Double value) {
      this.transferFee = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> effectiveDate = JsonNullable.undefined();

    @JsonProperty("effectiveDate")
    public TransferGetResponseDtoBuilder effectiveDate(String value) {
      this.effectiveDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> scheduleDate = JsonNullable.undefined();

    @JsonProperty("scheduleDate")
    public TransferGetResponseDtoBuilder scheduleDate(String value) {
      this.scheduleDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> endToEndIdentifier = JsonNullable.undefined();

    @JsonProperty("endToEndIdentifier")
    public TransferGetResponseDtoBuilder endToEndIdentifier(String value) {
      this.endToEndIdentifier = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> authorized = JsonNullable.undefined();

    @JsonProperty("authorized")
    public TransferGetResponseDtoBuilder authorized(Boolean value) {
      this.authorized = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> failReason = JsonNullable.undefined();

    @JsonProperty("failReason")
    public TransferGetResponseDtoBuilder failReason(String value) {
      this.failReason = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public TransferGetResponseDtoBuilder externalReference(String value) {
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transactionReceiptUrl = JsonNullable.undefined();

    @JsonProperty("transactionReceiptUrl")
    public TransferGetResponseDtoBuilder transactionReceiptUrl(String value) {
      this.transactionReceiptUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<TransferGetResponseTransferType> operationType = JsonNullable.undefined();

    @JsonProperty("operationType")
    public TransferGetResponseDtoBuilder operationType(TransferGetResponseTransferType value) {
      this.operationType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public TransferGetResponseDtoBuilder description(String value) {
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> recurring = JsonNullable.undefined();

    @JsonProperty("recurring")
    public TransferGetResponseDtoBuilder recurring(String value) {
      this.recurring = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<TransferBankAccountGetResponseDto> bankAccount = JsonNullable.undefined();

    @JsonProperty("bankAccount")
    public TransferGetResponseDtoBuilder bankAccount(TransferBankAccountGetResponseDto value) {
      this.bankAccount = JsonNullable.of(value);
      return this;
    }
  }
}
