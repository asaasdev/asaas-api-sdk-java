// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPixTokenBucketGetAddressKeyResponseDto {

  /**
   * Maximum token capacity
   */
  @JsonProperty("capacity")
  private JsonNullable<Long> capacity;

  /**
   * Available tokens
   */
  @JsonProperty("remaining")
  private JsonNullable<Long> remaining;

  @JsonIgnore
  public Long getCapacity() {
    return capacity.orElse(null);
  }

  @JsonIgnore
  public Long getRemaining() {
    return remaining.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPixTokenBucketGetAddressKeyResponseDtoBuilder {

    private JsonNullable<Long> capacity = JsonNullable.undefined();

    @JsonProperty("capacity")
    public ApiPixTokenBucketGetAddressKeyResponseDtoBuilder capacity(Long value) {
      if (value == null) {
        throw new IllegalStateException("capacity cannot be null");
      }
      this.capacity = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> remaining = JsonNullable.undefined();

    @JsonProperty("remaining")
    public ApiPixTokenBucketGetAddressKeyResponseDtoBuilder remaining(Long value) {
      if (value == null) {
        throw new IllegalStateException("remaining cannot be null");
      }
      this.remaining = JsonNullable.of(value);
      return this;
    }
  }
}
