// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiNotificationUpdateRequestDto {

  /**
   * Enable/disable notification
   */
  @JsonProperty("enabled")
  private JsonNullable<Boolean> enabled;

  /**
   * enable/disable the email sent to you
   */
  @JsonProperty("emailEnabledForProvider")
  private JsonNullable<Boolean> emailEnabledForProvider;

  /**
   * enable/disable the SMS sent to you
   */
  @JsonProperty("smsEnabledForProvider")
  private JsonNullable<Boolean> smsEnabledForProvider;

  /**
   * enable/disable the email sent to your customer
   */
  @JsonProperty("emailEnabledForCustomer")
  private JsonNullable<Boolean> emailEnabledForCustomer;

  /**
   * enable/disable the SMS sent to your customer
   */
  @JsonProperty("smsEnabledForCustomer")
  private JsonNullable<Boolean> smsEnabledForCustomer;

  /**
   * enable/disable voice notification sent to your customer
   */
  @JsonProperty("phoneCallEnabledForCustomer")
  private JsonNullable<Boolean> phoneCallEnabledForCustomer;

  /**
   * enable/disable WhatsApp messages for your customer
   */
  @JsonProperty("whatsappEnabledForCustomer")
  private JsonNullable<Boolean> whatsappEnabledForCustomer;

  /**
   * Specifies how many days before the due date the notification must be sent.
   * For the `PAYMENT_DUEDATE_WARNING` event, the accepted values are: `0`, `5`, `10`, `15` and `30`
   * For the `PAYMENT_OVERDUE` event, the accepted values are: `1`, `7`, `15` and `30`
   */
  @JsonProperty("scheduleOffset")
  private JsonNullable<ApiNotificationUpdateRequestDtoScheduleOffset> scheduleOffset;

  @JsonIgnore
  public Boolean getEnabled() {
    return enabled.orElse(null);
  }

  @JsonIgnore
  public Boolean getEmailEnabledForProvider() {
    return emailEnabledForProvider.orElse(null);
  }

  @JsonIgnore
  public Boolean getSmsEnabledForProvider() {
    return smsEnabledForProvider.orElse(null);
  }

  @JsonIgnore
  public Boolean getEmailEnabledForCustomer() {
    return emailEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getSmsEnabledForCustomer() {
    return smsEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getPhoneCallEnabledForCustomer() {
    return phoneCallEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public Boolean getWhatsappEnabledForCustomer() {
    return whatsappEnabledForCustomer.orElse(null);
  }

  @JsonIgnore
  public ApiNotificationUpdateRequestDtoScheduleOffset getScheduleOffset() {
    return scheduleOffset.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiNotificationUpdateRequestDtoBuilder {

    private JsonNullable<Boolean> enabled = JsonNullable.undefined();

    @JsonProperty("enabled")
    public ApiNotificationUpdateRequestDtoBuilder enabled(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("enabled cannot be null");
      }
      this.enabled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> emailEnabledForProvider = JsonNullable.undefined();

    @JsonProperty("emailEnabledForProvider")
    public ApiNotificationUpdateRequestDtoBuilder emailEnabledForProvider(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("emailEnabledForProvider cannot be null");
      }
      this.emailEnabledForProvider = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> smsEnabledForProvider = JsonNullable.undefined();

    @JsonProperty("smsEnabledForProvider")
    public ApiNotificationUpdateRequestDtoBuilder smsEnabledForProvider(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("smsEnabledForProvider cannot be null");
      }
      this.smsEnabledForProvider = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> emailEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("emailEnabledForCustomer")
    public ApiNotificationUpdateRequestDtoBuilder emailEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("emailEnabledForCustomer cannot be null");
      }
      this.emailEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> smsEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("smsEnabledForCustomer")
    public ApiNotificationUpdateRequestDtoBuilder smsEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("smsEnabledForCustomer cannot be null");
      }
      this.smsEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> phoneCallEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("phoneCallEnabledForCustomer")
    public ApiNotificationUpdateRequestDtoBuilder phoneCallEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("phoneCallEnabledForCustomer cannot be null");
      }
      this.phoneCallEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> whatsappEnabledForCustomer = JsonNullable.undefined();

    @JsonProperty("whatsappEnabledForCustomer")
    public ApiNotificationUpdateRequestDtoBuilder whatsappEnabledForCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("whatsappEnabledForCustomer cannot be null");
      }
      this.whatsappEnabledForCustomer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiNotificationUpdateRequestDtoScheduleOffset> scheduleOffset = JsonNullable.undefined();

    @JsonProperty("scheduleOffset")
    public ApiNotificationUpdateRequestDtoBuilder scheduleOffset(ApiNotificationUpdateRequestDtoScheduleOffset value) {
      if (value == null) {
        throw new IllegalStateException("scheduleOffset cannot be null");
      }
      this.scheduleOffset = JsonNullable.of(value);
      return this;
    }
  }
}
