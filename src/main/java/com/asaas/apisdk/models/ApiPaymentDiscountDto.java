// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPaymentDiscountDto {

  /**
   * Percentage or fixed amount of discount to be applied to the Payment amount
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Days before expiration to apply discount. Ex: 0 = until expiration, 1 = up to one day before, 2 = up to 2 days before, and so on
   */
  @JsonProperty("dueDateLimitDays")
  private JsonNullable<Long> dueDateLimitDays;

  /**
   * Discount type
   */
  @JsonProperty("type")
  private JsonNullable<ApiPaymentDiscountDiscountType> type;

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Long getDueDateLimitDays() {
    return dueDateLimitDays.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDiscountType getType() {
    return type.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPaymentDiscountDtoBuilder {

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiPaymentDiscountDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> dueDateLimitDays = JsonNullable.undefined();

    @JsonProperty("dueDateLimitDays")
    public ApiPaymentDiscountDtoBuilder dueDateLimitDays(Long value) {
      if (value == null) {
        throw new IllegalStateException("dueDateLimitDays cannot be null");
      }
      this.dueDateLimitDays = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDiscountType> type = JsonNullable.undefined();

    @JsonProperty("type")
    public ApiPaymentDiscountDtoBuilder type(ApiPaymentDiscountDiscountType value) {
      if (value == null) {
        throw new IllegalStateException("type cannot be null");
      }
      this.type = JsonNullable.of(value);
      return this;
    }
  }
}
