// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPaymentSaveWithCreditCardRequestDto {

  /**
   * Unique customer identifier in Asaas
   */
  @NonNull
  private String customer;

  /**
   * Payment billing type
   */
  @NonNull
  private ApiPaymentSaveWithCreditCardRequestBillingType billingType;

  /**
   * Payment amount
   */
  @NonNull
  private Double value;

  /**
   * Payment due date
   */
  @NonNull
  private String dueDate;

  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  @NonNull
  private String remoteIp;

  /**
   * Payment description (max. 500 characters)
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  @JsonProperty("daysAfterDueDateToRegistrationCancellation")
  private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation;

  /**
   * Free search field
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Number of installments (only in the case of installment payment)
   */
  @JsonProperty("installmentCount")
  private JsonNullable<Long> installmentCount;

  /**
   * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
   */
  @JsonProperty("totalValue")
  private JsonNullable<Double> totalValue;

  /**
   * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
   */
  @JsonProperty("installmentValue")
  private JsonNullable<Double> installmentValue;

  @JsonProperty("discount")
  private JsonNullable<ApiPaymentDiscountDto> discount;

  @JsonProperty("interest")
  private JsonNullable<ApiPaymentInterestRequestDto> interest;

  @JsonProperty("fine")
  private JsonNullable<ApiPaymentFineRequestDto> fine;

  /**
   * Define whether the payment will be sent via post
   */
  @JsonProperty("postalService")
  private JsonNullable<Boolean> postalService;

  /**
   * Split Settings
   */
  @JsonProperty("split")
  private JsonNullable<List<ApiPaymentSplitRequestDto>> split;

  @JsonProperty("callback")
  private JsonNullable<ApiPaymentCallbackRequestDto> callback;

  @JsonProperty("creditCard")
  private JsonNullable<ApiCreditCardRequestDto> creditCard;

  @JsonProperty("creditCardHolderInfo")
  private JsonNullable<ApiCreditCardHolderInfoRequestDto> creditCardHolderInfo;

  /**
   * Credit card token for using the credit card tokenization functionality
   */
  @JsonProperty("creditCardToken")
  private JsonNullable<String> creditCardToken;

  /**
   * Carry out only the Pre-Authorization of the payment
   */
  @JsonProperty("authorizeOnly")
  private JsonNullable<Boolean> authorizeOnly;

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Long getDaysAfterDueDateToRegistrationCancellation() {
    return daysAfterDueDateToRegistrationCancellation.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public Long getInstallmentCount() {
    return installmentCount.orElse(null);
  }

  @JsonIgnore
  public Double getTotalValue() {
    return totalValue.orElse(null);
  }

  @JsonIgnore
  public Double getInstallmentValue() {
    return installmentValue.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentInterestRequestDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentFineRequestDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public Boolean getPostalService() {
    return postalService.orElse(null);
  }

  @JsonIgnore
  public List<ApiPaymentSplitRequestDto> getSplit() {
    return split.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentCallbackRequestDto getCallback() {
    return callback.orElse(null);
  }

  @JsonIgnore
  public ApiCreditCardRequestDto getCreditCard() {
    return creditCard.orElse(null);
  }

  @JsonIgnore
  public ApiCreditCardHolderInfoRequestDto getCreditCardHolderInfo() {
    return creditCardHolderInfo.orElse(null);
  }

  @JsonIgnore
  public String getCreditCardToken() {
    return creditCardToken.orElse(null);
  }

  @JsonIgnore
  public Boolean getAuthorizeOnly() {
    return authorizeOnly.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPaymentSaveWithCreditCardRequestDtoBuilder {

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder description(String value) {
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation = JsonNullable.undefined();

    @JsonProperty("daysAfterDueDateToRegistrationCancellation")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder daysAfterDueDateToRegistrationCancellation(Long value) {
      this.daysAfterDueDateToRegistrationCancellation = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder externalReference(String value) {
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> installmentCount = JsonNullable.undefined();

    @JsonProperty("installmentCount")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder installmentCount(Long value) {
      this.installmentCount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> totalValue = JsonNullable.undefined();

    @JsonProperty("totalValue")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder totalValue(Double value) {
      this.totalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> installmentValue = JsonNullable.undefined();

    @JsonProperty("installmentValue")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder installmentValue(Double value) {
      this.installmentValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder discount(ApiPaymentDiscountDto value) {
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentInterestRequestDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder interest(ApiPaymentInterestRequestDto value) {
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentFineRequestDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder fine(ApiPaymentFineRequestDto value) {
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> postalService = JsonNullable.undefined();

    @JsonProperty("postalService")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder postalService(Boolean value) {
      this.postalService = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiPaymentSplitRequestDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder split(List<ApiPaymentSplitRequestDto> value) {
      this.split = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentCallbackRequestDto> callback = JsonNullable.undefined();

    @JsonProperty("callback")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder callback(ApiPaymentCallbackRequestDto value) {
      this.callback = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCreditCardRequestDto> creditCard = JsonNullable.undefined();

    @JsonProperty("creditCard")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder creditCard(ApiCreditCardRequestDto value) {
      this.creditCard = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCreditCardHolderInfoRequestDto> creditCardHolderInfo = JsonNullable.undefined();

    @JsonProperty("creditCardHolderInfo")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder creditCardHolderInfo(ApiCreditCardHolderInfoRequestDto value) {
      this.creditCardHolderInfo = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditCardToken = JsonNullable.undefined();

    @JsonProperty("creditCardToken")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder creditCardToken(String value) {
      this.creditCardToken = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> authorizeOnly = JsonNullable.undefined();

    @JsonProperty("authorizeOnly")
    public ApiPaymentSaveWithCreditCardRequestDtoBuilder authorizeOnly(Boolean value) {
      this.authorizeOnly = JsonNullable.of(value);
      return this;
    }
  }
}
