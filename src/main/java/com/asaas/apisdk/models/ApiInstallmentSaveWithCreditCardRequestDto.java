// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiInstallmentSaveWithCreditCardRequestDto {

  /**
   * Number of installments
   */
  @NonNull
  private Long installmentCount;

  /**
   * Unique customer identifier in Asaas
   */
  @NonNull
  private String customer;

  /**
   * Value of each installment
   */
  @NonNull
  private Double value;

  /**
   * Payment billing type
   */
  @NonNull
  private ApiInstallmentSaveWithCreditCardRequestBillingType billingType;

  /**
   * Due date of the first installment
   */
  @NonNull
  private String dueDate;

  @JsonInclude(JsonInclude.Include.ALWAYS)
  private ApiCreditCardRequestDto creditCard;

  @JsonInclude(JsonInclude.Include.ALWAYS)
  private ApiCreditCardHolderInfoRequestDto creditCardHolderInfo;

  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  @NonNull
  private String remoteIp;

  /**
   * Total installment amount
   */
  @JsonProperty("totalValue")
  private JsonNullable<Double> totalValue;

  /**
   * Installment description (max. 500 characters)
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Define whether the payment will be sent via post
   */
  @JsonProperty("postalService")
  private JsonNullable<Boolean> postalService;

  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  @JsonProperty("daysAfterDueDateToRegistrationCancellation")
  private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation;

  /**
   * Free search field
   */
  @JsonProperty("paymentExternalReference")
  private JsonNullable<String> paymentExternalReference;

  @JsonProperty("discount")
  private JsonNullable<ApiPaymentDiscountDto> discount;

  @JsonProperty("interest")
  private JsonNullable<ApiPaymentInterestRequestDto> interest;

  @JsonProperty("fine")
  private JsonNullable<ApiPaymentFineRequestDto> fine;

  /**
   * Split Settings
   */
  @JsonProperty("splits")
  private JsonNullable<List<ApiInstallmentSplitRequestDto>> splits;

  /**
   * Credit card token for using the credit card tokenization functionality. If informed, the fields creditCard and creditCardHolderInfo are not mandatory.
   */
  @JsonProperty("creditCardToken")
  private JsonNullable<String> creditCardToken;

  /**
   * Carry out only the Pre-Authorization of the installment
   */
  @JsonProperty("authorizeOnly")
  private JsonNullable<Boolean> authorizeOnly;

  @JsonIgnore
  public Double getTotalValue() {
    return totalValue.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Boolean getPostalService() {
    return postalService.orElse(null);
  }

  @JsonIgnore
  public Long getDaysAfterDueDateToRegistrationCancellation() {
    return daysAfterDueDateToRegistrationCancellation.orElse(null);
  }

  @JsonIgnore
  public String getPaymentExternalReference() {
    return paymentExternalReference.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentInterestRequestDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentFineRequestDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public List<ApiInstallmentSplitRequestDto> getSplits() {
    return splits.orElse(null);
  }

  @JsonIgnore
  public String getCreditCardToken() {
    return creditCardToken.orElse(null);
  }

  @JsonIgnore
  public Boolean getAuthorizeOnly() {
    return authorizeOnly.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiInstallmentSaveWithCreditCardRequestDtoBuilder {

    /**
     * Flag to track if the creditCard property has been set.
     */
    private boolean creditCard$set = false;

    /**
     * Flag to track if the creditCardHolderInfo property has been set.
     */
    private boolean creditCardHolderInfo$set = false;

    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder creditCard(ApiCreditCardRequestDto creditCard) {
      this.creditCard$set = true;
      this.creditCard = creditCard;
      return this;
    }

    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder creditCardHolderInfo(
      ApiCreditCardHolderInfoRequestDto creditCardHolderInfo
    ) {
      this.creditCardHolderInfo$set = true;
      this.creditCardHolderInfo = creditCardHolderInfo;
      return this;
    }

    private JsonNullable<Double> totalValue = JsonNullable.undefined();

    @JsonProperty("totalValue")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder totalValue(Double value) {
      this.totalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder description(String value) {
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> postalService = JsonNullable.undefined();

    @JsonProperty("postalService")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder postalService(Boolean value) {
      this.postalService = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation = JsonNullable.undefined();

    @JsonProperty("daysAfterDueDateToRegistrationCancellation")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder daysAfterDueDateToRegistrationCancellation(Long value) {
      this.daysAfterDueDateToRegistrationCancellation = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentExternalReference = JsonNullable.undefined();

    @JsonProperty("paymentExternalReference")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder paymentExternalReference(String value) {
      this.paymentExternalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder discount(ApiPaymentDiscountDto value) {
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentInterestRequestDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder interest(ApiPaymentInterestRequestDto value) {
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentFineRequestDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder fine(ApiPaymentFineRequestDto value) {
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiInstallmentSplitRequestDto>> splits = JsonNullable.undefined();

    @JsonProperty("splits")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder splits(List<ApiInstallmentSplitRequestDto> value) {
      this.splits = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditCardToken = JsonNullable.undefined();

    @JsonProperty("creditCardToken")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder creditCardToken(String value) {
      this.creditCardToken = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> authorizeOnly = JsonNullable.undefined();

    @JsonProperty("authorizeOnly")
    public ApiInstallmentSaveWithCreditCardRequestDtoBuilder authorizeOnly(Boolean value) {
      this.authorizeOnly = JsonNullable.of(value);
      return this;
    }

    public ApiInstallmentSaveWithCreditCardRequestDto build() {
      if (!creditCard$set) {
        throw new IllegalStateException("creditCard is required");
      }
      if (!creditCardHolderInfo$set) {
        throw new IllegalStateException("creditCardHolderInfo is required");
      }
      return new ApiInstallmentSaveWithCreditCardRequestDto(
        installmentCount,
        customer,
        value,
        billingType,
        dueDate,
        creditCard,
        creditCardHolderInfo,
        remoteIp,
        totalValue,
        description,
        postalService,
        daysAfterDueDateToRegistrationCancellation,
        paymentExternalReference,
        discount,
        interest,
        fine,
        splits,
        creditCardToken,
        authorizeOnly
      );
    }
  }
}
