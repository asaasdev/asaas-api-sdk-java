// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListSubscriptionsParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by Unique Customer Identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Filter by customer group name
   */
  @JsonProperty("customerGroupName")
  private JsonNullable<String> customerGroupName;

  /**
   * Filter by billing type
   */
  @JsonProperty("billingType")
  private JsonNullable<SubscriptionListRequestBillingType> billingType;

  /**
   * Filter by status
   */
  @JsonProperty("status")
  private JsonNullable<SubscriptionListRequestSubscriptionStatus> status;

  /**
   * Send true to return only removed subscriptions
   */
  @JsonProperty("deletedOnly")
  private JsonNullable<String> deletedOnly;

  /**
   * Send true to also recover removed subscriptions
   */
  @JsonProperty("includeDeleted")
  private JsonNullable<String> includeDeleted;

  /**
   * Filter by your system identifier
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Ascending or descending order
   */
  @JsonProperty("order")
  private JsonNullable<String> order;

  /**
   * Which field will it be sorted by
   */
  @JsonProperty("sort")
  private JsonNullable<String> sort;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public String getCustomerGroupName() {
    return customerGroupName.orElse(null);
  }

  @JsonIgnore
  public SubscriptionListRequestBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public SubscriptionListRequestSubscriptionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getDeletedOnly() {
    return deletedOnly.orElse(null);
  }

  @JsonIgnore
  public String getIncludeDeleted() {
    return includeDeleted.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public String getOrder() {
    return order.orElse(null);
  }

  @JsonIgnore
  public String getSort() {
    return sort.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListSubscriptionsParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListSubscriptionsParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListSubscriptionsParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ListSubscriptionsParametersBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customerGroupName = JsonNullable.undefined();

    @JsonProperty("customerGroupName")
    public ListSubscriptionsParametersBuilder customerGroupName(String value) {
      if (value == null) {
        throw new IllegalStateException("customerGroupName cannot be null");
      }
      this.customerGroupName = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<SubscriptionListRequestBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ListSubscriptionsParametersBuilder billingType(SubscriptionListRequestBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<SubscriptionListRequestSubscriptionStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListSubscriptionsParametersBuilder status(SubscriptionListRequestSubscriptionStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> deletedOnly = JsonNullable.undefined();

    @JsonProperty("deletedOnly")
    public ListSubscriptionsParametersBuilder deletedOnly(String value) {
      if (value == null) {
        throw new IllegalStateException("deletedOnly cannot be null");
      }
      this.deletedOnly = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> includeDeleted = JsonNullable.undefined();

    @JsonProperty("includeDeleted")
    public ListSubscriptionsParametersBuilder includeDeleted(String value) {
      if (value == null) {
        throw new IllegalStateException("includeDeleted cannot be null");
      }
      this.includeDeleted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ListSubscriptionsParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> order = JsonNullable.undefined();

    @JsonProperty("order")
    public ListSubscriptionsParametersBuilder order(String value) {
      if (value == null) {
        throw new IllegalStateException("order cannot be null");
      }
      this.order = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> sort = JsonNullable.undefined();

    @JsonProperty("sort")
    public ListSubscriptionsParametersBuilder sort(String value) {
      if (value == null) {
        throw new IllegalStateException("sort cannot be null");
      }
      this.sort = JsonNullable.of(value);
      return this;
    }
  }
}
