// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiTransferBankGetResponseDto {

  /**
   * Identifier in the Brazilian Payment System
   */
  @JsonProperty("ispb")
  private JsonNullable<String> ispb;

  /**
   * Bank clearing code in the banking system
   */
  @JsonProperty("code")
  private JsonNullable<String> code;

  /**
   * Bank name
   */
  @JsonProperty("name")
  private JsonNullable<String> name;

  @JsonIgnore
  public String getIspb() {
    return ispb.orElse(null);
  }

  @JsonIgnore
  public String getCode() {
    return code.orElse(null);
  }

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiTransferBankGetResponseDtoBuilder {

    private JsonNullable<String> ispb = JsonNullable.undefined();

    @JsonProperty("ispb")
    public ApiTransferBankGetResponseDtoBuilder ispb(String value) {
      if (value == null) {
        throw new IllegalStateException("ispb cannot be null");
      }
      this.ispb = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> code = JsonNullable.undefined();

    @JsonProperty("code")
    public ApiTransferBankGetResponseDtoBuilder code(String value) {
      if (value == null) {
        throw new IllegalStateException("code cannot be null");
      }
      this.code = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public ApiTransferBankGetResponseDtoBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }
  }
}
