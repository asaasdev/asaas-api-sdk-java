// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCustomerUpdateRequestSaveRequestDto {

  /**
   * Person Type
   */
  @JsonProperty("personType")
  private JsonNullable<ApiCustomerUpdateRequestSaveRequestPersonType> personType;

  /**
   * CPF or CNPJ of the account owner
   */
  @JsonProperty("cpfCnpj")
  private JsonNullable<String> cpfCnpj;

  /**
   * Birthday (Required if the information is from an individual)
   */
  @JsonProperty("birthDate")
  private JsonNullable<String> birthDate;

  /**
   * Type of company (only when Legal Entity)
   */
  @JsonProperty("companyType")
  private JsonNullable<ApiCustomerUpdateRequestSaveRequestCompanyType> companyType;

  /**
   * Billing/Monthly income
   */
  @JsonProperty("incomeValue")
  private JsonNullable<Double> incomeValue;

  /**
   * Account's email
   */
  @JsonProperty("email")
  private JsonNullable<String> email;

  /**
   * Telephone
   */
  @JsonProperty("phone")
  private JsonNullable<String> phone;

  /**
   * Cell phone
   */
  @JsonProperty("mobilePhone")
  private JsonNullable<String> mobilePhone;

  /**
   * Web site
   */
  @JsonProperty("site")
  private JsonNullable<String> site;

  /**
   * Address zip code
   */
  @JsonProperty("postalCode")
  private JsonNullable<String> postalCode;

  /**
   * Public place
   */
  @JsonProperty("address")
  private JsonNullable<String> address;

  /**
   * Address number
   */
  @JsonProperty("addressNumber")
  private JsonNullable<String> addressNumber;

  /**
   * Address complement
   */
  @JsonProperty("complement")
  private JsonNullable<String> complement;

  /**
   * Neighborhood
   */
  @JsonProperty("province")
  private JsonNullable<String> province;

  @JsonIgnore
  public ApiCustomerUpdateRequestSaveRequestPersonType getPersonType() {
    return personType.orElse(null);
  }

  @JsonIgnore
  public String getCpfCnpj() {
    return cpfCnpj.orElse(null);
  }

  @JsonIgnore
  public String getBirthDate() {
    return birthDate.orElse(null);
  }

  @JsonIgnore
  public ApiCustomerUpdateRequestSaveRequestCompanyType getCompanyType() {
    return companyType.orElse(null);
  }

  @JsonIgnore
  public Double getIncomeValue() {
    return incomeValue.orElse(null);
  }

  @JsonIgnore
  public String getEmail() {
    return email.orElse(null);
  }

  @JsonIgnore
  public String getPhone() {
    return phone.orElse(null);
  }

  @JsonIgnore
  public String getMobilePhone() {
    return mobilePhone.orElse(null);
  }

  @JsonIgnore
  public String getSite() {
    return site.orElse(null);
  }

  @JsonIgnore
  public String getPostalCode() {
    return postalCode.orElse(null);
  }

  @JsonIgnore
  public String getAddress() {
    return address.orElse(null);
  }

  @JsonIgnore
  public String getAddressNumber() {
    return addressNumber.orElse(null);
  }

  @JsonIgnore
  public String getComplement() {
    return complement.orElse(null);
  }

  @JsonIgnore
  public String getProvince() {
    return province.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCustomerUpdateRequestSaveRequestDtoBuilder {

    private JsonNullable<ApiCustomerUpdateRequestSaveRequestPersonType> personType = JsonNullable.undefined();

    @JsonProperty("personType")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder personType(
      ApiCustomerUpdateRequestSaveRequestPersonType value
    ) {
      if (value == null) {
        throw new IllegalStateException("personType cannot be null");
      }
      this.personType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> cpfCnpj = JsonNullable.undefined();

    @JsonProperty("cpfCnpj")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder cpfCnpj(String value) {
      if (value == null) {
        throw new IllegalStateException("cpfCnpj cannot be null");
      }
      this.cpfCnpj = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> birthDate = JsonNullable.undefined();

    @JsonProperty("birthDate")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder birthDate(String value) {
      if (value == null) {
        throw new IllegalStateException("birthDate cannot be null");
      }
      this.birthDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCustomerUpdateRequestSaveRequestCompanyType> companyType = JsonNullable.undefined();

    @JsonProperty("companyType")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder companyType(
      ApiCustomerUpdateRequestSaveRequestCompanyType value
    ) {
      if (value == null) {
        throw new IllegalStateException("companyType cannot be null");
      }
      this.companyType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> incomeValue = JsonNullable.undefined();

    @JsonProperty("incomeValue")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder incomeValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("incomeValue cannot be null");
      }
      this.incomeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> email = JsonNullable.undefined();

    @JsonProperty("email")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder email(String value) {
      if (value == null) {
        throw new IllegalStateException("email cannot be null");
      }
      this.email = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> phone = JsonNullable.undefined();

    @JsonProperty("phone")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder phone(String value) {
      if (value == null) {
        throw new IllegalStateException("phone cannot be null");
      }
      this.phone = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> mobilePhone = JsonNullable.undefined();

    @JsonProperty("mobilePhone")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder mobilePhone(String value) {
      if (value == null) {
        throw new IllegalStateException("mobilePhone cannot be null");
      }
      this.mobilePhone = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> site = JsonNullable.undefined();

    @JsonProperty("site")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder site(String value) {
      if (value == null) {
        throw new IllegalStateException("site cannot be null");
      }
      this.site = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> postalCode = JsonNullable.undefined();

    @JsonProperty("postalCode")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder postalCode(String value) {
      if (value == null) {
        throw new IllegalStateException("postalCode cannot be null");
      }
      this.postalCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> address = JsonNullable.undefined();

    @JsonProperty("address")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder address(String value) {
      if (value == null) {
        throw new IllegalStateException("address cannot be null");
      }
      this.address = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> addressNumber = JsonNullable.undefined();

    @JsonProperty("addressNumber")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder addressNumber(String value) {
      if (value == null) {
        throw new IllegalStateException("addressNumber cannot be null");
      }
      this.addressNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> complement = JsonNullable.undefined();

    @JsonProperty("complement")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder complement(String value) {
      if (value == null) {
        throw new IllegalStateException("complement cannot be null");
      }
      this.complement = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> province = JsonNullable.undefined();

    @JsonProperty("province")
    public ApiCustomerUpdateRequestSaveRequestDtoBuilder province(String value) {
      if (value == null) {
        throw new IllegalStateException("province cannot be null");
      }
      this.province = JsonNullable.of(value);
      return this;
    }
  }
}
