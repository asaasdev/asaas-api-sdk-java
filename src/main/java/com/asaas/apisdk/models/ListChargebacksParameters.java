// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListChargebacksParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by used card brand.
   */
  @JsonProperty("creditCardBrand")
  private JsonNullable<ApiChargebackListRequestCreditCardBrand> creditCardBrand;

  /**
   * Filter up to the chargeback opening date.
   */
  @JsonProperty("originDisputeDate[le]")
  private JsonNullable<String> originDisputeDateLe;

  /**
   * Filter from a chargeback opening date.
   */
  @JsonProperty("originDisputeDate[ge]")
  private JsonNullable<String> originDisputeDateGe;

  /**
   * Filter up to the transaction date.
   */
  @JsonProperty("originTransactionDate[le]")
  private JsonNullable<String> originTransactionDateLe;

  /**
   * Filter from a transaction date.
   */
  @JsonProperty("originTransactionDate[ge]")
  private JsonNullable<String> originTransactionDateGe;

  /**
   * Filter by chargeback status.
   */
  @JsonProperty("status")
  private JsonNullable<ApiChargebackListRequestChargebackStatus> status;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public ApiChargebackListRequestCreditCardBrand getCreditCardBrand() {
    return creditCardBrand.orElse(null);
  }

  @JsonIgnore
  public String getOriginDisputeDateLe() {
    return originDisputeDateLe.orElse(null);
  }

  @JsonIgnore
  public String getOriginDisputeDateGe() {
    return originDisputeDateGe.orElse(null);
  }

  @JsonIgnore
  public String getOriginTransactionDateLe() {
    return originTransactionDateLe.orElse(null);
  }

  @JsonIgnore
  public String getOriginTransactionDateGe() {
    return originTransactionDateGe.orElse(null);
  }

  @JsonIgnore
  public ApiChargebackListRequestChargebackStatus getStatus() {
    return status.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListChargebacksParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListChargebacksParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListChargebacksParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiChargebackListRequestCreditCardBrand> creditCardBrand = JsonNullable.undefined();

    @JsonProperty("creditCardBrand")
    public ListChargebacksParametersBuilder creditCardBrand(ApiChargebackListRequestCreditCardBrand value) {
      if (value == null) {
        throw new IllegalStateException("creditCardBrand cannot be null");
      }
      this.creditCardBrand = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> originDisputeDateLe = JsonNullable.undefined();

    @JsonProperty("originDisputeDate[le]")
    public ListChargebacksParametersBuilder originDisputeDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("originDisputeDateLe cannot be null");
      }
      this.originDisputeDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> originDisputeDateGe = JsonNullable.undefined();

    @JsonProperty("originDisputeDate[ge]")
    public ListChargebacksParametersBuilder originDisputeDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("originDisputeDateGe cannot be null");
      }
      this.originDisputeDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> originTransactionDateLe = JsonNullable.undefined();

    @JsonProperty("originTransactionDate[le]")
    public ListChargebacksParametersBuilder originTransactionDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("originTransactionDateLe cannot be null");
      }
      this.originTransactionDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> originTransactionDateGe = JsonNullable.undefined();

    @JsonProperty("originTransactionDate[ge]")
    public ListChargebacksParametersBuilder originTransactionDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("originTransactionDateGe cannot be null");
      }
      this.originTransactionDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiChargebackListRequestChargebackStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListChargebacksParametersBuilder status(ApiChargebackListRequestChargebackStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }
  }
}
