// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCustomerInvoiceUpdateRequestDto {

  /**
   * Description of invoice services
   */
  @JsonProperty("serviceDescription")
  private JsonNullable<String> serviceDescription;

  /**
   * Additional observations
   */
  @JsonProperty("observations")
  private JsonNullable<String> observations;

  /**
   * Invoice identifier in your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Total value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  @JsonProperty("deductions")
  private JsonNullable<Double> deductions;

  /**
   * Invoice issuance date
   */
  @JsonProperty("effectiveDate")
  private JsonNullable<String> effectiveDate;

  /**
   * Update the Payment amount with the invoice taxes already deducted.
   */
  @JsonProperty("updatePayment")
  private JsonNullable<Boolean> updatePayment;

  @JsonProperty("taxes")
  private JsonNullable<ApiCustomerInvoiceTaxesDto> taxes;

  @JsonIgnore
  public String getServiceDescription() {
    return serviceDescription.orElse(null);
  }

  @JsonIgnore
  public String getObservations() {
    return observations.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getDeductions() {
    return deductions.orElse(null);
  }

  @JsonIgnore
  public String getEffectiveDate() {
    return effectiveDate.orElse(null);
  }

  @JsonIgnore
  public Boolean getUpdatePayment() {
    return updatePayment.orElse(null);
  }

  @JsonIgnore
  public ApiCustomerInvoiceTaxesDto getTaxes() {
    return taxes.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCustomerInvoiceUpdateRequestDtoBuilder {

    private JsonNullable<String> serviceDescription = JsonNullable.undefined();

    @JsonProperty("serviceDescription")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder serviceDescription(String value) {
      if (value == null) {
        throw new IllegalStateException("serviceDescription cannot be null");
      }
      this.serviceDescription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> observations = JsonNullable.undefined();

    @JsonProperty("observations")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder observations(String value) {
      if (value == null) {
        throw new IllegalStateException("observations cannot be null");
      }
      this.observations = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> deductions = JsonNullable.undefined();

    @JsonProperty("deductions")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder deductions(Double value) {
      if (value == null) {
        throw new IllegalStateException("deductions cannot be null");
      }
      this.deductions = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> effectiveDate = JsonNullable.undefined();

    @JsonProperty("effectiveDate")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder effectiveDate(String value) {
      if (value == null) {
        throw new IllegalStateException("effectiveDate cannot be null");
      }
      this.effectiveDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> updatePayment = JsonNullable.undefined();

    @JsonProperty("updatePayment")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder updatePayment(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("updatePayment cannot be null");
      }
      this.updatePayment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCustomerInvoiceTaxesDto> taxes = JsonNullable.undefined();

    @JsonProperty("taxes")
    public ApiCustomerInvoiceUpdateRequestDtoBuilder taxes(ApiCustomerInvoiceTaxesDto value) {
      if (value == null) {
        throw new IllegalStateException("taxes cannot be null");
      }
      this.taxes = JsonNullable.of(value);
      return this;
    }
  }
}
