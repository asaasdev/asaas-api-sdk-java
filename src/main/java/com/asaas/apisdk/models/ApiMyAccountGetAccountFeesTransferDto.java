// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiMyAccountGetAccountFeesTransferDto {

  /**
   * Number of monthly free transactions
   */
  @JsonProperty("monthlyTransfersWithoutFee")
  private JsonNullable<Long> monthlyTransfersWithoutFee;

  @JsonProperty("ted")
  private JsonNullable<ApiMyAccountGetAccountFeesTransferTedDto> ted;

  @JsonProperty("pix")
  private JsonNullable<ApiMyAccountGetAccountFeesTransferPixDto> pix;

  @JsonIgnore
  public Long getMonthlyTransfersWithoutFee() {
    return monthlyTransfersWithoutFee.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesTransferTedDto getTed() {
    return ted.orElse(null);
  }

  @JsonIgnore
  public ApiMyAccountGetAccountFeesTransferPixDto getPix() {
    return pix.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiMyAccountGetAccountFeesTransferDtoBuilder {

    private JsonNullable<Long> monthlyTransfersWithoutFee = JsonNullable.undefined();

    @JsonProperty("monthlyTransfersWithoutFee")
    public ApiMyAccountGetAccountFeesTransferDtoBuilder monthlyTransfersWithoutFee(Long value) {
      if (value == null) {
        throw new IllegalStateException("monthlyTransfersWithoutFee cannot be null");
      }
      this.monthlyTransfersWithoutFee = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesTransferTedDto> ted = JsonNullable.undefined();

    @JsonProperty("ted")
    public ApiMyAccountGetAccountFeesTransferDtoBuilder ted(ApiMyAccountGetAccountFeesTransferTedDto value) {
      if (value == null) {
        throw new IllegalStateException("ted cannot be null");
      }
      this.ted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiMyAccountGetAccountFeesTransferPixDto> pix = JsonNullable.undefined();

    @JsonProperty("pix")
    public ApiMyAccountGetAccountFeesTransferDtoBuilder pix(ApiMyAccountGetAccountFeesTransferPixDto value) {
      if (value == null) {
        throw new IllegalStateException("pix cannot be null");
      }
      this.pix = JsonNullable.of(value);
      return this;
    }
  }
}
