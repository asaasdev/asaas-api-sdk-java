// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListReceivedSplitsParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by payment ID
   */
  @JsonProperty("paymentId")
  private JsonNullable<String> paymentId;

  /**
   * Filter by status
   */
  @JsonProperty("status")
  private JsonNullable<ApiPaymentSplitListReceivedRequestPaymentSplitStatus> status;

  /**
   * Filter from the initial payment confirmation date
   */
  @JsonProperty("paymentConfirmedDate[ge]")
  private JsonNullable<String> paymentConfirmedDateGe;

  /**
   * Filter from final payment confirmation date
   */
  @JsonProperty("paymentConfirmedDate[le]")
  private JsonNullable<String> paymentConfirmedDateLe;

  /**
   * Filter by date of receipt of initial split
   */
  @JsonProperty("creditDate[ge]")
  private JsonNullable<String> creditDateGe;

  /**
   * Filter by date of receipt of final split
   */
  @JsonProperty("creditDate[le]")
  private JsonNullable<String> creditDateLe;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public String getPaymentId() {
    return paymentId.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentSplitListReceivedRequestPaymentSplitStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getPaymentConfirmedDateGe() {
    return paymentConfirmedDateGe.orElse(null);
  }

  @JsonIgnore
  public String getPaymentConfirmedDateLe() {
    return paymentConfirmedDateLe.orElse(null);
  }

  @JsonIgnore
  public String getCreditDateGe() {
    return creditDateGe.orElse(null);
  }

  @JsonIgnore
  public String getCreditDateLe() {
    return creditDateLe.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListReceivedSplitsParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListReceivedSplitsParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListReceivedSplitsParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentId = JsonNullable.undefined();

    @JsonProperty("paymentId")
    public ListReceivedSplitsParametersBuilder paymentId(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentId cannot be null");
      }
      this.paymentId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentSplitListReceivedRequestPaymentSplitStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ListReceivedSplitsParametersBuilder status(ApiPaymentSplitListReceivedRequestPaymentSplitStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentConfirmedDateGe = JsonNullable.undefined();

    @JsonProperty("paymentConfirmedDate[ge]")
    public ListReceivedSplitsParametersBuilder paymentConfirmedDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentConfirmedDateGe cannot be null");
      }
      this.paymentConfirmedDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentConfirmedDateLe = JsonNullable.undefined();

    @JsonProperty("paymentConfirmedDate[le]")
    public ListReceivedSplitsParametersBuilder paymentConfirmedDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentConfirmedDateLe cannot be null");
      }
      this.paymentConfirmedDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditDateGe = JsonNullable.undefined();

    @JsonProperty("creditDate[ge]")
    public ListReceivedSplitsParametersBuilder creditDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("creditDateGe cannot be null");
      }
      this.creditDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditDateLe = JsonNullable.undefined();

    @JsonProperty("creditDate[le]")
    public ListReceivedSplitsParametersBuilder creditDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("creditDateLe cannot be null");
      }
      this.creditDateLe = JsonNullable.of(value);
      return this;
    }
  }
}
