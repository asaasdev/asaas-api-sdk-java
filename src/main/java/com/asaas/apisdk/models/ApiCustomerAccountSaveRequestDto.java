// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCustomerAccountSaveRequestDto {

  /**
   * Client name
   */
  @NonNull
  private String name;

  /**
   * Customer CPF or CNPJ
   */
  @NonNull
  private String cpfCnpj;

  /**
   * Customer email
   */
  @JsonProperty("email")
  private JsonNullable<String> email;

  /**
   * Landline
   */
  @JsonProperty("phone")
  private JsonNullable<String> phone;

  /**
   * Cell phone
   */
  @JsonProperty("mobilePhone")
  private JsonNullable<String> mobilePhone;

  /**
   * Public place
   */
  @JsonProperty("address")
  private JsonNullable<String> address;

  /**
   * Address number
   */
  @JsonProperty("addressNumber")
  private JsonNullable<String> addressNumber;

  /**
   * Address complement (max. 255 characters)
   */
  @JsonProperty("complement")
  private JsonNullable<String> complement;

  /**
   * Neighborhood
   */
  @JsonProperty("province")
  private JsonNullable<String> province;

  /**
   * Address zip code
   */
  @JsonProperty("postalCode")
  private JsonNullable<String> postalCode;

  /**
   * Customer identifier in your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * true to disable sending billing notifications
   */
  @JsonProperty("notificationDisabled")
  private JsonNullable<Boolean> notificationDisabled;

  /**
   * Additional emails for sending billing notifications separated by ","
   */
  @JsonProperty("additionalEmails")
  private JsonNullable<String> additionalEmails;

  /**
   * Customer municipal registration
   */
  @JsonProperty("municipalInscription")
  private JsonNullable<String> municipalInscription;

  /**
   * Customer state registration
   */
  @JsonProperty("stateInscription")
  private JsonNullable<String> stateInscription;

  /**
   * Additional observations
   */
  @JsonProperty("observations")
  private JsonNullable<String> observations;

  /**
   * Name of the group the customer belongs to
   */
  @JsonProperty("groupName")
  private JsonNullable<String> groupName;

  /**
   * Company
   */
  @JsonProperty("company")
  private JsonNullable<String> company;

  /**
   * inform true if it's a non-brazilian customer
   */
  @JsonProperty("foreignCustomer")
  private JsonNullable<Boolean> foreignCustomer;

  @JsonIgnore
  public String getEmail() {
    return email.orElse(null);
  }

  @JsonIgnore
  public String getPhone() {
    return phone.orElse(null);
  }

  @JsonIgnore
  public String getMobilePhone() {
    return mobilePhone.orElse(null);
  }

  @JsonIgnore
  public String getAddress() {
    return address.orElse(null);
  }

  @JsonIgnore
  public String getAddressNumber() {
    return addressNumber.orElse(null);
  }

  @JsonIgnore
  public String getComplement() {
    return complement.orElse(null);
  }

  @JsonIgnore
  public String getProvince() {
    return province.orElse(null);
  }

  @JsonIgnore
  public String getPostalCode() {
    return postalCode.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public Boolean getNotificationDisabled() {
    return notificationDisabled.orElse(null);
  }

  @JsonIgnore
  public String getAdditionalEmails() {
    return additionalEmails.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalInscription() {
    return municipalInscription.orElse(null);
  }

  @JsonIgnore
  public String getStateInscription() {
    return stateInscription.orElse(null);
  }

  @JsonIgnore
  public String getObservations() {
    return observations.orElse(null);
  }

  @JsonIgnore
  public String getGroupName() {
    return groupName.orElse(null);
  }

  @JsonIgnore
  public String getCompany() {
    return company.orElse(null);
  }

  @JsonIgnore
  public Boolean getForeignCustomer() {
    return foreignCustomer.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCustomerAccountSaveRequestDtoBuilder {

    private JsonNullable<String> email = JsonNullable.undefined();

    @JsonProperty("email")
    public ApiCustomerAccountSaveRequestDtoBuilder email(String value) {
      if (value == null) {
        throw new IllegalStateException("email cannot be null");
      }
      this.email = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> phone = JsonNullable.undefined();

    @JsonProperty("phone")
    public ApiCustomerAccountSaveRequestDtoBuilder phone(String value) {
      if (value == null) {
        throw new IllegalStateException("phone cannot be null");
      }
      this.phone = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> mobilePhone = JsonNullable.undefined();

    @JsonProperty("mobilePhone")
    public ApiCustomerAccountSaveRequestDtoBuilder mobilePhone(String value) {
      if (value == null) {
        throw new IllegalStateException("mobilePhone cannot be null");
      }
      this.mobilePhone = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> address = JsonNullable.undefined();

    @JsonProperty("address")
    public ApiCustomerAccountSaveRequestDtoBuilder address(String value) {
      if (value == null) {
        throw new IllegalStateException("address cannot be null");
      }
      this.address = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> addressNumber = JsonNullable.undefined();

    @JsonProperty("addressNumber")
    public ApiCustomerAccountSaveRequestDtoBuilder addressNumber(String value) {
      if (value == null) {
        throw new IllegalStateException("addressNumber cannot be null");
      }
      this.addressNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> complement = JsonNullable.undefined();

    @JsonProperty("complement")
    public ApiCustomerAccountSaveRequestDtoBuilder complement(String value) {
      if (value == null) {
        throw new IllegalStateException("complement cannot be null");
      }
      this.complement = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> province = JsonNullable.undefined();

    @JsonProperty("province")
    public ApiCustomerAccountSaveRequestDtoBuilder province(String value) {
      if (value == null) {
        throw new IllegalStateException("province cannot be null");
      }
      this.province = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> postalCode = JsonNullable.undefined();

    @JsonProperty("postalCode")
    public ApiCustomerAccountSaveRequestDtoBuilder postalCode(String value) {
      if (value == null) {
        throw new IllegalStateException("postalCode cannot be null");
      }
      this.postalCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiCustomerAccountSaveRequestDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> notificationDisabled = JsonNullable.undefined();

    @JsonProperty("notificationDisabled")
    public ApiCustomerAccountSaveRequestDtoBuilder notificationDisabled(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("notificationDisabled cannot be null");
      }
      this.notificationDisabled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> additionalEmails = JsonNullable.undefined();

    @JsonProperty("additionalEmails")
    public ApiCustomerAccountSaveRequestDtoBuilder additionalEmails(String value) {
      if (value == null) {
        throw new IllegalStateException("additionalEmails cannot be null");
      }
      this.additionalEmails = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalInscription = JsonNullable.undefined();

    @JsonProperty("municipalInscription")
    public ApiCustomerAccountSaveRequestDtoBuilder municipalInscription(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalInscription cannot be null");
      }
      this.municipalInscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> stateInscription = JsonNullable.undefined();

    @JsonProperty("stateInscription")
    public ApiCustomerAccountSaveRequestDtoBuilder stateInscription(String value) {
      if (value == null) {
        throw new IllegalStateException("stateInscription cannot be null");
      }
      this.stateInscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> observations = JsonNullable.undefined();

    @JsonProperty("observations")
    public ApiCustomerAccountSaveRequestDtoBuilder observations(String value) {
      if (value == null) {
        throw new IllegalStateException("observations cannot be null");
      }
      this.observations = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> groupName = JsonNullable.undefined();

    @JsonProperty("groupName")
    public ApiCustomerAccountSaveRequestDtoBuilder groupName(String value) {
      if (value == null) {
        throw new IllegalStateException("groupName cannot be null");
      }
      this.groupName = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> company = JsonNullable.undefined();

    @JsonProperty("company")
    public ApiCustomerAccountSaveRequestDtoBuilder company(String value) {
      if (value == null) {
        throw new IllegalStateException("company cannot be null");
      }
      this.company = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> foreignCustomer = JsonNullable.undefined();

    @JsonProperty("foreignCustomer")
    public ApiCustomerAccountSaveRequestDtoBuilder foreignCustomer(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("foreignCustomer cannot be null");
      }
      this.foreignCustomer = JsonNullable.of(value);
      return this;
    }
  }
}
