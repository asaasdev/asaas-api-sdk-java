// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class FiscalInfoSaveRequestDto {

  /**
   * Email used by Asaas to send invoice notifications and alerts
   */
  @NonNull
  private String email;

  /**
   * Indicates whether the company opts for the simple national system
   */
  @NonNull
  @Builder.Default
  private Boolean simplesNacional = true;

  /**
   * Company municipal registration
   */
  @JsonProperty("municipalInscription")
  private JsonNullable<String> municipalInscription;

  /**
   * Identifies whether the company is classified as a cultural promoter
   */
  @JsonProperty("culturalProjectsPromoter")
  private JsonNullable<Boolean> culturalProjectsPromoter;

  /**
   * CNAE code
   */
  @JsonProperty("cnae")
  private JsonNullable<String> cnae;

  /**
   * Special taxation regime identifier
   */
  @JsonProperty("specialTaxRegime")
  private JsonNullable<String> specialTaxRegime;

  /**
   * Service list item, as http://www.planalto.gov.br/ccivil_03/leis/LCP/Lcp116.htm
   */
  @JsonProperty("serviceListItem")
  private JsonNullable<String> serviceListItem;

  /**
   * NBS Code (Brazilian Nomenclature of Services). It must be included on the NFS-e (Electronic Service Invoice) when required by the municipal government and/or for import or export services. Check with your local government or your accounting department to determine whether this information is necessary.
   */
  @JsonProperty("nbsCode")
  private JsonNullable<String> nbsCode;

  /**
   * Serial Number used by your company to issue invoices. In most cities the serial number used is '1' or 'E'
   */
  @JsonProperty("rpsSerie")
  private JsonNullable<String> rpsSerie;

  /**
   * RPS number used on the last invoice issued by your company. If your last NF issued has an RPS equal to '100', this field must be filled in with '101'. If you have never issued invoices through your city hall's website, enter '1' in this field
   */
  @JsonProperty("rpsNumber")
  private JsonNullable<Long> rpsNumber;

  /**
   * Batch number used on the last invoice issued by your company. If the last lot used in your city hall is '25', this field must be filled in with '26'. Only enter this field if your city hall requires the use of lots
   */
  @JsonProperty("loteNumber")
  private JsonNullable<Long> loteNumber;

  /**
   * User to access your city's city hall website
   */
  @JsonProperty("username")
  private JsonNullable<String> username;

  /**
   * Password to access the city hall website
   */
  @JsonProperty("password")
  private JsonNullable<String> password;

  /**
   * Token for access to the city hall website (If access to your city hall website is via Token)
   */
  @JsonProperty("accessToken")
  private JsonNullable<String> accessToken;

  /**
   * File
   */
  @JsonProperty("certificateFile")
  private JsonNullable<byte[]> certificateFile;

  /**
   * Password for the digital certificate sent (If access to your city hall website through a digital certificate)
   */
  @JsonProperty("certificatePassword")
  private JsonNullable<String> certificatePassword;

  /**
   * Identifier of the tax calculation regime. It must only be completed by companies classified as ME or EPP opting for Simples Nacional. Consult the need for this information with your city hall or accounting department.
   */
  @JsonProperty("nationalPortalTaxCalculationRegime")
  private JsonNullable<String> nationalPortalTaxCalculationRegime;

  @JsonIgnore
  public String getMunicipalInscription() {
    return municipalInscription.orElse(null);
  }

  @JsonIgnore
  public Boolean getCulturalProjectsPromoter() {
    return culturalProjectsPromoter.orElse(null);
  }

  @JsonIgnore
  public String getCnae() {
    return cnae.orElse(null);
  }

  @JsonIgnore
  public String getSpecialTaxRegime() {
    return specialTaxRegime.orElse(null);
  }

  @JsonIgnore
  public String getServiceListItem() {
    return serviceListItem.orElse(null);
  }

  @JsonIgnore
  public String getNbsCode() {
    return nbsCode.orElse(null);
  }

  @JsonIgnore
  public String getRpsSerie() {
    return rpsSerie.orElse(null);
  }

  @JsonIgnore
  public Long getRpsNumber() {
    return rpsNumber.orElse(null);
  }

  @JsonIgnore
  public Long getLoteNumber() {
    return loteNumber.orElse(null);
  }

  @JsonIgnore
  public String getUsername() {
    return username.orElse(null);
  }

  @JsonIgnore
  public String getPassword() {
    return password.orElse(null);
  }

  @JsonIgnore
  public String getAccessToken() {
    return accessToken.orElse(null);
  }

  @JsonIgnore
  public byte[] getCertificateFile() {
    return certificateFile.orElse(null);
  }

  @JsonIgnore
  public String getCertificatePassword() {
    return certificatePassword.orElse(null);
  }

  @JsonIgnore
  public String getNationalPortalTaxCalculationRegime() {
    return nationalPortalTaxCalculationRegime.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class FiscalInfoSaveRequestDtoBuilder {

    private JsonNullable<String> municipalInscription = JsonNullable.undefined();

    @JsonProperty("municipalInscription")
    public FiscalInfoSaveRequestDtoBuilder municipalInscription(String value) {
      this.municipalInscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> culturalProjectsPromoter = JsonNullable.of(true);

    @JsonProperty("culturalProjectsPromoter")
    public FiscalInfoSaveRequestDtoBuilder culturalProjectsPromoter(Boolean value) {
      this.culturalProjectsPromoter = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> cnae = JsonNullable.undefined();

    @JsonProperty("cnae")
    public FiscalInfoSaveRequestDtoBuilder cnae(String value) {
      this.cnae = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> specialTaxRegime = JsonNullable.undefined();

    @JsonProperty("specialTaxRegime")
    public FiscalInfoSaveRequestDtoBuilder specialTaxRegime(String value) {
      this.specialTaxRegime = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> serviceListItem = JsonNullable.undefined();

    @JsonProperty("serviceListItem")
    public FiscalInfoSaveRequestDtoBuilder serviceListItem(String value) {
      this.serviceListItem = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nbsCode = JsonNullable.undefined();

    @JsonProperty("nbsCode")
    public FiscalInfoSaveRequestDtoBuilder nbsCode(String value) {
      this.nbsCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> rpsSerie = JsonNullable.undefined();

    @JsonProperty("rpsSerie")
    public FiscalInfoSaveRequestDtoBuilder rpsSerie(String value) {
      this.rpsSerie = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> rpsNumber = JsonNullable.undefined();

    @JsonProperty("rpsNumber")
    public FiscalInfoSaveRequestDtoBuilder rpsNumber(Long value) {
      this.rpsNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> loteNumber = JsonNullable.undefined();

    @JsonProperty("loteNumber")
    public FiscalInfoSaveRequestDtoBuilder loteNumber(Long value) {
      this.loteNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> username = JsonNullable.undefined();

    @JsonProperty("username")
    public FiscalInfoSaveRequestDtoBuilder username(String value) {
      this.username = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> password = JsonNullable.undefined();

    @JsonProperty("password")
    public FiscalInfoSaveRequestDtoBuilder password(String value) {
      this.password = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> accessToken = JsonNullable.undefined();

    @JsonProperty("accessToken")
    public FiscalInfoSaveRequestDtoBuilder accessToken(String value) {
      this.accessToken = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<byte[]> certificateFile = JsonNullable.undefined();

    @JsonProperty("certificateFile")
    public FiscalInfoSaveRequestDtoBuilder certificateFile(byte[] value) {
      if (value == null) {
        throw new IllegalStateException("certificateFile cannot be null");
      }
      this.certificateFile = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> certificatePassword = JsonNullable.undefined();

    @JsonProperty("certificatePassword")
    public FiscalInfoSaveRequestDtoBuilder certificatePassword(String value) {
      this.certificatePassword = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nationalPortalTaxCalculationRegime = JsonNullable.undefined();

    @JsonProperty("nationalPortalTaxCalculationRegime")
    public FiscalInfoSaveRequestDtoBuilder nationalPortalTaxCalculationRegime(String value) {
      this.nationalPortalTaxCalculationRegime = JsonNullable.of(value);
      return this;
    }
  }
}
