// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class BillingStatisticsParameters {

  /**
   * Filter by unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Filter by payment method
   */
  @JsonProperty("billingType")
  private JsonNullable<FinanceGetPaymentStatisticsRequestBillingType> billingType;

  /**
   * Filter by status
   */
  @JsonProperty("status")
  private JsonNullable<FinanceGetPaymentStatisticsRequestPaymentStatus> status;

  /**
   * Filter early registrations or not
   */
  @JsonProperty("anticipated")
  private JsonNullable<Boolean> anticipated;

  /**
   * Filter from initial creation date
   */
  @JsonProperty("dateCreated[ge]")
  private JsonNullable<String> dateCreatedGe;

  /**
   * Filter from final creation date
   */
  @JsonProperty("dateCreated[le]")
  private JsonNullable<String> dateCreatedLe;

  /**
   * Filter from initial due date
   */
  @JsonProperty("dueDate[ge]")
  private JsonNullable<String> dueDateGe;

  /**
   * Filter by final due date
   */
  @JsonProperty("dueDate[le]")
  private JsonNullable<String> dueDateLe;

  /**
   * Filter from estimated initial credit date
   */
  @JsonProperty("estimatedCreditDate[ge]")
  private JsonNullable<String> estimatedCreditDateGe;

  /**
   * Filter from estimated end credit date
   */
  @JsonProperty("estimatedCreditDate[le]")
  private JsonNullable<String> estimatedCreditDateLe;

  /**
   * Filter by your system identifier
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public FinanceGetPaymentStatisticsRequestBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public FinanceGetPaymentStatisticsRequestPaymentStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public Boolean getAnticipated() {
    return anticipated.orElse(null);
  }

  @JsonIgnore
  public String getDateCreatedGe() {
    return dateCreatedGe.orElse(null);
  }

  @JsonIgnore
  public String getDateCreatedLe() {
    return dateCreatedLe.orElse(null);
  }

  @JsonIgnore
  public String getDueDateGe() {
    return dueDateGe.orElse(null);
  }

  @JsonIgnore
  public String getDueDateLe() {
    return dueDateLe.orElse(null);
  }

  @JsonIgnore
  public String getEstimatedCreditDateGe() {
    return estimatedCreditDateGe.orElse(null);
  }

  @JsonIgnore
  public String getEstimatedCreditDateLe() {
    return estimatedCreditDateLe.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class BillingStatisticsParametersBuilder {

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public BillingStatisticsParametersBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<FinanceGetPaymentStatisticsRequestBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public BillingStatisticsParametersBuilder billingType(FinanceGetPaymentStatisticsRequestBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<FinanceGetPaymentStatisticsRequestPaymentStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public BillingStatisticsParametersBuilder status(FinanceGetPaymentStatisticsRequestPaymentStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> anticipated = JsonNullable.undefined();

    @JsonProperty("anticipated")
    public BillingStatisticsParametersBuilder anticipated(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("anticipated cannot be null");
      }
      this.anticipated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreatedGe = JsonNullable.undefined();

    @JsonProperty("dateCreated[ge]")
    public BillingStatisticsParametersBuilder dateCreatedGe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedGe cannot be null");
      }
      this.dateCreatedGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreatedLe = JsonNullable.undefined();

    @JsonProperty("dateCreated[le]")
    public BillingStatisticsParametersBuilder dateCreatedLe(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreatedLe cannot be null");
      }
      this.dateCreatedLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDateGe = JsonNullable.undefined();

    @JsonProperty("dueDate[ge]")
    public BillingStatisticsParametersBuilder dueDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDateGe cannot be null");
      }
      this.dueDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDateLe = JsonNullable.undefined();

    @JsonProperty("dueDate[le]")
    public BillingStatisticsParametersBuilder dueDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDateLe cannot be null");
      }
      this.dueDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> estimatedCreditDateGe = JsonNullable.undefined();

    @JsonProperty("estimatedCreditDate[ge]")
    public BillingStatisticsParametersBuilder estimatedCreditDateGe(String value) {
      if (value == null) {
        throw new IllegalStateException("estimatedCreditDateGe cannot be null");
      }
      this.estimatedCreditDateGe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> estimatedCreditDateLe = JsonNullable.undefined();

    @JsonProperty("estimatedCreditDate[le]")
    public BillingStatisticsParametersBuilder estimatedCreditDateLe(String value) {
      if (value == null) {
        throw new IllegalStateException("estimatedCreditDateLe cannot be null");
      }
      this.estimatedCreditDateLe = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public BillingStatisticsParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }
  }
}
