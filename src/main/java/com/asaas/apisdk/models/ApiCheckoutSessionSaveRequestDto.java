// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCheckoutSessionSaveRequestDto {

  /**
   * Payment methods
   */
  @NonNull
  private List<String> billingTypes;

  /**
   * Charge types
   */
  @NonNull
  private List<String> chargeTypes;

  @JsonInclude(JsonInclude.Include.ALWAYS)
  private ApiCheckoutSessionCallbackDto callback;

  /**
   * List of items at checkout
   */
  @NonNull
  private List<ApiCheckoutSessionItemsDto> items;

  /**
   * Time in minutes for checkout expiration
   */
  @JsonProperty("minutesToExpire")
  private JsonNullable<Long> minutesToExpire;

  @JsonProperty("customerData")
  private JsonNullable<ApiCheckoutSessionCustomerDataDto> customerData;

  @JsonProperty("subscription")
  private JsonNullable<ApiCheckoutSessionSubscriptionDto> subscription;

  @JsonProperty("installment")
  private JsonNullable<ApiCheckoutSessionInstallmentDto> installment;

  /**
   * Split Settings
   */
  @JsonProperty("splits")
  private JsonNullable<List<ApiCheckoutSessionSplitDto>> splits;

  @JsonIgnore
  public Long getMinutesToExpire() {
    return minutesToExpire.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionCustomerDataDto getCustomerData() {
    return customerData.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionSubscriptionDto getSubscription() {
    return subscription.orElse(null);
  }

  @JsonIgnore
  public ApiCheckoutSessionInstallmentDto getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public List<ApiCheckoutSessionSplitDto> getSplits() {
    return splits.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCheckoutSessionSaveRequestDtoBuilder {

    /**
     * Flag to track if the callback property has been set.
     */
    private boolean callback$set = false;

    public ApiCheckoutSessionSaveRequestDtoBuilder callback(ApiCheckoutSessionCallbackDto callback) {
      this.callback$set = true;
      this.callback = callback;
      return this;
    }

    private JsonNullable<Long> minutesToExpire = JsonNullable.undefined();

    @JsonProperty("minutesToExpire")
    public ApiCheckoutSessionSaveRequestDtoBuilder minutesToExpire(Long value) {
      this.minutesToExpire = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionCustomerDataDto> customerData = JsonNullable.undefined();

    @JsonProperty("customerData")
    public ApiCheckoutSessionSaveRequestDtoBuilder customerData(ApiCheckoutSessionCustomerDataDto value) {
      this.customerData = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionSubscriptionDto> subscription = JsonNullable.undefined();

    @JsonProperty("subscription")
    public ApiCheckoutSessionSaveRequestDtoBuilder subscription(ApiCheckoutSessionSubscriptionDto value) {
      this.subscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCheckoutSessionInstallmentDto> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ApiCheckoutSessionSaveRequestDtoBuilder installment(ApiCheckoutSessionInstallmentDto value) {
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiCheckoutSessionSplitDto>> splits = JsonNullable.undefined();

    @JsonProperty("splits")
    public ApiCheckoutSessionSaveRequestDtoBuilder splits(List<ApiCheckoutSessionSplitDto> value) {
      this.splits = JsonNullable.of(value);
      return this;
    }

    public ApiCheckoutSessionSaveRequestDto build() {
      if (!callback$set) {
        throw new IllegalStateException("callback is required");
      }
      return new ApiCheckoutSessionSaveRequestDto(
        billingTypes,
        chargeTypes,
        callback,
        items,
        minutesToExpire,
        customerData,
        subscription,
        installment,
        splits
      );
    }
  }
}
