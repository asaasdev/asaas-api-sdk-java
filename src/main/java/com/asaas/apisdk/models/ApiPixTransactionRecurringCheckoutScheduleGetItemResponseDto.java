// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDto {

  /**
   * Unique recurrence item identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Recurrence item status
   */
  @JsonProperty("status")
  private JsonNullable<
    ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus
  > status;

  /**
   * Recurrence item scheduled date
   */
  @JsonProperty("scheduledDate")
  private JsonNullable<String> scheduledDate;

  /**
   * Whether the recurrence item can be cancelled
   */
  @JsonProperty("canBeCancelled")
  private JsonNullable<Boolean> canBeCancelled;

  /**
   * Recurrence number
   */
  @JsonProperty("recurrenceNumber")
  private JsonNullable<Long> recurrenceNumber;

  /**
   * Number of repetitions
   */
  @JsonProperty("quantity")
  private JsonNullable<Long> quantity;

  /**
   * Recurrence value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Recurrence item refusal reason
   */
  @JsonProperty("refusalReasonDescription")
  private JsonNullable<String> refusalReasonDescription;

  @JsonProperty("externalAccount")
  private JsonNullable<ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto> externalAccount;

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getScheduledDate() {
    return scheduledDate.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBeCancelled() {
    return canBeCancelled.orElse(null);
  }

  @JsonIgnore
  public Long getRecurrenceNumber() {
    return recurrenceNumber.orElse(null);
  }

  @JsonIgnore
  public Long getQuantity() {
    return quantity.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public String getRefusalReasonDescription() {
    return refusalReasonDescription.orElse(null);
  }

  @JsonIgnore
  public ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto getExternalAccount() {
    return externalAccount.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder {

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<
      ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus
    > status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder status(
      ApiPixTransactionRecurringCheckoutScheduleGetItemResponseRecurringCheckoutSchedulePixItemStatus value
    ) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> scheduledDate = JsonNullable.undefined();

    @JsonProperty("scheduledDate")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder scheduledDate(String value) {
      if (value == null) {
        throw new IllegalStateException("scheduledDate cannot be null");
      }
      this.scheduledDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBeCancelled = JsonNullable.undefined();

    @JsonProperty("canBeCancelled")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder canBeCancelled(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("canBeCancelled cannot be null");
      }
      this.canBeCancelled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> recurrenceNumber = JsonNullable.undefined();

    @JsonProperty("recurrenceNumber")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder recurrenceNumber(Long value) {
      if (value == null) {
        throw new IllegalStateException("recurrenceNumber cannot be null");
      }
      this.recurrenceNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> quantity = JsonNullable.undefined();

    @JsonProperty("quantity")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder quantity(Long value) {
      if (value == null) {
        throw new IllegalStateException("quantity cannot be null");
      }
      this.quantity = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> refusalReasonDescription = JsonNullable.undefined();

    @JsonProperty("refusalReasonDescription")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder refusalReasonDescription(String value) {
      if (value == null) {
        throw new IllegalStateException("refusalReasonDescription cannot be null");
      }
      this.refusalReasonDescription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto> externalAccount =
      JsonNullable.undefined();

    @JsonProperty("externalAccount")
    public ApiPixTransactionRecurringCheckoutScheduleGetItemResponseDtoBuilder externalAccount(
      ApiPixTransactionRecurringCheckoutScheduleExternalAccountDto value
    ) {
      if (value == null) {
        throw new IllegalStateException("externalAccount cannot be null");
      }
      this.externalAccount = JsonNullable.of(value);
      return this;
    }
  }
}
