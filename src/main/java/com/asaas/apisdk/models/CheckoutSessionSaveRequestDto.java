// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class CheckoutSessionSaveRequestDto {

  /**
   * Payment methods
   */
  @NonNull
  private List<CheckoutSessionSaveRequestBillingType> billingTypes;

  /**
   * Charge types
   */
  @NonNull
  private List<CheckoutSessionSaveRequestChargeType> chargeTypes;

  /**
   * Automatic redirection information after payment on the checkout screen
   */
  @JsonInclude(JsonInclude.Include.ALWAYS)
  private CheckoutSessionCallbackDto callback;

  /**
   * List of items at checkout
   */
  @NonNull
  private List<CheckoutSessionItemsDto> items;

  /**
   * Time in minutes for checkout expiration
   */
  @JsonProperty("minutesToExpire")
  private JsonNullable<Long> minutesToExpire;

  /**
   * Customer data
   */
  @JsonProperty("customerData")
  private JsonNullable<CheckoutSessionCustomerDataDto> customerData;

  /**
   * Subscription details, required if chargeTypes includes `RECURRENT`
   */
  @JsonProperty("subscription")
  private JsonNullable<CheckoutSessionSubscriptionDto> subscription;

  /**
   * Installment details. If informed, it will be mandatory to include the `INSTALLMENT` chargeType
   */
  @JsonProperty("installment")
  private JsonNullable<CheckoutSessionInstallmentDto> installment;

  /**
   * Split Settings
   */
  @JsonProperty("splits")
  private JsonNullable<List<CheckoutSessionSplitDto>> splits;

  @JsonIgnore
  public Long getMinutesToExpire() {
    return minutesToExpire.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionCustomerDataDto getCustomerData() {
    return customerData.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionSubscriptionDto getSubscription() {
    return subscription.orElse(null);
  }

  @JsonIgnore
  public CheckoutSessionInstallmentDto getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public List<CheckoutSessionSplitDto> getSplits() {
    return splits.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class CheckoutSessionSaveRequestDtoBuilder {

    /**
     * Flag to track if the callback property has been set.
     */
    private boolean callback$set = false;

    public CheckoutSessionSaveRequestDtoBuilder callback(CheckoutSessionCallbackDto callback) {
      this.callback$set = true;
      this.callback = callback;
      return this;
    }

    private JsonNullable<Long> minutesToExpire = JsonNullable.undefined();

    @JsonProperty("minutesToExpire")
    public CheckoutSessionSaveRequestDtoBuilder minutesToExpire(Long value) {
      this.minutesToExpire = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionCustomerDataDto> customerData = JsonNullable.undefined();

    @JsonProperty("customerData")
    public CheckoutSessionSaveRequestDtoBuilder customerData(CheckoutSessionCustomerDataDto value) {
      this.customerData = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionSubscriptionDto> subscription = JsonNullable.undefined();

    @JsonProperty("subscription")
    public CheckoutSessionSaveRequestDtoBuilder subscription(CheckoutSessionSubscriptionDto value) {
      this.subscription = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CheckoutSessionInstallmentDto> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public CheckoutSessionSaveRequestDtoBuilder installment(CheckoutSessionInstallmentDto value) {
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<CheckoutSessionSplitDto>> splits = JsonNullable.undefined();

    @JsonProperty("splits")
    public CheckoutSessionSaveRequestDtoBuilder splits(List<CheckoutSessionSplitDto> value) {
      this.splits = JsonNullable.of(value);
      return this;
    }

    public CheckoutSessionSaveRequestDto build() {
      if (!callback$set) {
        throw new IllegalStateException("callback is required");
      }
      return new CheckoutSessionSaveRequestDto(
        billingTypes,
        chargeTypes,
        callback,
        items,
        minutesToExpire,
        customerData,
        subscription,
        installment,
        splits
      );
    }
  }
}
