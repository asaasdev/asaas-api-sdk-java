// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PaymentSaveWithCreditCardRequestDto {

  /**
   * Unique customer identifier in Asaas
   */
  @NonNull
  private String customer;

  /**
   * Payment billing type
   */
  @NonNull
  private PaymentSaveWithCreditCardRequestBillingType billingType;

  /**
   * Payment amount
   */
  @NonNull
  private Double value;

  /**
   * Payment due date
   */
  @NonNull
  private String dueDate;

  /**
   * IP from where the customer is making the purchase. Your server's IP must not be entered.
   */
  @NonNull
  private String remoteIp;

  /**
   * Payment description (max. 500 characters)
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Days after registration cancellation deadline (only for bank slip)
   */
  @JsonProperty("daysAfterDueDateToRegistrationCancellation")
  private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation;

  /**
   * Free search field
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Number of installments (only in the case of installment payment)
   */
  @JsonProperty("installmentCount")
  private JsonNullable<Long> installmentCount;

  /**
   * Enter the total amount of a charge that will be paid in installments (only in the case of an installment charge). If this field is sent, the installmentValue is not necessary, the calculation per installment will be automatic.
   */
  @JsonProperty("totalValue")
  private JsonNullable<Double> totalValue;

  /**
   * Value of each installment (only in the case of installment payment). Send this field if you want to define the value of each installment.
   */
  @JsonProperty("installmentValue")
  private JsonNullable<Double> installmentValue;

  /**
   * Discount information
   */
  @JsonProperty("discount")
  private JsonNullable<PaymentDiscountDto> discount;

  /**
   * Interest information for payment after due date
   */
  @JsonProperty("interest")
  private JsonNullable<PaymentInterestRequestDto> interest;

  /**
   * Fine information for payment after due date
   */
  @JsonProperty("fine")
  private JsonNullable<PaymentFineRequestDto> fine;

  /**
   * Define whether the payment will be sent via post
   */
  @JsonProperty("postalService")
  private JsonNullable<Boolean> postalService;

  /**
   * Split Settings
   */
  @JsonProperty("split")
  private JsonNullable<List<PaymentSplitRequestDto>> split;

  /**
   * Automatic redirection information after the payment of the link payment
   */
  @JsonProperty("callback")
  private JsonNullable<PaymentCallbackRequestDto> callback;

  /**
   * Credit card information
   */
  @JsonProperty("creditCard")
  private JsonNullable<CreditCardRequestDto> creditCard;

  /**
   * Credit card holder information
   */
  @JsonProperty("creditCardHolderInfo")
  private JsonNullable<CreditCardHolderInfoRequestDto> creditCardHolderInfo;

  /**
   * Credit card token for using the credit card tokenization functionality
   */
  @JsonProperty("creditCardToken")
  private JsonNullable<String> creditCardToken;

  /**
   * Carry out only the Pre-Authorization of the payment
   */
  @JsonProperty("authorizeOnly")
  private JsonNullable<Boolean> authorizeOnly;

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Long getDaysAfterDueDateToRegistrationCancellation() {
    return daysAfterDueDateToRegistrationCancellation.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public Long getInstallmentCount() {
    return installmentCount.orElse(null);
  }

  @JsonIgnore
  public Double getTotalValue() {
    return totalValue.orElse(null);
  }

  @JsonIgnore
  public Double getInstallmentValue() {
    return installmentValue.orElse(null);
  }

  @JsonIgnore
  public PaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public PaymentInterestRequestDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public PaymentFineRequestDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public Boolean getPostalService() {
    return postalService.orElse(null);
  }

  @JsonIgnore
  public List<PaymentSplitRequestDto> getSplit() {
    return split.orElse(null);
  }

  @JsonIgnore
  public PaymentCallbackRequestDto getCallback() {
    return callback.orElse(null);
  }

  @JsonIgnore
  public CreditCardRequestDto getCreditCard() {
    return creditCard.orElse(null);
  }

  @JsonIgnore
  public CreditCardHolderInfoRequestDto getCreditCardHolderInfo() {
    return creditCardHolderInfo.orElse(null);
  }

  @JsonIgnore
  public String getCreditCardToken() {
    return creditCardToken.orElse(null);
  }

  @JsonIgnore
  public Boolean getAuthorizeOnly() {
    return authorizeOnly.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PaymentSaveWithCreditCardRequestDtoBuilder {

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public PaymentSaveWithCreditCardRequestDtoBuilder description(String value) {
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> daysAfterDueDateToRegistrationCancellation = JsonNullable.undefined();

    @JsonProperty("daysAfterDueDateToRegistrationCancellation")
    public PaymentSaveWithCreditCardRequestDtoBuilder daysAfterDueDateToRegistrationCancellation(Long value) {
      this.daysAfterDueDateToRegistrationCancellation = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public PaymentSaveWithCreditCardRequestDtoBuilder externalReference(String value) {
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> installmentCount = JsonNullable.undefined();

    @JsonProperty("installmentCount")
    public PaymentSaveWithCreditCardRequestDtoBuilder installmentCount(Long value) {
      this.installmentCount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> totalValue = JsonNullable.undefined();

    @JsonProperty("totalValue")
    public PaymentSaveWithCreditCardRequestDtoBuilder totalValue(Double value) {
      this.totalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> installmentValue = JsonNullable.undefined();

    @JsonProperty("installmentValue")
    public PaymentSaveWithCreditCardRequestDtoBuilder installmentValue(Double value) {
      this.installmentValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public PaymentSaveWithCreditCardRequestDtoBuilder discount(PaymentDiscountDto value) {
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentInterestRequestDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public PaymentSaveWithCreditCardRequestDtoBuilder interest(PaymentInterestRequestDto value) {
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentFineRequestDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public PaymentSaveWithCreditCardRequestDtoBuilder fine(PaymentFineRequestDto value) {
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> postalService = JsonNullable.undefined();

    @JsonProperty("postalService")
    public PaymentSaveWithCreditCardRequestDtoBuilder postalService(Boolean value) {
      this.postalService = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<PaymentSplitRequestDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public PaymentSaveWithCreditCardRequestDtoBuilder split(List<PaymentSplitRequestDto> value) {
      this.split = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentCallbackRequestDto> callback = JsonNullable.undefined();

    @JsonProperty("callback")
    public PaymentSaveWithCreditCardRequestDtoBuilder callback(PaymentCallbackRequestDto value) {
      this.callback = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CreditCardRequestDto> creditCard = JsonNullable.undefined();

    @JsonProperty("creditCard")
    public PaymentSaveWithCreditCardRequestDtoBuilder creditCard(CreditCardRequestDto value) {
      if (value == null) {
        throw new IllegalStateException("creditCard cannot be null");
      }
      this.creditCard = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<CreditCardHolderInfoRequestDto> creditCardHolderInfo = JsonNullable.undefined();

    @JsonProperty("creditCardHolderInfo")
    public PaymentSaveWithCreditCardRequestDtoBuilder creditCardHolderInfo(CreditCardHolderInfoRequestDto value) {
      if (value == null) {
        throw new IllegalStateException("creditCardHolderInfo cannot be null");
      }
      this.creditCardHolderInfo = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditCardToken = JsonNullable.undefined();

    @JsonProperty("creditCardToken")
    public PaymentSaveWithCreditCardRequestDtoBuilder creditCardToken(String value) {
      this.creditCardToken = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> authorizeOnly = JsonNullable.undefined();

    @JsonProperty("authorizeOnly")
    public PaymentSaveWithCreditCardRequestDtoBuilder authorizeOnly(Boolean value) {
      this.authorizeOnly = JsonNullable.of(value);
      return this;
    }
  }
}
