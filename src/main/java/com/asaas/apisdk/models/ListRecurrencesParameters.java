// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListRecurrencesParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by recurrence status
   */
  @JsonProperty("status")
  private JsonNullable<RecurringPixTransactionListRequestPixRecurringTransactionStatus> status;

  /**
   * Filter by recurrence value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Filter by receiver name
   */
  @JsonProperty("searchText")
  private JsonNullable<String> searchText;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public RecurringPixTransactionListRequestPixRecurringTransactionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public String getSearchText() {
    return searchText.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListRecurrencesParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListRecurrencesParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListRecurrencesParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<RecurringPixTransactionListRequestPixRecurringTransactionStatus> status =
      JsonNullable.undefined();

    @JsonProperty("status")
    public ListRecurrencesParametersBuilder status(
      RecurringPixTransactionListRequestPixRecurringTransactionStatus value
    ) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ListRecurrencesParametersBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> searchText = JsonNullable.undefined();

    @JsonProperty("searchText")
    public ListRecurrencesParametersBuilder searchText(String value) {
      if (value == null) {
        throw new IllegalStateException("searchText cannot be null");
      }
      this.searchText = JsonNullable.of(value);
      return this;
    }
  }
}
