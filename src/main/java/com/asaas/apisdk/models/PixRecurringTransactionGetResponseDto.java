// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PixRecurringTransactionGetResponseDto {

  /**
   * Unique recurrence identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Recurrence status
   */
  @JsonProperty("status")
  private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionStatus> status;

  /**
   * Indicates the origin of the recurrence
   */
  @JsonProperty("origin")
  private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionOrigin> origin;

  /**
   * Recurrence value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Recurrence frequency
   */
  @JsonProperty("frequency")
  private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionFrequency> frequency;

  /**
   * Number of repetitions
   */
  @JsonProperty("quantity")
  private JsonNullable<Long> quantity;

  /**
   * Recurrence start date
   */
  @JsonProperty("startDate")
  private JsonNullable<String> startDate;

  /**
   * Recurrence finish date
   */
  @JsonProperty("finishDate")
  private JsonNullable<String> finishDate;

  /**
   * Whether the recurrence can be cancelled
   */
  @JsonProperty("canBeCancelled")
  private JsonNullable<Boolean> canBeCancelled;

  /**
   * Receiver information
   */
  @JsonProperty("externalAccount")
  private JsonNullable<PixRecurringTransactionExternalAccountDto> externalAccount;

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public PixRecurringTransactionGetResponsePixRecurringTransactionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public PixRecurringTransactionGetResponsePixRecurringTransactionOrigin getOrigin() {
    return origin.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public PixRecurringTransactionGetResponsePixRecurringTransactionFrequency getFrequency() {
    return frequency.orElse(null);
  }

  @JsonIgnore
  public Long getQuantity() {
    return quantity.orElse(null);
  }

  @JsonIgnore
  public String getStartDate() {
    return startDate.orElse(null);
  }

  @JsonIgnore
  public String getFinishDate() {
    return finishDate.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBeCancelled() {
    return canBeCancelled.orElse(null);
  }

  @JsonIgnore
  public PixRecurringTransactionExternalAccountDto getExternalAccount() {
    return externalAccount.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PixRecurringTransactionGetResponseDtoBuilder {

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public PixRecurringTransactionGetResponseDtoBuilder id(String value) {
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionStatus> status =
      JsonNullable.undefined();

    @JsonProperty("status")
    public PixRecurringTransactionGetResponseDtoBuilder status(
      PixRecurringTransactionGetResponsePixRecurringTransactionStatus value
    ) {
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionOrigin> origin =
      JsonNullable.undefined();

    @JsonProperty("origin")
    public PixRecurringTransactionGetResponseDtoBuilder origin(
      PixRecurringTransactionGetResponsePixRecurringTransactionOrigin value
    ) {
      this.origin = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public PixRecurringTransactionGetResponseDtoBuilder value(Double value) {
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixRecurringTransactionGetResponsePixRecurringTransactionFrequency> frequency =
      JsonNullable.undefined();

    @JsonProperty("frequency")
    public PixRecurringTransactionGetResponseDtoBuilder frequency(
      PixRecurringTransactionGetResponsePixRecurringTransactionFrequency value
    ) {
      this.frequency = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> quantity = JsonNullable.undefined();

    @JsonProperty("quantity")
    public PixRecurringTransactionGetResponseDtoBuilder quantity(Long value) {
      this.quantity = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> startDate = JsonNullable.undefined();

    @JsonProperty("startDate")
    public PixRecurringTransactionGetResponseDtoBuilder startDate(String value) {
      this.startDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> finishDate = JsonNullable.undefined();

    @JsonProperty("finishDate")
    public PixRecurringTransactionGetResponseDtoBuilder finishDate(String value) {
      this.finishDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBeCancelled = JsonNullable.undefined();

    @JsonProperty("canBeCancelled")
    public PixRecurringTransactionGetResponseDtoBuilder canBeCancelled(Boolean value) {
      this.canBeCancelled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PixRecurringTransactionExternalAccountDto> externalAccount = JsonNullable.undefined();

    @JsonProperty("externalAccount")
    public PixRecurringTransactionGetResponseDtoBuilder externalAccount(
      PixRecurringTransactionExternalAccountDto value
    ) {
      this.externalAccount = JsonNullable.of(value);
      return this;
    }
  }
}
