// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPaymentDunningSimulateResponseTypeSimulationItemDto {

  /**
   * Type of payment dunning
   */
  @JsonProperty("type")
  private JsonNullable<ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType> type;

  /**
   * Whether it is possible to request a payment dunning of this type
   */
  @JsonProperty("isAllowed")
  private JsonNullable<Boolean> isAllowed;

  /**
   * Reason why it is not possible to request a payment dunning for this type
   */
  @JsonProperty("notAllowedReason")
  private JsonNullable<String> notAllowedReason;

  /**
   * Cost and/or payment dunning fee
   */
  @JsonProperty("feeValue")
  private JsonNullable<Double> feeValue;

  /**
   * Net amount to be recovered
   */
  @JsonProperty("netValue")
  private JsonNullable<Double> netValue;

  /**
   * Expected start date of the payment dunning
   */
  @JsonProperty("startDate")
  private JsonNullable<String> startDate;

  @JsonIgnore
  public ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType getType() {
    return type.orElse(null);
  }

  @JsonIgnore
  public Boolean getIsAllowed() {
    return isAllowed.orElse(null);
  }

  @JsonIgnore
  public String getNotAllowedReason() {
    return notAllowedReason.orElse(null);
  }

  @JsonIgnore
  public Double getFeeValue() {
    return feeValue.orElse(null);
  }

  @JsonIgnore
  public Double getNetValue() {
    return netValue.orElse(null);
  }

  @JsonIgnore
  public String getStartDate() {
    return startDate.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder {

    private JsonNullable<ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType> type =
      JsonNullable.undefined();

    @JsonProperty("type")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder type(
      ApiPaymentDunningSimulateResponseTypeSimulationItemPaymentDunningType value
    ) {
      this.type = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> isAllowed = JsonNullable.undefined();

    @JsonProperty("isAllowed")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder isAllowed(Boolean value) {
      this.isAllowed = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> notAllowedReason = JsonNullable.undefined();

    @JsonProperty("notAllowedReason")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder notAllowedReason(String value) {
      this.notAllowedReason = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> feeValue = JsonNullable.undefined();

    @JsonProperty("feeValue")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder feeValue(Double value) {
      this.feeValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> netValue = JsonNullable.undefined();

    @JsonProperty("netValue")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder netValue(Double value) {
      this.netValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> startDate = JsonNullable.undefined();

    @JsonProperty("startDate")
    public ApiPaymentDunningSimulateResponseTypeSimulationItemDtoBuilder startDate(String value) {
      this.startDate = JsonNullable.of(value);
      return this;
    }
  }
}
