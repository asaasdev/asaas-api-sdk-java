// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPaymentLimitsResponseCreationDailyDto {

  /**
   * Total limit
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Limit used
   */
  @JsonProperty("used")
  private JsonNullable<Long> used;

  /**
   * Indicates whether the limit has been reached
   */
  @JsonProperty("wasReached")
  private JsonNullable<Boolean> wasReached;

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public Long getUsed() {
    return used.orElse(null);
  }

  @JsonIgnore
  public Boolean getWasReached() {
    return wasReached.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPaymentLimitsResponseCreationDailyDtoBuilder {

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ApiPaymentLimitsResponseCreationDailyDtoBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> used = JsonNullable.undefined();

    @JsonProperty("used")
    public ApiPaymentLimitsResponseCreationDailyDtoBuilder used(Long value) {
      if (value == null) {
        throw new IllegalStateException("used cannot be null");
      }
      this.used = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> wasReached = JsonNullable.undefined();

    @JsonProperty("wasReached")
    public ApiPaymentLimitsResponseCreationDailyDtoBuilder wasReached(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("wasReached cannot be null");
      }
      this.wasReached = JsonNullable.of(value);
      return this;
    }
  }
}
