// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiSubscriptionGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique subscription identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Subscription creation date
   */
  @JsonProperty("dateCreated")
  private JsonNullable<String> dateCreated;

  /**
   * Unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Unique identifier of the payments link to which the subscription belongs
   */
  @JsonProperty("paymentLink")
  private JsonNullable<String> paymentLink;

  /**
   * Billing type
   */
  @JsonProperty("billingType")
  private JsonNullable<ApiSubscriptionGetResponseBillingType> billingType;

  /**
   * Billing frequency
   */
  @JsonProperty("cycle")
  private JsonNullable<ApiSubscriptionGetResponseCycle> cycle;

  /**
   * Subscription value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Due date of the next payment to be generated
   */
  @JsonProperty("nextDueDate")
  private JsonNullable<String> nextDueDate;

  /**
   * Deadline for payments to be due
   */
  @JsonProperty("endDate")
  private JsonNullable<String> endDate;

  /**
   * Subscription description
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Subscription status
   */
  @JsonProperty("status")
  private JsonNullable<ApiSubscriptionGetResponseSubscriptionStatus> status;

  @JsonProperty("discount")
  private JsonNullable<ApiPaymentDiscountDto> discount;

  @JsonProperty("fine")
  private JsonNullable<ApiPaymentFineResponseDto> fine;

  @JsonProperty("interest")
  private JsonNullable<ApiPaymentInterestResponseDto> interest;

  /**
   * Informs if the subscription has been removed
   */
  @JsonProperty("deleted")
  private JsonNullable<Boolean> deleted;

  /**
   * Maximum number of payments to be generated for this subscription
   */
  @JsonProperty("maxPayments")
  private JsonNullable<Long> maxPayments;

  /**
   * Subscription identifier on your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Unique checkout identifier
   */
  @JsonProperty("checkoutSession")
  private JsonNullable<String> checkoutSession;

  /**
   * Split information
   */
  @JsonProperty("split")
  private JsonNullable<List<ApiSubscriptionSplitResponseDto>> split;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public String getDateCreated() {
    return dateCreated.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public String getPaymentLink() {
    return paymentLink.orElse(null);
  }

  @JsonIgnore
  public ApiSubscriptionGetResponseBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public ApiSubscriptionGetResponseCycle getCycle() {
    return cycle.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public String getNextDueDate() {
    return nextDueDate.orElse(null);
  }

  @JsonIgnore
  public String getEndDate() {
    return endDate.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public ApiSubscriptionGetResponseSubscriptionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentFineResponseDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentInterestResponseDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public Boolean getDeleted() {
    return deleted.orElse(null);
  }

  @JsonIgnore
  public Long getMaxPayments() {
    return maxPayments.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public String getCheckoutSession() {
    return checkoutSession.orElse(null);
  }

  @JsonIgnore
  public List<ApiSubscriptionSplitResponseDto> getSplit() {
    return split.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiSubscriptionGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiSubscriptionGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiSubscriptionGetResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreated = JsonNullable.undefined();

    @JsonProperty("dateCreated")
    public ApiSubscriptionGetResponseDtoBuilder dateCreated(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreated cannot be null");
      }
      this.dateCreated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ApiSubscriptionGetResponseDtoBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentLink = JsonNullable.undefined();

    @JsonProperty("paymentLink")
    public ApiSubscriptionGetResponseDtoBuilder paymentLink(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentLink cannot be null");
      }
      this.paymentLink = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiSubscriptionGetResponseBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ApiSubscriptionGetResponseDtoBuilder billingType(ApiSubscriptionGetResponseBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiSubscriptionGetResponseCycle> cycle = JsonNullable.undefined();

    @JsonProperty("cycle")
    public ApiSubscriptionGetResponseDtoBuilder cycle(ApiSubscriptionGetResponseCycle value) {
      if (value == null) {
        throw new IllegalStateException("cycle cannot be null");
      }
      this.cycle = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiSubscriptionGetResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nextDueDate = JsonNullable.undefined();

    @JsonProperty("nextDueDate")
    public ApiSubscriptionGetResponseDtoBuilder nextDueDate(String value) {
      if (value == null) {
        throw new IllegalStateException("nextDueDate cannot be null");
      }
      this.nextDueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> endDate = JsonNullable.undefined();

    @JsonProperty("endDate")
    public ApiSubscriptionGetResponseDtoBuilder endDate(String value) {
      if (value == null) {
        throw new IllegalStateException("endDate cannot be null");
      }
      this.endDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiSubscriptionGetResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiSubscriptionGetResponseSubscriptionStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiSubscriptionGetResponseDtoBuilder status(ApiSubscriptionGetResponseSubscriptionStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public ApiSubscriptionGetResponseDtoBuilder discount(ApiPaymentDiscountDto value) {
      if (value == null) {
        throw new IllegalStateException("discount cannot be null");
      }
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentFineResponseDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public ApiSubscriptionGetResponseDtoBuilder fine(ApiPaymentFineResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("fine cannot be null");
      }
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentInterestResponseDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public ApiSubscriptionGetResponseDtoBuilder interest(ApiPaymentInterestResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("interest cannot be null");
      }
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> deleted = JsonNullable.undefined();

    @JsonProperty("deleted")
    public ApiSubscriptionGetResponseDtoBuilder deleted(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("deleted cannot be null");
      }
      this.deleted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> maxPayments = JsonNullable.undefined();

    @JsonProperty("maxPayments")
    public ApiSubscriptionGetResponseDtoBuilder maxPayments(Long value) {
      if (value == null) {
        throw new IllegalStateException("maxPayments cannot be null");
      }
      this.maxPayments = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiSubscriptionGetResponseDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> checkoutSession = JsonNullable.undefined();

    @JsonProperty("checkoutSession")
    public ApiSubscriptionGetResponseDtoBuilder checkoutSession(String value) {
      if (value == null) {
        throw new IllegalStateException("checkoutSession cannot be null");
      }
      this.checkoutSession = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiSubscriptionSplitResponseDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public ApiSubscriptionGetResponseDtoBuilder split(List<ApiSubscriptionSplitResponseDto> value) {
      if (value == null) {
        throw new IllegalStateException("split cannot be null");
      }
      this.split = JsonNullable.of(value);
      return this;
    }
  }
}
