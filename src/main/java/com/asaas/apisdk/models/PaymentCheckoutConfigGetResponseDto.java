// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class PaymentCheckoutConfigGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Logo background color
   */
  @JsonProperty("logoBackgroundColor")
  private JsonNullable<String> logoBackgroundColor;

  /**
   * Background color of your information
   */
  @JsonProperty("infoBackgroundColor")
  private JsonNullable<String> infoBackgroundColor;

  /**
   * Font color of your information
   */
  @JsonProperty("fontColor")
  private JsonNullable<String> fontColor;

  /**
   * Indicates whether personalization is enabled
   */
  @JsonProperty("enabled")
  private JsonNullable<Boolean> enabled;

  /**
   * Logo download link
   */
  @JsonProperty("logoUrl")
  private JsonNullable<String> logoUrl;

  /**
   * Invoice personalization analysis notes
   */
  @JsonProperty("observations")
  private JsonNullable<String> observations;

  /**
   * Invoice personalization status
   */
  @JsonProperty("status")
  private JsonNullable<PaymentCheckoutConfigGetResponseInvoiceConfigStatus> status;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getLogoBackgroundColor() {
    return logoBackgroundColor.orElse(null);
  }

  @JsonIgnore
  public String getInfoBackgroundColor() {
    return infoBackgroundColor.orElse(null);
  }

  @JsonIgnore
  public String getFontColor() {
    return fontColor.orElse(null);
  }

  @JsonIgnore
  public Boolean getEnabled() {
    return enabled.orElse(null);
  }

  @JsonIgnore
  public String getLogoUrl() {
    return logoUrl.orElse(null);
  }

  @JsonIgnore
  public String getObservations() {
    return observations.orElse(null);
  }

  @JsonIgnore
  public PaymentCheckoutConfigGetResponseInvoiceConfigStatus getStatus() {
    return status.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class PaymentCheckoutConfigGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public PaymentCheckoutConfigGetResponseDtoBuilder object(String value) {
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> logoBackgroundColor = JsonNullable.undefined();

    @JsonProperty("logoBackgroundColor")
    public PaymentCheckoutConfigGetResponseDtoBuilder logoBackgroundColor(String value) {
      this.logoBackgroundColor = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> infoBackgroundColor = JsonNullable.undefined();

    @JsonProperty("infoBackgroundColor")
    public PaymentCheckoutConfigGetResponseDtoBuilder infoBackgroundColor(String value) {
      this.infoBackgroundColor = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> fontColor = JsonNullable.undefined();

    @JsonProperty("fontColor")
    public PaymentCheckoutConfigGetResponseDtoBuilder fontColor(String value) {
      this.fontColor = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> enabled = JsonNullable.of(true);

    @JsonProperty("enabled")
    public PaymentCheckoutConfigGetResponseDtoBuilder enabled(Boolean value) {
      this.enabled = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> logoUrl = JsonNullable.undefined();

    @JsonProperty("logoUrl")
    public PaymentCheckoutConfigGetResponseDtoBuilder logoUrl(String value) {
      this.logoUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> observations = JsonNullable.undefined();

    @JsonProperty("observations")
    public PaymentCheckoutConfigGetResponseDtoBuilder observations(String value) {
      this.observations = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<PaymentCheckoutConfigGetResponseInvoiceConfigStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public PaymentCheckoutConfigGetResponseDtoBuilder status(
      PaymentCheckoutConfigGetResponseInvoiceConfigStatus value
    ) {
      this.status = JsonNullable.of(value);
      return this;
    }
  }
}
