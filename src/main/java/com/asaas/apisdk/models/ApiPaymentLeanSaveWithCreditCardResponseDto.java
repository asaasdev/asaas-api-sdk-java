// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPaymentLeanSaveWithCreditCardResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique payment identifier in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Payment creation date
   */
  @JsonProperty("dateCreated")
  private JsonNullable<String> dateCreated;

  /**
   * Unique identifier of the customer to whom the payment belongs
   */
  @JsonProperty("customerId")
  private JsonNullable<String> customerId;

  /**
   * Unique subscription identifier (when recurring billing)
   */
  @JsonProperty("subscriptionId")
  private JsonNullable<String> subscriptionId;

  /**
   * Unique installment identifier (when billing in installments)
   */
  @JsonProperty("installmentId")
  private JsonNullable<String> installmentId;

  /**
   * Unique identifier of the payments link to which the payment belongs
   */
  @JsonProperty("paymentLinkId")
  private JsonNullable<String> paymentLinkId;

  /**
   * Payment amount
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Net value of the charge after discounting the Asaas fee
   */
  @JsonProperty("netValue")
  private JsonNullable<Double> netValue;

  /**
   * Original amount of charge (filled when paid with interest and fine)
   */
  @JsonProperty("originalValue")
  private JsonNullable<Double> originalValue;

  /**
   * Calculated amount of interest and fine that must be paid after the charge is due
   */
  @JsonProperty("interestValue")
  private JsonNullable<Double> interestValue;

  /**
   * Description of the payment
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Payment billing type
   */
  @JsonProperty("billingType")
  private JsonNullable<ApiPaymentLeanSaveWithCreditCardResponseBillingType> billingType;

  /**
   * Informs whether the charge can be paid after the due date (Only for bank slip)
   */
  @JsonProperty("canBePaidAfterDueDate")
  private JsonNullable<Boolean> canBePaidAfterDueDate;

  /**
   * Billing confirmation date
   */
  @JsonProperty("confirmedDate")
  private JsonNullable<String> confirmedDate;

  /**
   * Unique identifier of the Pix transaction to which the payment belongs
   */
  @JsonProperty("pixTransactionId")
  private JsonNullable<String> pixTransactionId;

  /**
   * Payment status
   */
  @JsonProperty("status")
  private JsonNullable<ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus> status;

  /**
   * Payment due date
   */
  @JsonProperty("dueDate")
  private JsonNullable<String> dueDate;

  /**
   * Original due date upon creation of the payment
   */
  @JsonProperty("originalDueDate")
  private JsonNullable<String> originalDueDate;

  /**
   * Payment date on Asaas
   */
  @JsonProperty("paymentDate")
  private JsonNullable<String> paymentDate;

  /**
   * Date on which the customer paid the bank slip
   */
  @JsonProperty("customerPaymentDate")
  private JsonNullable<String> customerPaymentDate;

  /**
   * Parcel number
   */
  @JsonProperty("installmentNumber")
  private JsonNullable<Long> installmentNumber;

  /**
   * Free search field
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Determines if the payment has been removed
   */
  @JsonProperty("deleted")
  private JsonNullable<Boolean> deleted;

  /**
   * Defines whether the charge was anticipated or is in the process of being anticipated
   */
  @JsonProperty("anticipated")
  private JsonNullable<Boolean> anticipated;

  /**
   * Determines whether the charge is anticipated
   */
  @JsonProperty("anticipable")
  private JsonNullable<Boolean> anticipable;

  /**
   * Billing Credit date
   */
  @JsonProperty("creditDate")
  private JsonNullable<String> creditDate;

  /**
   * URL of proof of confirmation, receipt, reversal or removal
   */
  @JsonProperty("transactionReceiptUrl")
  private JsonNullable<String> transactionReceiptUrl;

  /**
   * Duplicate billing identifier (if true)
   */
  @JsonProperty("duplicatedPaymentId")
  private JsonNullable<String> duplicatedPaymentId;

  @JsonProperty("discount")
  private JsonNullable<ApiPaymentDiscountDto> discount;

  @JsonProperty("fine")
  private JsonNullable<ApiPaymentFineResponseDto> fine;

  @JsonProperty("interest")
  private JsonNullable<ApiPaymentInterestResponseDto> interest;

  /**
   * Define whether the payment will be sent via post
   */
  @JsonProperty("postalService")
  private JsonNullable<Boolean> postalService;

  @JsonProperty("creditCard")
  private JsonNullable<ApiPaymentSaveWithCreditCardCreditCardDto> creditCard;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public String getDateCreated() {
    return dateCreated.orElse(null);
  }

  @JsonIgnore
  public String getCustomerId() {
    return customerId.orElse(null);
  }

  @JsonIgnore
  public String getSubscriptionId() {
    return subscriptionId.orElse(null);
  }

  @JsonIgnore
  public String getInstallmentId() {
    return installmentId.orElse(null);
  }

  @JsonIgnore
  public String getPaymentLinkId() {
    return paymentLinkId.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Double getNetValue() {
    return netValue.orElse(null);
  }

  @JsonIgnore
  public Double getOriginalValue() {
    return originalValue.orElse(null);
  }

  @JsonIgnore
  public Double getInterestValue() {
    return interestValue.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentLeanSaveWithCreditCardResponseBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public Boolean getCanBePaidAfterDueDate() {
    return canBePaidAfterDueDate.orElse(null);
  }

  @JsonIgnore
  public String getConfirmedDate() {
    return confirmedDate.orElse(null);
  }

  @JsonIgnore
  public String getPixTransactionId() {
    return pixTransactionId.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getDueDate() {
    return dueDate.orElse(null);
  }

  @JsonIgnore
  public String getOriginalDueDate() {
    return originalDueDate.orElse(null);
  }

  @JsonIgnore
  public String getPaymentDate() {
    return paymentDate.orElse(null);
  }

  @JsonIgnore
  public String getCustomerPaymentDate() {
    return customerPaymentDate.orElse(null);
  }

  @JsonIgnore
  public Long getInstallmentNumber() {
    return installmentNumber.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public Boolean getDeleted() {
    return deleted.orElse(null);
  }

  @JsonIgnore
  public Boolean getAnticipated() {
    return anticipated.orElse(null);
  }

  @JsonIgnore
  public Boolean getAnticipable() {
    return anticipable.orElse(null);
  }

  @JsonIgnore
  public String getCreditDate() {
    return creditDate.orElse(null);
  }

  @JsonIgnore
  public String getTransactionReceiptUrl() {
    return transactionReceiptUrl.orElse(null);
  }

  @JsonIgnore
  public String getDuplicatedPaymentId() {
    return duplicatedPaymentId.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentFineResponseDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentInterestResponseDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public Boolean getPostalService() {
    return postalService.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentSaveWithCreditCardCreditCardDto getCreditCard() {
    return creditCard.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dateCreated = JsonNullable.undefined();

    @JsonProperty("dateCreated")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder dateCreated(String value) {
      if (value == null) {
        throw new IllegalStateException("dateCreated cannot be null");
      }
      this.dateCreated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customerId = JsonNullable.undefined();

    @JsonProperty("customerId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder customerId(String value) {
      if (value == null) {
        throw new IllegalStateException("customerId cannot be null");
      }
      this.customerId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> subscriptionId = JsonNullable.undefined();

    @JsonProperty("subscriptionId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder subscriptionId(String value) {
      if (value == null) {
        throw new IllegalStateException("subscriptionId cannot be null");
      }
      this.subscriptionId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> installmentId = JsonNullable.undefined();

    @JsonProperty("installmentId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder installmentId(String value) {
      if (value == null) {
        throw new IllegalStateException("installmentId cannot be null");
      }
      this.installmentId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentLinkId = JsonNullable.undefined();

    @JsonProperty("paymentLinkId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder paymentLinkId(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentLinkId cannot be null");
      }
      this.paymentLinkId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> netValue = JsonNullable.undefined();

    @JsonProperty("netValue")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder netValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("netValue cannot be null");
      }
      this.netValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> originalValue = JsonNullable.undefined();

    @JsonProperty("originalValue")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder originalValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("originalValue cannot be null");
      }
      this.originalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> interestValue = JsonNullable.undefined();

    @JsonProperty("interestValue")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder interestValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("interestValue cannot be null");
      }
      this.interestValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentLeanSaveWithCreditCardResponseBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder billingType(
      ApiPaymentLeanSaveWithCreditCardResponseBillingType value
    ) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> canBePaidAfterDueDate = JsonNullable.undefined();

    @JsonProperty("canBePaidAfterDueDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder canBePaidAfterDueDate(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("canBePaidAfterDueDate cannot be null");
      }
      this.canBePaidAfterDueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> confirmedDate = JsonNullable.undefined();

    @JsonProperty("confirmedDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder confirmedDate(String value) {
      if (value == null) {
        throw new IllegalStateException("confirmedDate cannot be null");
      }
      this.confirmedDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> pixTransactionId = JsonNullable.undefined();

    @JsonProperty("pixTransactionId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder pixTransactionId(String value) {
      if (value == null) {
        throw new IllegalStateException("pixTransactionId cannot be null");
      }
      this.pixTransactionId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder status(
      ApiPaymentLeanSaveWithCreditCardResponsePaymentStatus value
    ) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDate = JsonNullable.undefined();

    @JsonProperty("dueDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder dueDate(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDate cannot be null");
      }
      this.dueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> originalDueDate = JsonNullable.undefined();

    @JsonProperty("originalDueDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder originalDueDate(String value) {
      if (value == null) {
        throw new IllegalStateException("originalDueDate cannot be null");
      }
      this.originalDueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> paymentDate = JsonNullable.undefined();

    @JsonProperty("paymentDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder paymentDate(String value) {
      if (value == null) {
        throw new IllegalStateException("paymentDate cannot be null");
      }
      this.paymentDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customerPaymentDate = JsonNullable.undefined();

    @JsonProperty("customerPaymentDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder customerPaymentDate(String value) {
      if (value == null) {
        throw new IllegalStateException("customerPaymentDate cannot be null");
      }
      this.customerPaymentDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> installmentNumber = JsonNullable.undefined();

    @JsonProperty("installmentNumber")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder installmentNumber(Long value) {
      if (value == null) {
        throw new IllegalStateException("installmentNumber cannot be null");
      }
      this.installmentNumber = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> deleted = JsonNullable.undefined();

    @JsonProperty("deleted")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder deleted(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("deleted cannot be null");
      }
      this.deleted = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> anticipated = JsonNullable.undefined();

    @JsonProperty("anticipated")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder anticipated(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("anticipated cannot be null");
      }
      this.anticipated = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> anticipable = JsonNullable.undefined();

    @JsonProperty("anticipable")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder anticipable(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("anticipable cannot be null");
      }
      this.anticipable = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> creditDate = JsonNullable.undefined();

    @JsonProperty("creditDate")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder creditDate(String value) {
      if (value == null) {
        throw new IllegalStateException("creditDate cannot be null");
      }
      this.creditDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> transactionReceiptUrl = JsonNullable.undefined();

    @JsonProperty("transactionReceiptUrl")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder transactionReceiptUrl(String value) {
      if (value == null) {
        throw new IllegalStateException("transactionReceiptUrl cannot be null");
      }
      this.transactionReceiptUrl = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> duplicatedPaymentId = JsonNullable.undefined();

    @JsonProperty("duplicatedPaymentId")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder duplicatedPaymentId(String value) {
      if (value == null) {
        throw new IllegalStateException("duplicatedPaymentId cannot be null");
      }
      this.duplicatedPaymentId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder discount(ApiPaymentDiscountDto value) {
      if (value == null) {
        throw new IllegalStateException("discount cannot be null");
      }
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentFineResponseDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder fine(ApiPaymentFineResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("fine cannot be null");
      }
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentInterestResponseDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder interest(ApiPaymentInterestResponseDto value) {
      if (value == null) {
        throw new IllegalStateException("interest cannot be null");
      }
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> postalService = JsonNullable.undefined();

    @JsonProperty("postalService")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder postalService(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("postalService cannot be null");
      }
      this.postalService = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentSaveWithCreditCardCreditCardDto> creditCard = JsonNullable.undefined();

    @JsonProperty("creditCard")
    public ApiPaymentLeanSaveWithCreditCardResponseDtoBuilder creditCard(
      ApiPaymentSaveWithCreditCardCreditCardDto value
    ) {
      if (value == null) {
        throw new IllegalStateException("creditCard cannot be null");
      }
      this.creditCard = JsonNullable.of(value);
      return this;
    }
  }
}
