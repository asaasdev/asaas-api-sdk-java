// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiCustomerInvoiceSaveRequestDto {

  /**
   * Description of invoice services
   */
  @NonNull
  private String serviceDescription;

  /**
   * Additional observations
   */
  @NonNull
  private String observations;

  /**
   * Total value
   */
  @NonNull
  private Double value;

  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  @NonNull
  private Double deductions;

  /**
   * Invoice issuance date
   */
  @NonNull
  private String effectiveDate;

  /**
   * Name of the municipal service. If not provided, the municipalServiceCode attribute will be used as the name for identification.
   */
  @NonNull
  private String municipalServiceName;

  @NonNull
  private ApiCustomerInvoiceTaxesDto taxes;

  /**
   * Unique payment identifier in Asaas
   */
  @JsonProperty("payment")
  private JsonNullable<String> payment;

  /**
   * Unique installment identifier in Asaas
   */
  @JsonProperty("installment")
  private JsonNullable<String> installment;

  /**
   * Unique customer identifier
   */
  @JsonProperty("customer")
  private JsonNullable<String> customer;

  /**
   * Invoice identifier in your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Unique municipal service identifier
   */
  @JsonProperty("municipalServiceId")
  private JsonNullable<String> municipalServiceId;

  /**
   * Municipal Service Code
   */
  @JsonProperty("municipalServiceCode")
  private JsonNullable<String> municipalServiceCode;

  /**
   * Update the Payment amount with the invoice taxes already deducted.
   */
  @JsonProperty("updatePayment")
  private JsonNullable<Boolean> updatePayment;

  @JsonIgnore
  public String getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public String getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public String getCustomer() {
    return customer.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalServiceId() {
    return municipalServiceId.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalServiceCode() {
    return municipalServiceCode.orElse(null);
  }

  @JsonIgnore
  public Boolean getUpdatePayment() {
    return updatePayment.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiCustomerInvoiceSaveRequestDtoBuilder {

    private JsonNullable<String> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public ApiCustomerInvoiceSaveRequestDtoBuilder payment(String value) {
      if (value == null) {
        throw new IllegalStateException("payment cannot be null");
      }
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ApiCustomerInvoiceSaveRequestDtoBuilder installment(String value) {
      if (value == null) {
        throw new IllegalStateException("installment cannot be null");
      }
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> customer = JsonNullable.undefined();

    @JsonProperty("customer")
    public ApiCustomerInvoiceSaveRequestDtoBuilder customer(String value) {
      if (value == null) {
        throw new IllegalStateException("customer cannot be null");
      }
      this.customer = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiCustomerInvoiceSaveRequestDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalServiceId = JsonNullable.undefined();

    @JsonProperty("municipalServiceId")
    public ApiCustomerInvoiceSaveRequestDtoBuilder municipalServiceId(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalServiceId cannot be null");
      }
      this.municipalServiceId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalServiceCode = JsonNullable.undefined();

    @JsonProperty("municipalServiceCode")
    public ApiCustomerInvoiceSaveRequestDtoBuilder municipalServiceCode(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalServiceCode cannot be null");
      }
      this.municipalServiceCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> updatePayment = JsonNullable.undefined();

    @JsonProperty("updatePayment")
    public ApiCustomerInvoiceSaveRequestDtoBuilder updatePayment(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("updatePayment cannot be null");
      }
      this.updatePayment = JsonNullable.of(value);
      return this;
    }
  }
}
