// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ListCustomersParameters {

  /**
   * List starting element
   */
  @JsonProperty("offset")
  private JsonNullable<Long> offset;

  /**
   * Number of list elements (max: 100)
   */
  @JsonProperty("limit")
  private JsonNullable<Long> limit;

  /**
   * Filter by name
   */
  @JsonProperty("name")
  private JsonNullable<String> name;

  /**
   * Filter by email
   */
  @JsonProperty("email")
  private JsonNullable<String> email;

  /**
   * Filter by CPF or CNPJ
   */
  @JsonProperty("cpfCnpj")
  private JsonNullable<String> cpfCnpj;

  /**
   * Filter by group
   */
  @JsonProperty("groupName")
  private JsonNullable<String> groupName;

  /**
   * Filter by your system identifier
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  @JsonIgnore
  public Long getOffset() {
    return offset.orElse(null);
  }

  @JsonIgnore
  public Long getLimit() {
    return limit.orElse(null);
  }

  @JsonIgnore
  public String getName() {
    return name.orElse(null);
  }

  @JsonIgnore
  public String getEmail() {
    return email.orElse(null);
  }

  @JsonIgnore
  public String getCpfCnpj() {
    return cpfCnpj.orElse(null);
  }

  @JsonIgnore
  public String getGroupName() {
    return groupName.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ListCustomersParametersBuilder {

    private JsonNullable<Long> offset = JsonNullable.undefined();

    @JsonProperty("offset")
    public ListCustomersParametersBuilder offset(Long value) {
      if (value == null) {
        throw new IllegalStateException("offset cannot be null");
      }
      this.offset = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> limit = JsonNullable.undefined();

    @JsonProperty("limit")
    public ListCustomersParametersBuilder limit(Long value) {
      if (value == null) {
        throw new IllegalStateException("limit cannot be null");
      }
      this.limit = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> name = JsonNullable.undefined();

    @JsonProperty("name")
    public ListCustomersParametersBuilder name(String value) {
      if (value == null) {
        throw new IllegalStateException("name cannot be null");
      }
      this.name = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> email = JsonNullable.undefined();

    @JsonProperty("email")
    public ListCustomersParametersBuilder email(String value) {
      if (value == null) {
        throw new IllegalStateException("email cannot be null");
      }
      this.email = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> cpfCnpj = JsonNullable.undefined();

    @JsonProperty("cpfCnpj")
    public ListCustomersParametersBuilder cpfCnpj(String value) {
      if (value == null) {
        throw new IllegalStateException("cpfCnpj cannot be null");
      }
      this.cpfCnpj = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> groupName = JsonNullable.undefined();

    @JsonProperty("groupName")
    public ListCustomersParametersBuilder groupName(String value) {
      if (value == null) {
        throw new IllegalStateException("groupName cannot be null");
      }
      this.groupName = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ListCustomersParametersBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }
  }
}
