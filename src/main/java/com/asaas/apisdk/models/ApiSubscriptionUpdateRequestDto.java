// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiSubscriptionUpdateRequestDto {

  /**
   * Billing type
   */
  @JsonProperty("billingType")
  private JsonNullable<ApiSubscriptionUpdateRequestBillingType> billingType;

  /**
   * Subscription status
   */
  @JsonProperty("status")
  private JsonNullable<ApiSubscriptionUpdateRequestSubscriptionStatus> status;

  /**
   * First payment due
   */
  @JsonProperty("nextDueDate")
  private JsonNullable<String> nextDueDate;

  @JsonProperty("discount")
  private JsonNullable<ApiPaymentDiscountDto> discount;

  @JsonProperty("interest")
  private JsonNullable<ApiPaymentInterestRequestDto> interest;

  @JsonProperty("fine")
  private JsonNullable<ApiPaymentFineRequestDto> fine;

  /**
   * Billing frequency
   */
  @JsonProperty("cycle")
  private JsonNullable<ApiSubscriptionUpdateRequestCycle> cycle;

  /**
   * Subscription description (max. 500 characters)
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Deadline for payments to be due
   */
  @JsonProperty("endDate")
  private JsonNullable<String> endDate;

  /**
   * true to update the possible properties of already existing pending payments
   */
  @JsonProperty("updatePendingPayments")
  private JsonNullable<Boolean> updatePendingPayments;

  /**
   * Subscription identifier on your system
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  /**
   * Split information
   */
  @JsonProperty("split")
  private JsonNullable<List<ApiSubscriptionSplitRequestDto>> split;

  @JsonProperty("callback")
  private JsonNullable<ApiPaymentCallbackRequestDto> callback;

  @JsonIgnore
  public ApiSubscriptionUpdateRequestBillingType getBillingType() {
    return billingType.orElse(null);
  }

  @JsonIgnore
  public ApiSubscriptionUpdateRequestSubscriptionStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getNextDueDate() {
    return nextDueDate.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentDiscountDto getDiscount() {
    return discount.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentInterestRequestDto getInterest() {
    return interest.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentFineRequestDto getFine() {
    return fine.orElse(null);
  }

  @JsonIgnore
  public ApiSubscriptionUpdateRequestCycle getCycle() {
    return cycle.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public String getEndDate() {
    return endDate.orElse(null);
  }

  @JsonIgnore
  public Boolean getUpdatePendingPayments() {
    return updatePendingPayments.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  @JsonIgnore
  public List<ApiSubscriptionSplitRequestDto> getSplit() {
    return split.orElse(null);
  }

  @JsonIgnore
  public ApiPaymentCallbackRequestDto getCallback() {
    return callback.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiSubscriptionUpdateRequestDtoBuilder {

    private JsonNullable<ApiSubscriptionUpdateRequestBillingType> billingType = JsonNullable.undefined();

    @JsonProperty("billingType")
    public ApiSubscriptionUpdateRequestDtoBuilder billingType(ApiSubscriptionUpdateRequestBillingType value) {
      if (value == null) {
        throw new IllegalStateException("billingType cannot be null");
      }
      this.billingType = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiSubscriptionUpdateRequestSubscriptionStatus> status = JsonNullable.undefined();

    @JsonProperty("status")
    public ApiSubscriptionUpdateRequestDtoBuilder status(ApiSubscriptionUpdateRequestSubscriptionStatus value) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> nextDueDate = JsonNullable.undefined();

    @JsonProperty("nextDueDate")
    public ApiSubscriptionUpdateRequestDtoBuilder nextDueDate(String value) {
      if (value == null) {
        throw new IllegalStateException("nextDueDate cannot be null");
      }
      this.nextDueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentDiscountDto> discount = JsonNullable.undefined();

    @JsonProperty("discount")
    public ApiSubscriptionUpdateRequestDtoBuilder discount(ApiPaymentDiscountDto value) {
      if (value == null) {
        throw new IllegalStateException("discount cannot be null");
      }
      this.discount = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentInterestRequestDto> interest = JsonNullable.undefined();

    @JsonProperty("interest")
    public ApiSubscriptionUpdateRequestDtoBuilder interest(ApiPaymentInterestRequestDto value) {
      if (value == null) {
        throw new IllegalStateException("interest cannot be null");
      }
      this.interest = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentFineRequestDto> fine = JsonNullable.undefined();

    @JsonProperty("fine")
    public ApiSubscriptionUpdateRequestDtoBuilder fine(ApiPaymentFineRequestDto value) {
      if (value == null) {
        throw new IllegalStateException("fine cannot be null");
      }
      this.fine = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiSubscriptionUpdateRequestCycle> cycle = JsonNullable.undefined();

    @JsonProperty("cycle")
    public ApiSubscriptionUpdateRequestDtoBuilder cycle(ApiSubscriptionUpdateRequestCycle value) {
      if (value == null) {
        throw new IllegalStateException("cycle cannot be null");
      }
      this.cycle = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiSubscriptionUpdateRequestDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> endDate = JsonNullable.undefined();

    @JsonProperty("endDate")
    public ApiSubscriptionUpdateRequestDtoBuilder endDate(String value) {
      if (value == null) {
        throw new IllegalStateException("endDate cannot be null");
      }
      this.endDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> updatePendingPayments = JsonNullable.undefined();

    @JsonProperty("updatePendingPayments")
    public ApiSubscriptionUpdateRequestDtoBuilder updatePendingPayments(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("updatePendingPayments cannot be null");
      }
      this.updatePendingPayments = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiSubscriptionUpdateRequestDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<List<ApiSubscriptionSplitRequestDto>> split = JsonNullable.undefined();

    @JsonProperty("split")
    public ApiSubscriptionUpdateRequestDtoBuilder split(List<ApiSubscriptionSplitRequestDto> value) {
      if (value == null) {
        throw new IllegalStateException("split cannot be null");
      }
      this.split = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiPaymentCallbackRequestDto> callback = JsonNullable.undefined();

    @JsonProperty("callback")
    public ApiSubscriptionUpdateRequestDtoBuilder callback(ApiPaymentCallbackRequestDto value) {
      if (value == null) {
        throw new IllegalStateException("callback cannot be null");
      }
      this.callback = JsonNullable.of(value);
      return this;
    }
  }
}
