// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiSubscriptionInvoiceConfigGetResponseDto {

  /**
   * Unique municipal service identifier
   */
  @JsonProperty("municipalServiceId")
  private JsonNullable<String> municipalServiceId;

  /**
   * Municipal Service Code
   */
  @JsonProperty("municipalServiceCode")
  private JsonNullable<String> municipalServiceCode;

  /**
   * Name of municipal service
   */
  @JsonProperty("municipalServiceName")
  private JsonNullable<String> municipalServiceName;

  /**
   * Deductions. Deductions do not change the total value of the invoice, but they do change the ISS calculation basis.
   */
  @JsonProperty("deductions")
  private JsonNullable<Double> deductions;

  /**
   * When the invoice will be issued
   */
  @JsonProperty("invoiceCreationPeriod")
  private JsonNullable<InvoiceCreationPeriod> invoiceCreationPeriod;

  /**
   * Number of days before billing due date
   */
  @JsonProperty("daysBeforeDueDate")
  private JsonNullable<Long> daysBeforeDueDate;

  /**
   * Issue only for paid charges
   */
  @JsonProperty("receivedOnly")
  private JsonNullable<Boolean> receivedOnly;

  /**
   * Additional notes on the invoice
   */
  @JsonProperty("observations")
  private JsonNullable<String> observations;

  @JsonProperty("taxes")
  private JsonNullable<ApiCustomerInvoiceTaxesDto> taxes;

  @JsonIgnore
  public String getMunicipalServiceId() {
    return municipalServiceId.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalServiceCode() {
    return municipalServiceCode.orElse(null);
  }

  @JsonIgnore
  public String getMunicipalServiceName() {
    return municipalServiceName.orElse(null);
  }

  @JsonIgnore
  public Double getDeductions() {
    return deductions.orElse(null);
  }

  @JsonIgnore
  public InvoiceCreationPeriod getInvoiceCreationPeriod() {
    return invoiceCreationPeriod.orElse(null);
  }

  @JsonIgnore
  public Long getDaysBeforeDueDate() {
    return daysBeforeDueDate.orElse(null);
  }

  @JsonIgnore
  public Boolean getReceivedOnly() {
    return receivedOnly.orElse(null);
  }

  @JsonIgnore
  public String getObservations() {
    return observations.orElse(null);
  }

  @JsonIgnore
  public ApiCustomerInvoiceTaxesDto getTaxes() {
    return taxes.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiSubscriptionInvoiceConfigGetResponseDtoBuilder {

    private JsonNullable<String> municipalServiceId = JsonNullable.undefined();

    @JsonProperty("municipalServiceId")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder municipalServiceId(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalServiceId cannot be null");
      }
      this.municipalServiceId = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalServiceCode = JsonNullable.undefined();

    @JsonProperty("municipalServiceCode")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder municipalServiceCode(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalServiceCode cannot be null");
      }
      this.municipalServiceCode = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> municipalServiceName = JsonNullable.undefined();

    @JsonProperty("municipalServiceName")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder municipalServiceName(String value) {
      if (value == null) {
        throw new IllegalStateException("municipalServiceName cannot be null");
      }
      this.municipalServiceName = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> deductions = JsonNullable.undefined();

    @JsonProperty("deductions")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder deductions(Double value) {
      if (value == null) {
        throw new IllegalStateException("deductions cannot be null");
      }
      this.deductions = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<InvoiceCreationPeriod> invoiceCreationPeriod = JsonNullable.undefined();

    @JsonProperty("invoiceCreationPeriod")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder invoiceCreationPeriod(InvoiceCreationPeriod value) {
      if (value == null) {
        throw new IllegalStateException("invoiceCreationPeriod cannot be null");
      }
      this.invoiceCreationPeriod = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> daysBeforeDueDate = JsonNullable.undefined();

    @JsonProperty("daysBeforeDueDate")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder daysBeforeDueDate(Long value) {
      if (value == null) {
        throw new IllegalStateException("daysBeforeDueDate cannot be null");
      }
      this.daysBeforeDueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> receivedOnly = JsonNullable.undefined();

    @JsonProperty("receivedOnly")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder receivedOnly(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("receivedOnly cannot be null");
      }
      this.receivedOnly = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> observations = JsonNullable.undefined();

    @JsonProperty("observations")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder observations(String value) {
      if (value == null) {
        throw new IllegalStateException("observations cannot be null");
      }
      this.observations = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiCustomerInvoiceTaxesDto> taxes = JsonNullable.undefined();

    @JsonProperty("taxes")
    public ApiSubscriptionInvoiceConfigGetResponseDtoBuilder taxes(ApiCustomerInvoiceTaxesDto value) {
      if (value == null) {
        throw new IllegalStateException("taxes cannot be null");
      }
      this.taxes = JsonNullable.of(value);
      return this;
    }
  }
}
