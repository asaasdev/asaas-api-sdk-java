// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiReceivableAnticipationGetResponseDto {

  /**
   * Object type
   */
  @JsonProperty("object")
  private JsonNullable<String> object;

  /**
   * Unique identifier of anticipation in Asaas
   */
  @JsonProperty("id")
  private JsonNullable<String> id;

  /**
   * Unique identifier of the installment to be anticipated
   */
  @JsonProperty("installment")
  private JsonNullable<String> installment;

  /**
   * Unique identifier of the payment to be anticipated.
   */
  @JsonProperty("payment")
  private JsonNullable<String> payment;

  /**
   * Anticipation status
   */
  @JsonProperty("status")
  private JsonNullable<ApiReceivableAnticipationGetResponseReceivableAnticipationStatus> status;

  /**
   * Anticipation request date
   */
  @JsonProperty("anticipationDate")
  private JsonNullable<String> anticipationDate;

  /**
   * Request due date
   */
  @JsonProperty("dueDate")
  private JsonNullable<String> dueDate;

  /**
   * Anticipation request date
   */
  @JsonProperty("requestDate")
  private JsonNullable<String> requestDate;

  /**
   * Anticipation fee
   */
  @JsonProperty("fee")
  private JsonNullable<Double> fee;

  /**
   * Number of days that were anticipated
   */
  @JsonProperty("anticipationDays")
  private JsonNullable<Long> anticipationDays;

  /**
   * Net value discounted the anticipation fee
   */
  @JsonProperty("netValue")
  private JsonNullable<Double> netValue;

  /**
   * Total amount of the payment to be anticipated
   */
  @JsonProperty("totalValue")
  private JsonNullable<Double> totalValue;

  /**
   * Anticipation value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * Reason for rejecting the anticipation payment
   */
  @JsonProperty("denialObservation")
  private JsonNullable<String> denialObservation;

  @JsonIgnore
  public String getObject() {
    return object.orElse(null);
  }

  @JsonIgnore
  public String getId() {
    return id.orElse(null);
  }

  @JsonIgnore
  public String getInstallment() {
    return installment.orElse(null);
  }

  @JsonIgnore
  public String getPayment() {
    return payment.orElse(null);
  }

  @JsonIgnore
  public ApiReceivableAnticipationGetResponseReceivableAnticipationStatus getStatus() {
    return status.orElse(null);
  }

  @JsonIgnore
  public String getAnticipationDate() {
    return anticipationDate.orElse(null);
  }

  @JsonIgnore
  public String getDueDate() {
    return dueDate.orElse(null);
  }

  @JsonIgnore
  public String getRequestDate() {
    return requestDate.orElse(null);
  }

  @JsonIgnore
  public Double getFee() {
    return fee.orElse(null);
  }

  @JsonIgnore
  public Long getAnticipationDays() {
    return anticipationDays.orElse(null);
  }

  @JsonIgnore
  public Double getNetValue() {
    return netValue.orElse(null);
  }

  @JsonIgnore
  public Double getTotalValue() {
    return totalValue.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public String getDenialObservation() {
    return denialObservation.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiReceivableAnticipationGetResponseDtoBuilder {

    private JsonNullable<String> object = JsonNullable.undefined();

    @JsonProperty("object")
    public ApiReceivableAnticipationGetResponseDtoBuilder object(String value) {
      if (value == null) {
        throw new IllegalStateException("object cannot be null");
      }
      this.object = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> id = JsonNullable.undefined();

    @JsonProperty("id")
    public ApiReceivableAnticipationGetResponseDtoBuilder id(String value) {
      if (value == null) {
        throw new IllegalStateException("id cannot be null");
      }
      this.id = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> installment = JsonNullable.undefined();

    @JsonProperty("installment")
    public ApiReceivableAnticipationGetResponseDtoBuilder installment(String value) {
      if (value == null) {
        throw new IllegalStateException("installment cannot be null");
      }
      this.installment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> payment = JsonNullable.undefined();

    @JsonProperty("payment")
    public ApiReceivableAnticipationGetResponseDtoBuilder payment(String value) {
      if (value == null) {
        throw new IllegalStateException("payment cannot be null");
      }
      this.payment = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<ApiReceivableAnticipationGetResponseReceivableAnticipationStatus> status =
      JsonNullable.undefined();

    @JsonProperty("status")
    public ApiReceivableAnticipationGetResponseDtoBuilder status(
      ApiReceivableAnticipationGetResponseReceivableAnticipationStatus value
    ) {
      if (value == null) {
        throw new IllegalStateException("status cannot be null");
      }
      this.status = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> anticipationDate = JsonNullable.undefined();

    @JsonProperty("anticipationDate")
    public ApiReceivableAnticipationGetResponseDtoBuilder anticipationDate(String value) {
      if (value == null) {
        throw new IllegalStateException("anticipationDate cannot be null");
      }
      this.anticipationDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> dueDate = JsonNullable.undefined();

    @JsonProperty("dueDate")
    public ApiReceivableAnticipationGetResponseDtoBuilder dueDate(String value) {
      if (value == null) {
        throw new IllegalStateException("dueDate cannot be null");
      }
      this.dueDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> requestDate = JsonNullable.undefined();

    @JsonProperty("requestDate")
    public ApiReceivableAnticipationGetResponseDtoBuilder requestDate(String value) {
      if (value == null) {
        throw new IllegalStateException("requestDate cannot be null");
      }
      this.requestDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> fee = JsonNullable.undefined();

    @JsonProperty("fee")
    public ApiReceivableAnticipationGetResponseDtoBuilder fee(Double value) {
      if (value == null) {
        throw new IllegalStateException("fee cannot be null");
      }
      this.fee = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> anticipationDays = JsonNullable.undefined();

    @JsonProperty("anticipationDays")
    public ApiReceivableAnticipationGetResponseDtoBuilder anticipationDays(Long value) {
      if (value == null) {
        throw new IllegalStateException("anticipationDays cannot be null");
      }
      this.anticipationDays = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> netValue = JsonNullable.undefined();

    @JsonProperty("netValue")
    public ApiReceivableAnticipationGetResponseDtoBuilder netValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("netValue cannot be null");
      }
      this.netValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> totalValue = JsonNullable.undefined();

    @JsonProperty("totalValue")
    public ApiReceivableAnticipationGetResponseDtoBuilder totalValue(Double value) {
      if (value == null) {
        throw new IllegalStateException("totalValue cannot be null");
      }
      this.totalValue = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiReceivableAnticipationGetResponseDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> denialObservation = JsonNullable.undefined();

    @JsonProperty("denialObservation")
    public ApiReceivableAnticipationGetResponseDtoBuilder denialObservation(String value) {
      if (value == null) {
        throw new IllegalStateException("denialObservation cannot be null");
      }
      this.denialObservation = JsonNullable.of(value);
      return this;
    }
  }
}
