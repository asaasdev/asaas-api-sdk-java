// This file was generated by liblab | https://liblab.com/

package com.asaas.apisdk.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.With;
import lombok.extern.jackson.Jacksonized;
import org.openapitools.jackson.nullable.JsonNullable;

@Data
@Builder
@With
@ToString
@EqualsAndHashCode
@Jacksonized
public class ApiPixQrCodeSaveRequestDto {

  /**
   * Key that will receive QrCode payments
   */
  @JsonProperty("addressKey")
  private JsonNullable<String> addressKey;

  /**
   * QrCode Description
   */
  @JsonProperty("description")
  private JsonNullable<String> description;

  /**
   * Value of the QrCode, if not informed, the payer can choose the value
   */
  @JsonProperty("value")
  private JsonNullable<Double> value;

  /**
   * QrCode Format
   */
  @JsonProperty("format")
  private JsonNullable<Format> format;

  /**
   * QrCode expiration date/time, after this date all payments will be refused.
   */
  @JsonProperty("expirationDate")
  private JsonNullable<String> expirationDate;

  /**
   * Determines the expiration date in seconds.
   */
  @JsonProperty("expirationSeconds")
  private JsonNullable<Long> expirationSeconds;

  /**
   * Defines whether the QrCode can be paid multiple times, if not entered the default value is true.
   */
  @JsonProperty("allowsMultiplePayments")
  private JsonNullable<Boolean> allowsMultiplePayments;

  /**
   * Free search field
   */
  @JsonProperty("externalReference")
  private JsonNullable<String> externalReference;

  @JsonIgnore
  public String getAddressKey() {
    return addressKey.orElse(null);
  }

  @JsonIgnore
  public String getDescription() {
    return description.orElse(null);
  }

  @JsonIgnore
  public Double getValue() {
    return value.orElse(null);
  }

  @JsonIgnore
  public Format getFormat() {
    return format.orElse(null);
  }

  @JsonIgnore
  public String getExpirationDate() {
    return expirationDate.orElse(null);
  }

  @JsonIgnore
  public Long getExpirationSeconds() {
    return expirationSeconds.orElse(null);
  }

  @JsonIgnore
  public Boolean getAllowsMultiplePayments() {
    return allowsMultiplePayments.orElse(null);
  }

  @JsonIgnore
  public String getExternalReference() {
    return externalReference.orElse(null);
  }

  // Overwrite lombok builder methods
  public static class ApiPixQrCodeSaveRequestDtoBuilder {

    private JsonNullable<String> addressKey = JsonNullable.undefined();

    @JsonProperty("addressKey")
    public ApiPixQrCodeSaveRequestDtoBuilder addressKey(String value) {
      if (value == null) {
        throw new IllegalStateException("addressKey cannot be null");
      }
      this.addressKey = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> description = JsonNullable.undefined();

    @JsonProperty("description")
    public ApiPixQrCodeSaveRequestDtoBuilder description(String value) {
      if (value == null) {
        throw new IllegalStateException("description cannot be null");
      }
      this.description = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Double> value = JsonNullable.undefined();

    @JsonProperty("value")
    public ApiPixQrCodeSaveRequestDtoBuilder value(Double value) {
      if (value == null) {
        throw new IllegalStateException("value cannot be null");
      }
      this.value = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Format> format = JsonNullable.undefined();

    @JsonProperty("format")
    public ApiPixQrCodeSaveRequestDtoBuilder format(Format value) {
      if (value == null) {
        throw new IllegalStateException("format cannot be null");
      }
      this.format = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> expirationDate = JsonNullable.undefined();

    @JsonProperty("expirationDate")
    public ApiPixQrCodeSaveRequestDtoBuilder expirationDate(String value) {
      if (value == null) {
        throw new IllegalStateException("expirationDate cannot be null");
      }
      this.expirationDate = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Long> expirationSeconds = JsonNullable.undefined();

    @JsonProperty("expirationSeconds")
    public ApiPixQrCodeSaveRequestDtoBuilder expirationSeconds(Long value) {
      if (value == null) {
        throw new IllegalStateException("expirationSeconds cannot be null");
      }
      this.expirationSeconds = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<Boolean> allowsMultiplePayments = JsonNullable.undefined();

    @JsonProperty("allowsMultiplePayments")
    public ApiPixQrCodeSaveRequestDtoBuilder allowsMultiplePayments(Boolean value) {
      if (value == null) {
        throw new IllegalStateException("allowsMultiplePayments cannot be null");
      }
      this.allowsMultiplePayments = JsonNullable.of(value);
      return this;
    }

    private JsonNullable<String> externalReference = JsonNullable.undefined();

    @JsonProperty("externalReference")
    public ApiPixQrCodeSaveRequestDtoBuilder externalReference(String value) {
      if (value == null) {
        throw new IllegalStateException("externalReference cannot be null");
      }
      this.externalReference = JsonNullable.of(value);
      return this;
    }
  }
}
