// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentPathIdRequestDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SandboxActionsService Service
 */
public class SandboxActionsService extends BaseService {

  public SandboxActionsService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * (Sandbox only) Confirm payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentPathIdRequestDto {@link ApiPaymentPathIdRequestDto} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto confirmPayment(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfirmPaymentRequest(id, apiPaymentPathIdRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * (Sandbox only) Confirm payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentPathIdRequestDto {@link ApiPaymentPathIdRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> confirmPaymentAsync(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfirmPaymentRequest(id, apiPaymentPathIdRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildConfirmPaymentRequest(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/sandbox/payment/{id}/confirm"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiPaymentPathIdRequestDto)
      .build();
  }

  /**
   * (Sandbox only) Force charge overdue
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentPathIdRequestDto {@link ApiPaymentPathIdRequestDto} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto forceExpire(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildForceExpireRequest(id, apiPaymentPathIdRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * (Sandbox only) Force charge overdue
   *
   * @param id String Unique payment identifier in Asaas
   * @param apiPaymentPathIdRequestDto {@link ApiPaymentPathIdRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> forceExpireAsync(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildForceExpireRequest(id, apiPaymentPathIdRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildForceExpireRequest(
    @NonNull String id,
    @NonNull ApiPaymentPathIdRequestDto apiPaymentPathIdRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/sandbox/payment/{id}/overdue"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiPaymentPathIdRequestDto)
      .build();
  }
}
