// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerInvoiceGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.CancelAnInvoiceOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CancelAnInvoiceRequest;
import com.asaas.sdk.asaasjavasdk.models.ListInvoicesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListInvoicesParameters;
import com.asaas.sdk.asaasjavasdk.models.ScheduleInvoiceRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateInvoiceRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListInvoicesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * InvoiceService Service
 */
public class InvoiceService extends BaseService {

  public InvoiceService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List invoices
   *
   * @return response of {@code ListInvoicesOkResponse}
   */
  public ListInvoicesOkResponse listInvoices() throws ApiError, ValidationException {
    return this.listInvoices(ListInvoicesParameters.builder().build());
  }

  /**
   * List invoices
   *
   * @param requestParameters {@link ListInvoicesParameters} Request Parameters Object
   * @return response of {@code ListInvoicesOkResponse}
   */
  public ListInvoicesOkResponse listInvoices(@NonNull ListInvoicesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListInvoicesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListInvoicesOkResponse>() {});
  }

  /**
   * List invoices
   *
   * @return response of {@code CompletableFuture<ListInvoicesOkResponse>}
   */
  public CompletableFuture<ListInvoicesOkResponse> listInvoicesAsync() throws ApiError, ValidationException {
    return this.listInvoicesAsync(ListInvoicesParameters.builder().build());
  }

  /**
   * List invoices
   *
   * @param requestParameters {@link ListInvoicesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListInvoicesOkResponse>}
   */
  public CompletableFuture<ListInvoicesOkResponse> listInvoicesAsync(@NonNull ListInvoicesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListInvoicesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListInvoicesOkResponse>() {})
    );
  }

  private Request buildListInvoicesRequest(@NonNull ListInvoicesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListInvoicesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("effectiveDate[Ge]", requestParameters.getEffectiveDateGe())
      .setOptionalQueryParameter("effectiveDate[Le]", requestParameters.getEffectiveDateLe())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Schedule invoice
   *
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto scheduleInvoice() throws ApiError {
    return this.scheduleInvoice(ScheduleInvoiceRequest.builder().build());
  }

  /**
   * Schedule invoice
   *
   * @param scheduleInvoiceRequest {@link ScheduleInvoiceRequest} Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto scheduleInvoice(@NonNull ScheduleInvoiceRequest scheduleInvoiceRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildScheduleInvoiceRequest(scheduleInvoiceRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Schedule invoice
   *
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> scheduleInvoiceAsync() throws ApiError {
    return this.scheduleInvoiceAsync(ScheduleInvoiceRequest.builder().build());
  }

  /**
   * Schedule invoice
   *
   * @param scheduleInvoiceRequest {@link ScheduleInvoiceRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> scheduleInvoiceAsync(
    @NonNull ScheduleInvoiceRequest scheduleInvoiceRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildScheduleInvoiceRequest(scheduleInvoiceRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildScheduleInvoiceRequest(@NonNull ScheduleInvoiceRequest scheduleInvoiceRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(scheduleInvoiceRequest)
      .build();
  }

  /**
   * Retrieve a single invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto retrieveASingleInvoice(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleInvoiceRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Retrieve a single invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> retrieveASingleInvoiceAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleInvoiceRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleInvoiceRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param updateInvoiceRequest {@link UpdateInvoiceRequest} Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto updateInvoice(
    @NonNull String id,
    @NonNull UpdateInvoiceRequest updateInvoiceRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateInvoiceRequest(id, updateInvoiceRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Update invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param updateInvoiceRequest {@link UpdateInvoiceRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> updateInvoiceAsync(
    @NonNull String id,
    @NonNull UpdateInvoiceRequest updateInvoiceRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateInvoiceRequest(id, updateInvoiceRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildUpdateInvoiceRequest(@NonNull String id, @NonNull UpdateInvoiceRequest updateInvoiceRequest) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateInvoiceRequest)
      .build();
  }

  /**
   * Issue an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiCustomerInvoiceGetResponseDto}
   */
  public ApiCustomerInvoiceGetResponseDto issueAnInvoice(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildIssueAnInvoiceRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {});
  }

  /**
   * Issue an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceGetResponseDto> issueAnInvoiceAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildIssueAnInvoiceRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceGetResponseDto>() {})
    );
  }

  private Request buildIssueAnInvoiceRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}/authorize"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Cancel an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param cancelAnInvoiceRequest {@link CancelAnInvoiceRequest} Request Body
   * @return response of {@code CancelAnInvoiceOkResponse}
   */
  public CancelAnInvoiceOkResponse cancelAnInvoice(
    @NonNull String id,
    @NonNull CancelAnInvoiceRequest cancelAnInvoiceRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAnInvoiceRequest(id, cancelAnInvoiceRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CancelAnInvoiceOkResponse>() {});
  }

  /**
   * Cancel an invoice
   *
   * @param id String Unique invoice identifier in Asaas
   * @param cancelAnInvoiceRequest {@link CancelAnInvoiceRequest} Request Body
   * @return response of {@code CompletableFuture<CancelAnInvoiceOkResponse>}
   */
  public CompletableFuture<CancelAnInvoiceOkResponse> cancelAnInvoiceAsync(
    @NonNull String id,
    @NonNull CancelAnInvoiceRequest cancelAnInvoiceRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAnInvoiceRequest(id, cancelAnInvoiceRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CancelAnInvoiceOkResponse>() {})
    );
  }

  private Request buildCancelAnInvoiceRequest(
    @NonNull String id,
    @NonNull CancelAnInvoiceRequest cancelAnInvoiceRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/invoices/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(cancelAnInvoiceRequest)
      .build();
  }
}
