// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCheckoutSessionResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCheckoutSessionSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ApiCheckoutSessionSaveRequestDtoValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CheckoutService Service
 */
public class CheckoutService extends BaseService {

  public CheckoutService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Create new checkout
   *
   * @return response of {@code ApiCheckoutSessionResponseDto}
   */
  public ApiCheckoutSessionResponseDto createNewCheckout() throws ApiError, ValidationException {
    return this.createNewCheckout(ApiCheckoutSessionSaveRequestDto.builder().build());
  }

  /**
   * Create new checkout
   *
   * @param apiCheckoutSessionSaveRequestDto {@link ApiCheckoutSessionSaveRequestDto} Request Body
   * @return response of {@code ApiCheckoutSessionResponseDto}
   */
  public ApiCheckoutSessionResponseDto createNewCheckout(
    @NonNull ApiCheckoutSessionSaveRequestDto apiCheckoutSessionSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateNewCheckoutRequest(apiCheckoutSessionSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCheckoutSessionResponseDto>() {});
  }

  /**
   * Create new checkout
   *
   * @return response of {@code CompletableFuture<ApiCheckoutSessionResponseDto>}
   */
  public CompletableFuture<ApiCheckoutSessionResponseDto> createNewCheckoutAsync()
    throws ApiError, ValidationException {
    return this.createNewCheckoutAsync(ApiCheckoutSessionSaveRequestDto.builder().build());
  }

  /**
   * Create new checkout
   *
   * @param apiCheckoutSessionSaveRequestDto {@link ApiCheckoutSessionSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCheckoutSessionResponseDto>}
   */
  public CompletableFuture<ApiCheckoutSessionResponseDto> createNewCheckoutAsync(
    @NonNull ApiCheckoutSessionSaveRequestDto apiCheckoutSessionSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreateNewCheckoutRequest(apiCheckoutSessionSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCheckoutSessionResponseDto>() {})
    );
  }

  private Request buildCreateNewCheckoutRequest(
    @NonNull ApiCheckoutSessionSaveRequestDto apiCheckoutSessionSaveRequestDto
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ApiCheckoutSessionSaveRequestDtoValidator("apiCheckoutSessionSaveRequestDto")
          .optional()
          .validate(apiCheckoutSessionSaveRequestDto)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/checkouts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCheckoutSessionSaveRequestDto)
      .build();
  }

  /**
   * Cancel a checkout
   *
   * @param id String Unique identifier of checkout in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiCheckoutSessionResponseDto}
   */
  public ApiCheckoutSessionResponseDto cancelACheckout(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelACheckoutRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCheckoutSessionResponseDto>() {});
  }

  /**
   * Cancel a checkout
   *
   * @param id String Unique identifier of checkout in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiCheckoutSessionResponseDto>}
   */
  public CompletableFuture<ApiCheckoutSessionResponseDto> cancelACheckoutAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCancelACheckoutRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCheckoutSessionResponseDto>() {})
    );
  }

  private Request buildCancelACheckoutRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/checkouts/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
