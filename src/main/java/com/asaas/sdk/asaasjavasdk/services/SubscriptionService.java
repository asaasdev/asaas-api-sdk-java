// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerInvoiceListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiSubscriptionGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiSubscriptionInvoiceConfigGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.CreateConfigurationForIssuanceOfInvoicesRequest;
import com.asaas.sdk.asaasjavasdk.models.CreateNewSubscriptionRequest;
import com.asaas.sdk.asaasjavasdk.models.CreateSubscriptionWithCreditCardOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CreateSubscriptionWithCreditCardRequest;
import com.asaas.sdk.asaasjavasdk.models.GenerateSignatureBookletParameters;
import com.asaas.sdk.asaasjavasdk.models.ListInvoicesForSubscriptionChargesParameters;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsOfASubscriptionParameters;
import com.asaas.sdk.asaasjavasdk.models.ListSubscriptionsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListSubscriptionsParameters;
import com.asaas.sdk.asaasjavasdk.models.RemoveConfigurationForIssuanceOfInvoicesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RemoveSubscriptionOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveConfigurationForIssuanceOfInvoicesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.UpdateConfigurationForIssuanceOfInvoicesRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateExistingSubscriptionRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateSubscriptionCreditCardOkResponse;
import com.asaas.sdk.asaasjavasdk.models.UpdateSubscriptionCreditCardRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListInvoicesForSubscriptionChargesParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListSubscriptionsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SubscriptionService Service
 */
public class SubscriptionService extends BaseService {

  public SubscriptionService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List subscriptions
   *
   * @return response of {@code ListSubscriptionsOkResponse}
   */
  public ListSubscriptionsOkResponse listSubscriptions() throws ApiError, ValidationException {
    return this.listSubscriptions(ListSubscriptionsParameters.builder().build());
  }

  /**
   * List subscriptions
   *
   * @param requestParameters {@link ListSubscriptionsParameters} Request Parameters Object
   * @return response of {@code ListSubscriptionsOkResponse}
   */
  public ListSubscriptionsOkResponse listSubscriptions(@NonNull ListSubscriptionsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListSubscriptionsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListSubscriptionsOkResponse>() {});
  }

  /**
   * List subscriptions
   *
   * @return response of {@code CompletableFuture<ListSubscriptionsOkResponse>}
   */
  public CompletableFuture<ListSubscriptionsOkResponse> listSubscriptionsAsync() throws ApiError, ValidationException {
    return this.listSubscriptionsAsync(ListSubscriptionsParameters.builder().build());
  }

  /**
   * List subscriptions
   *
   * @param requestParameters {@link ListSubscriptionsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListSubscriptionsOkResponse>}
   */
  public CompletableFuture<ListSubscriptionsOkResponse> listSubscriptionsAsync(
    @NonNull ListSubscriptionsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListSubscriptionsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListSubscriptionsOkResponse>() {})
    );
  }

  private Request buildListSubscriptionsRequest(@NonNull ListSubscriptionsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListSubscriptionsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("customerGroupName", requestParameters.getCustomerGroupName())
      .setOptionalQueryParameter("deletedOnly", requestParameters.getDeletedOnly())
      .setOptionalQueryParameter("includeDeleted", requestParameters.getIncludeDeleted())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .setOptionalQueryParameter("sort", requestParameters.getSort());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create new subscription
   *
   * @return response of {@code ApiSubscriptionGetResponseDto}
   */
  public ApiSubscriptionGetResponseDto createNewSubscription() throws ApiError {
    return this.createNewSubscription(CreateNewSubscriptionRequest.builder().build());
  }

  /**
   * Create new subscription
   *
   * @param createNewSubscriptionRequest {@link CreateNewSubscriptionRequest} Request Body
   * @return response of {@code ApiSubscriptionGetResponseDto}
   */
  public ApiSubscriptionGetResponseDto createNewSubscription(
    @NonNull CreateNewSubscriptionRequest createNewSubscriptionRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewSubscriptionRequest(createNewSubscriptionRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {});
  }

  /**
   * Create new subscription
   *
   * @return response of {@code CompletableFuture<ApiSubscriptionGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionGetResponseDto> createNewSubscriptionAsync() throws ApiError {
    return this.createNewSubscriptionAsync(CreateNewSubscriptionRequest.builder().build());
  }

  /**
   * Create new subscription
   *
   * @param createNewSubscriptionRequest {@link CreateNewSubscriptionRequest} Request Body
   * @return response of {@code CompletableFuture<ApiSubscriptionGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionGetResponseDto> createNewSubscriptionAsync(
    @NonNull CreateNewSubscriptionRequest createNewSubscriptionRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewSubscriptionRequest(createNewSubscriptionRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {})
    );
  }

  private Request buildCreateNewSubscriptionRequest(
    @NonNull CreateNewSubscriptionRequest createNewSubscriptionRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createNewSubscriptionRequest)
      .build();
  }

  /**
   * Create subscription with credit card
   *
   * @return response of {@code CreateSubscriptionWithCreditCardOkResponse}
   */
  public CreateSubscriptionWithCreditCardOkResponse createSubscriptionWithCreditCard() throws ApiError {
    return this.createSubscriptionWithCreditCard(CreateSubscriptionWithCreditCardRequest.builder().build());
  }

  /**
   * Create subscription with credit card
   *
   * @param createSubscriptionWithCreditCardRequest {@link CreateSubscriptionWithCreditCardRequest} Request Body
   * @return response of {@code CreateSubscriptionWithCreditCardOkResponse}
   */
  public CreateSubscriptionWithCreditCardOkResponse createSubscriptionWithCreditCard(
    @NonNull CreateSubscriptionWithCreditCardRequest createSubscriptionWithCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateSubscriptionWithCreditCardRequest(createSubscriptionWithCreditCardRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CreateSubscriptionWithCreditCardOkResponse>() {});
  }

  /**
   * Create subscription with credit card
   *
   * @return response of {@code CompletableFuture<CreateSubscriptionWithCreditCardOkResponse>}
   */
  public CompletableFuture<CreateSubscriptionWithCreditCardOkResponse> createSubscriptionWithCreditCardAsync()
    throws ApiError {
    return this.createSubscriptionWithCreditCardAsync(CreateSubscriptionWithCreditCardRequest.builder().build());
  }

  /**
   * Create subscription with credit card
   *
   * @param createSubscriptionWithCreditCardRequest {@link CreateSubscriptionWithCreditCardRequest} Request Body
   * @return response of {@code CompletableFuture<CreateSubscriptionWithCreditCardOkResponse>}
   */
  public CompletableFuture<CreateSubscriptionWithCreditCardOkResponse> createSubscriptionWithCreditCardAsync(
    @NonNull CreateSubscriptionWithCreditCardRequest createSubscriptionWithCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateSubscriptionWithCreditCardRequest(createSubscriptionWithCreditCardRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CreateSubscriptionWithCreditCardOkResponse>() {})
    );
  }

  private Request buildCreateSubscriptionWithCreditCardRequest(
    @NonNull CreateSubscriptionWithCreditCardRequest createSubscriptionWithCreditCardRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createSubscriptionWithCreditCardRequest)
      .build();
  }

  /**
   * Retrieve a single subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code ApiSubscriptionGetResponseDto}
   */
  public ApiSubscriptionGetResponseDto retrieveASingleSubscription(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleSubscriptionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {});
  }

  /**
   * Retrieve a single subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<ApiSubscriptionGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionGetResponseDto> retrieveASingleSubscriptionAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleSubscriptionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleSubscriptionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateExistingSubscriptionRequest {@link UpdateExistingSubscriptionRequest} Request Body
   * @return response of {@code ApiSubscriptionGetResponseDto}
   */
  public ApiSubscriptionGetResponseDto updateExistingSubscription(
    @NonNull String id,
    @NonNull UpdateExistingSubscriptionRequest updateExistingSubscriptionRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingSubscriptionRequest(id, updateExistingSubscriptionRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {});
  }

  /**
   * Update existing subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateExistingSubscriptionRequest {@link UpdateExistingSubscriptionRequest} Request Body
   * @return response of {@code CompletableFuture<ApiSubscriptionGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionGetResponseDto> updateExistingSubscriptionAsync(
    @NonNull String id,
    @NonNull UpdateExistingSubscriptionRequest updateExistingSubscriptionRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingSubscriptionRequest(id, updateExistingSubscriptionRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiSubscriptionGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingSubscriptionRequest(
    @NonNull String id,
    @NonNull UpdateExistingSubscriptionRequest updateExistingSubscriptionRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateExistingSubscriptionRequest)
      .build();
  }

  /**
   * Remove subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code RemoveSubscriptionOkResponse}
   */
  public RemoveSubscriptionOkResponse removeSubscription(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveSubscriptionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RemoveSubscriptionOkResponse>() {});
  }

  /**
   * Remove subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<RemoveSubscriptionOkResponse>}
   */
  public CompletableFuture<RemoveSubscriptionOkResponse> removeSubscriptionAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveSubscriptionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RemoveSubscriptionOkResponse>() {})
    );
  }

  private Request buildRemoveSubscriptionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update credit card without charging the subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateSubscriptionCreditCardRequest {@link UpdateSubscriptionCreditCardRequest} Request Body
   * @return response of {@code UpdateSubscriptionCreditCardOkResponse}
   */
  public UpdateSubscriptionCreditCardOkResponse updateSubscriptionCreditCard(
    @NonNull String id,
    @NonNull UpdateSubscriptionCreditCardRequest updateSubscriptionCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateSubscriptionCreditCardRequest(id, updateSubscriptionCreditCardRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<UpdateSubscriptionCreditCardOkResponse>() {});
  }

  /**
   * Update credit card without charging the subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateSubscriptionCreditCardRequest {@link UpdateSubscriptionCreditCardRequest} Request Body
   * @return response of {@code CompletableFuture<UpdateSubscriptionCreditCardOkResponse>}
   */
  public CompletableFuture<UpdateSubscriptionCreditCardOkResponse> updateSubscriptionCreditCardAsync(
    @NonNull String id,
    @NonNull UpdateSubscriptionCreditCardRequest updateSubscriptionCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateSubscriptionCreditCardRequest(id, updateSubscriptionCreditCardRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<UpdateSubscriptionCreditCardOkResponse>() {})
    );
  }

  private Request buildUpdateSubscriptionCreditCardRequest(
    @NonNull String id,
    @NonNull UpdateSubscriptionCreditCardRequest updateSubscriptionCreditCardRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/creditCard"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateSubscriptionCreditCardRequest)
      .build();
  }

  /**
   * List payments of a subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfASubscriptionParameters} Request Parameters Object
   * @return response of {@code ApiPaymentListResponseDto}
   */
  public ApiPaymentListResponseDto listPaymentsOfASubscription(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsOfASubscriptionRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentListResponseDto>() {});
  }

  /**
   * List payments of a subscription
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListPaymentsOfASubscriptionParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPaymentListResponseDto>}
   */
  public CompletableFuture<ApiPaymentListResponseDto> listPaymentsOfASubscriptionAsync(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsOfASubscriptionRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentListResponseDto>() {})
    );
  }

  private Request buildListPaymentsOfASubscriptionRequest(
    @NonNull String id,
    @NonNull ListPaymentsOfASubscriptionParameters requestParameters
  ) {
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id);
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Generate subscription booklet
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link GenerateSignatureBookletParameters} Request Parameters Object
   * @return response of {@code Object}
   */
  public Object generateSignatureBooklet(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGenerateSignatureBookletRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<Object>() {});
  }

  /**
   * Generate subscription booklet
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link GenerateSignatureBookletParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<Object>}
   */
  public CompletableFuture<Object> generateSignatureBookletAsync(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGenerateSignatureBookletRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response -> ModelConverter.convert(response, new TypeReference<Object>() {}));
  }

  private Request buildGenerateSignatureBookletRequest(
    @NonNull String id,
    @NonNull GenerateSignatureBookletParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/paymentBook"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("month", requestParameters.getMonth())
      .setOptionalQueryParameter("year", requestParameters.getYear())
      .setOptionalQueryParameter("sort", requestParameters.getSort())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .build();
  }

  /**
   * Retrieve configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code RetrieveConfigurationForIssuanceOfInvoicesOkResponse}
   */
  public RetrieveConfigurationForIssuanceOfInvoicesOkResponse retrieveConfigurationForIssuanceOfInvoices(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveConfigurationForIssuanceOfInvoicesRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<RetrieveConfigurationForIssuanceOfInvoicesOkResponse>() {}
    );
  }

  /**
   * Retrieve configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<RetrieveConfigurationForIssuanceOfInvoicesOkResponse>}
   */
  public CompletableFuture<
    RetrieveConfigurationForIssuanceOfInvoicesOkResponse
  > retrieveConfigurationForIssuanceOfInvoicesAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveConfigurationForIssuanceOfInvoicesRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveConfigurationForIssuanceOfInvoicesOkResponse>() {})
    );
  }

  private Request buildRetrieveConfigurationForIssuanceOfInvoicesRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Create configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param createConfigurationForIssuanceOfInvoicesRequest {@link CreateConfigurationForIssuanceOfInvoicesRequest} Request Body
   * @return response of {@code ApiSubscriptionInvoiceConfigGetResponseDto}
   */
  public ApiSubscriptionInvoiceConfigGetResponseDto createConfigurationForIssuanceOfInvoices(
    @NonNull String id,
    @NonNull CreateConfigurationForIssuanceOfInvoicesRequest createConfigurationForIssuanceOfInvoicesRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildCreateConfigurationForIssuanceOfInvoicesRequest(id, createConfigurationForIssuanceOfInvoicesRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiSubscriptionInvoiceConfigGetResponseDto>() {});
  }

  /**
   * Create configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param createConfigurationForIssuanceOfInvoicesRequest {@link CreateConfigurationForIssuanceOfInvoicesRequest} Request Body
   * @return response of {@code CompletableFuture<ApiSubscriptionInvoiceConfigGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionInvoiceConfigGetResponseDto> createConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id,
    @NonNull CreateConfigurationForIssuanceOfInvoicesRequest createConfigurationForIssuanceOfInvoicesRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildCreateConfigurationForIssuanceOfInvoicesRequest(id, createConfigurationForIssuanceOfInvoicesRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiSubscriptionInvoiceConfigGetResponseDto>() {})
    );
  }

  private Request buildCreateConfigurationForIssuanceOfInvoicesRequest(
    @NonNull String id,
    @NonNull CreateConfigurationForIssuanceOfInvoicesRequest createConfigurationForIssuanceOfInvoicesRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(createConfigurationForIssuanceOfInvoicesRequest)
      .build();
  }

  /**
   * Update configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateConfigurationForIssuanceOfInvoicesRequest {@link UpdateConfigurationForIssuanceOfInvoicesRequest} Request Body
   * @return response of {@code ApiSubscriptionInvoiceConfigGetResponseDto}
   */
  public ApiSubscriptionInvoiceConfigGetResponseDto updateConfigurationForIssuanceOfInvoices(
    @NonNull String id,
    @NonNull UpdateConfigurationForIssuanceOfInvoicesRequest updateConfigurationForIssuanceOfInvoicesRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildUpdateConfigurationForIssuanceOfInvoicesRequest(id, updateConfigurationForIssuanceOfInvoicesRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiSubscriptionInvoiceConfigGetResponseDto>() {});
  }

  /**
   * Update configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @param updateConfigurationForIssuanceOfInvoicesRequest {@link UpdateConfigurationForIssuanceOfInvoicesRequest} Request Body
   * @return response of {@code CompletableFuture<ApiSubscriptionInvoiceConfigGetResponseDto>}
   */
  public CompletableFuture<ApiSubscriptionInvoiceConfigGetResponseDto> updateConfigurationForIssuanceOfInvoicesAsync(
    @NonNull String id,
    @NonNull UpdateConfigurationForIssuanceOfInvoicesRequest updateConfigurationForIssuanceOfInvoicesRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildUpdateConfigurationForIssuanceOfInvoicesRequest(id, updateConfigurationForIssuanceOfInvoicesRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiSubscriptionInvoiceConfigGetResponseDto>() {})
    );
  }

  private Request buildUpdateConfigurationForIssuanceOfInvoicesRequest(
    @NonNull String id,
    @NonNull UpdateConfigurationForIssuanceOfInvoicesRequest updateConfigurationForIssuanceOfInvoicesRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateConfigurationForIssuanceOfInvoicesRequest)
      .build();
  }

  /**
   * Remove configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code RemoveConfigurationForIssuanceOfInvoicesOkResponse}
   */
  public RemoveConfigurationForIssuanceOfInvoicesOkResponse removeConfigurationForIssuanceOfInvoices(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveConfigurationForIssuanceOfInvoicesRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RemoveConfigurationForIssuanceOfInvoicesOkResponse>() {});
  }

  /**
   * Remove configuration for issuing invoices
   *
   * @param id String Unique subscription identifier in Asaas
   * @return response of {@code CompletableFuture<RemoveConfigurationForIssuanceOfInvoicesOkResponse>}
   */
  public CompletableFuture<
    RemoveConfigurationForIssuanceOfInvoicesOkResponse
  > removeConfigurationForIssuanceOfInvoicesAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveConfigurationForIssuanceOfInvoicesRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RemoveConfigurationForIssuanceOfInvoicesOkResponse>() {})
    );
  }

  private Request buildRemoveConfigurationForIssuanceOfInvoicesRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoiceSettings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List invoices for subscription charges
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListInvoicesForSubscriptionChargesParameters} Request Parameters Object
   * @return response of {@code ApiCustomerInvoiceListResponseDto}
   */
  public ApiCustomerInvoiceListResponseDto listInvoicesForSubscriptionCharges(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListInvoicesForSubscriptionChargesRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceListResponseDto>() {});
  }

  /**
   * List invoices for subscription charges
   *
   * @param id String Unique subscription identifier in Asaas
   * @param requestParameters {@link ListInvoicesForSubscriptionChargesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerInvoiceListResponseDto>}
   */
  public CompletableFuture<ApiCustomerInvoiceListResponseDto> listInvoicesForSubscriptionChargesAsync(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListInvoicesForSubscriptionChargesRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerInvoiceListResponseDto>() {})
    );
  }

  private Request buildListInvoicesForSubscriptionChargesRequest(
    @NonNull String id,
    @NonNull ListInvoicesForSubscriptionChargesParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ListInvoicesForSubscriptionChargesParametersValidator("requestParameters")
          .optional()
          .validate(requestParameters)
      )
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/subscriptions/{id}/invoices"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("effectiveDate[ge]", requestParameters.getEffectiveDateGe())
      .setOptionalQueryParameter("effectiveDate[le]", requestParameters.getEffectiveDateLe())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }
}
