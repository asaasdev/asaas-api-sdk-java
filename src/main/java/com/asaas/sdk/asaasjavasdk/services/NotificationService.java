// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiNotificationGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiNotificationUpdateRequestDto;
import com.asaas.sdk.asaasjavasdk.models.UpdateExistingNotificationsInBatchOkResponse;
import com.asaas.sdk.asaasjavasdk.models.UpdateExistingNotificationsInBatchRequest;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * NotificationService Service
 */
public class NotificationService extends BaseService {

  public NotificationService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Update existing notification
   *
   * @param id String Unique identifier of the notification to be updated
   * @param apiNotificationUpdateRequestDto {@link ApiNotificationUpdateRequestDto} Request Body
   * @return response of {@code ApiNotificationGetResponseDto}
   */
  public ApiNotificationGetResponseDto updateExistingNotification(
    @NonNull String id,
    @NonNull ApiNotificationUpdateRequestDto apiNotificationUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingNotificationRequest(id, apiNotificationUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiNotificationGetResponseDto>() {});
  }

  /**
   * Update existing notification
   *
   * @param id String Unique identifier of the notification to be updated
   * @param apiNotificationUpdateRequestDto {@link ApiNotificationUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiNotificationGetResponseDto>}
   */
  public CompletableFuture<ApiNotificationGetResponseDto> updateExistingNotificationAsync(
    @NonNull String id,
    @NonNull ApiNotificationUpdateRequestDto apiNotificationUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingNotificationRequest(id, apiNotificationUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiNotificationGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingNotificationRequest(
    @NonNull String id,
    @NonNull ApiNotificationUpdateRequestDto apiNotificationUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/notifications/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiNotificationUpdateRequestDto)
      .build();
  }

  /**
   * Update existing notifications in batch
   *
   * @return response of {@code UpdateExistingNotificationsInBatchOkResponse}
   */
  public UpdateExistingNotificationsInBatchOkResponse updateExistingNotificationsInBatch() throws ApiError {
    return this.updateExistingNotificationsInBatch(UpdateExistingNotificationsInBatchRequest.builder().build());
  }

  /**
   * Update existing notifications in batch
   *
   * @param updateExistingNotificationsInBatchRequest {@link UpdateExistingNotificationsInBatchRequest} Request Body
   * @return response of {@code UpdateExistingNotificationsInBatchOkResponse}
   */
  public UpdateExistingNotificationsInBatchOkResponse updateExistingNotificationsInBatch(
    @NonNull UpdateExistingNotificationsInBatchRequest updateExistingNotificationsInBatchRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingNotificationsInBatchRequest(updateExistingNotificationsInBatchRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<UpdateExistingNotificationsInBatchOkResponse>() {});
  }

  /**
   * Update existing notifications in batch
   *
   * @return response of {@code CompletableFuture<UpdateExistingNotificationsInBatchOkResponse>}
   */
  public CompletableFuture<UpdateExistingNotificationsInBatchOkResponse> updateExistingNotificationsInBatchAsync()
    throws ApiError {
    return this.updateExistingNotificationsInBatchAsync(UpdateExistingNotificationsInBatchRequest.builder().build());
  }

  /**
   * Update existing notifications in batch
   *
   * @param updateExistingNotificationsInBatchRequest {@link UpdateExistingNotificationsInBatchRequest} Request Body
   * @return response of {@code CompletableFuture<UpdateExistingNotificationsInBatchOkResponse>}
   */
  public CompletableFuture<UpdateExistingNotificationsInBatchOkResponse> updateExistingNotificationsInBatchAsync(
    @NonNull UpdateExistingNotificationsInBatchRequest updateExistingNotificationsInBatchRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingNotificationsInBatchRequest(updateExistingNotificationsInBatchRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<UpdateExistingNotificationsInBatchOkResponse>() {})
    );
  }

  private Request buildUpdateExistingNotificationsInBatchRequest(
    @NonNull UpdateExistingNotificationsInBatchRequest updateExistingNotificationsInBatchRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/notifications/batch"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(updateExistingNotificationsInBatchRequest)
      .build();
  }
}
