// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoListMunicipalServicesResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ListMunicipalServicesParameters;
import com.asaas.sdk.asaasjavasdk.models.ListNbsCodesParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListMunicipalServicesParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListNbsCodesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * FiscalInfoService Service
 */
public class FiscalInfoService extends BaseService {

  public FiscalInfoService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto}
   */
  public ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto listMunicipalConfigurations() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto>() {}
    );
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto> listMunicipalConfigurationsAsync()
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoMunicipalOptionsGetResponseDto>() {})
    );
  }

  private Request buildListMunicipalConfigurationsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/municipalOptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto retrieveTaxInformation() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {});
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> retrieveTaxInformationAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {})
    );
  }

  private Request buildRetrieveTaxInformationRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Create and update tax information
   *
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto createAndUpdateTaxInformation() throws ApiError {
    return this.createAndUpdateTaxInformation(ApiCustomerFiscalInfoSaveRequestDto.builder().build(), null);
  }

  /**
   * Create and update tax information
   *
   * @param apiCustomerFiscalInfoSaveRequestDto {@link ApiCustomerFiscalInfoSaveRequestDto} Request Body
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto createAndUpdateTaxInformation(
    @NonNull ApiCustomerFiscalInfoSaveRequestDto apiCustomerFiscalInfoSaveRequestDto
  ) throws ApiError {
    return this.createAndUpdateTaxInformation(apiCustomerFiscalInfoSaveRequestDto, null);
  }

  /**
   * Create and update tax information
   *
   * @param apiCustomerFiscalInfoSaveRequestDto {@link ApiCustomerFiscalInfoSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto createAndUpdateTaxInformation(
    @NonNull ApiCustomerFiscalInfoSaveRequestDto apiCustomerFiscalInfoSaveRequestDto,
    String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(apiCustomerFiscalInfoSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {});
  }

  /**
   * Create and update tax information
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync() throws ApiError {
    return this.createAndUpdateTaxInformationAsync(ApiCustomerFiscalInfoSaveRequestDto.builder().build(), null);
  }

  /**
   * Create and update tax information
   *
   * @param apiCustomerFiscalInfoSaveRequestDto {@link ApiCustomerFiscalInfoSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync(
    @NonNull ApiCustomerFiscalInfoSaveRequestDto apiCustomerFiscalInfoSaveRequestDto
  ) throws ApiError {
    return this.createAndUpdateTaxInformationAsync(apiCustomerFiscalInfoSaveRequestDto, null);
  }

  /**
   * Create and update tax information
   *
   * @param apiCustomerFiscalInfoSaveRequestDto {@link ApiCustomerFiscalInfoSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync(
    @NonNull ApiCustomerFiscalInfoSaveRequestDto apiCustomerFiscalInfoSaveRequestDto,
    String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(apiCustomerFiscalInfoSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {})
    );
  }

  private Request buildCreateAndUpdateTaxInformationRequest(
    @NonNull ApiCustomerFiscalInfoSaveRequestDto apiCustomerFiscalInfoSaveRequestDto,
    String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("email", apiCustomerFiscalInfoSaveRequestDto.getEmail())
      .addFormDataPart("municipalInscription", apiCustomerFiscalInfoSaveRequestDto.getMunicipalInscription())
      .addFormDataPart("simplesNacional", apiCustomerFiscalInfoSaveRequestDto.getSimplesNacional().toString())
      .addFormDataPart("cnae", apiCustomerFiscalInfoSaveRequestDto.getCnae())
      .addFormDataPart("specialTaxRegime", apiCustomerFiscalInfoSaveRequestDto.getSpecialTaxRegime())
      .addFormDataPart("serviceListItem", apiCustomerFiscalInfoSaveRequestDto.getServiceListItem())
      .addFormDataPart("nbsCode", apiCustomerFiscalInfoSaveRequestDto.getNbsCode())
      .addFormDataPart("rpsSerie", apiCustomerFiscalInfoSaveRequestDto.getRpsSerie())
      .addFormDataPart("username", apiCustomerFiscalInfoSaveRequestDto.getUsername())
      .addFormDataPart("password", apiCustomerFiscalInfoSaveRequestDto.getPassword())
      .addFormDataPart("accessToken", apiCustomerFiscalInfoSaveRequestDto.getAccessToken())
      .addFormDataPart("certificatePassword", apiCustomerFiscalInfoSaveRequestDto.getCertificatePassword())
      .addFormDataPart(
        "nationalPortalTaxCalculationRegime",
        apiCustomerFiscalInfoSaveRequestDto.getNationalPortalTaxCalculationRegime()
      );
    if (apiCustomerFiscalInfoSaveRequestDto.getCulturalProjectsPromoter() != null) {
      multipartBodyBuilder.addFormDataPart(
        "culturalProjectsPromoter",
        apiCustomerFiscalInfoSaveRequestDto.getCulturalProjectsPromoter().toString()
      );
    }
    if (apiCustomerFiscalInfoSaveRequestDto.getRpsNumber() != null) {
      multipartBodyBuilder.addFormDataPart("rpsNumber", apiCustomerFiscalInfoSaveRequestDto.getRpsNumber().toString());
    }
    if (apiCustomerFiscalInfoSaveRequestDto.getLoteNumber() != null) {
      multipartBodyBuilder.addFormDataPart(
        "loteNumber",
        apiCustomerFiscalInfoSaveRequestDto.getLoteNumber().toString()
      );
    }
    if (apiCustomerFiscalInfoSaveRequestDto.getCertificateFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "certificateFile",
        _filename != null ? _filename : String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          apiCustomerFiscalInfoSaveRequestDto.getCertificateFile(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * List municipal services
   *
   * @return response of {@code ApiCustomerFiscalInfoListMunicipalServicesResponseDto}
   */
  public ApiCustomerFiscalInfoListMunicipalServicesResponseDto listMunicipalServices()
    throws ApiError, ValidationException {
    return this.listMunicipalServices(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code ApiCustomerFiscalInfoListMunicipalServicesResponseDto}
   */
  public ApiCustomerFiscalInfoListMunicipalServicesResponseDto listMunicipalServices(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiCustomerFiscalInfoListMunicipalServicesResponseDto>() {}
    );
  }

  /**
   * List municipal services
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoListMunicipalServicesResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoListMunicipalServicesResponseDto> listMunicipalServicesAsync()
    throws ApiError, ValidationException {
    return this.listMunicipalServicesAsync(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoListMunicipalServicesResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoListMunicipalServicesResponseDto> listMunicipalServicesAsync(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoListMunicipalServicesResponseDto>() {})
    );
  }

  private Request buildListMunicipalServicesRequest(@NonNull ListMunicipalServicesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListMunicipalServicesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/services"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("description", requestParameters.getDescription())
      .build();
  }

  /**
   * List NBS codes
   *
   * @return response of {@code ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto}
   */
  public ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto listNbsCodes() throws ApiError, ValidationException {
    return this.listNbsCodes(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto}
   */
  public ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto listNbsCodes(
    @NonNull ListNbsCodesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto>() {}
    );
  }

  /**
   * List NBS codes
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto> listNbsCodesAsync()
    throws ApiError, ValidationException {
    return this.listNbsCodesAsync(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto> listNbsCodesAsync(
    @NonNull ListNbsCodesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoListInvoiceNbsCodesResponseDto>() {})
    );
  }

  private Request buildListNbsCodesRequest(@NonNull ListNbsCodesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListNbsCodesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nbsCodes"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("codeDescription", requestParameters.getCodeDescription())
      .build();
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto}
   */
  public ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto configureInvoiceIssuingPortal() throws ApiError {
    return this.configureInvoiceIssuingPortal(ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto.builder().build());
  }

  /**
   * Configure invoice issuing portal
   *
   * @param apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto {@link ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto} Request Body
   * @return response of {@code ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto}
   */
  public ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto configureInvoiceIssuingPortal(
    @NonNull ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildConfigureInvoiceIssuingPortalRequest(apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto>() {}
    );
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto>}
   */
  public CompletableFuture<
    ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto
  > configureInvoiceIssuingPortalAsync() throws ApiError {
    return this.configureInvoiceIssuingPortalAsync(
        ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto.builder().build()
      );
  }

  /**
   * Configure invoice issuing portal
   *
   * @param apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto {@link ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto> configureInvoiceIssuingPortalAsync(
    @NonNull ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildConfigureInvoiceIssuingPortalRequest(apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoUpdateUseNationalPortalResponseDto>() {})
    );
  }

  private Request buildConfigureInvoiceIssuingPortalRequest(
    @NonNull ApiCustomerFiscalInfoUpdateUseNationalPortalRequestDto apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nationalPortal"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCustomerFiscalInfoUpdateUseNationalPortalRequestDto)
      .build();
  }
}
