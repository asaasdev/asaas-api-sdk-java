// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerFiscalInfoGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ConfigureInvoiceIssuingPortalOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ConfigureInvoiceIssuingPortalRequest;
import com.asaas.sdk.asaasjavasdk.models.CreateAndUpdateTaxInformationRequest;
import com.asaas.sdk.asaasjavasdk.models.ListMunicipalConfigurationsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListMunicipalServicesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListMunicipalServicesParameters;
import com.asaas.sdk.asaasjavasdk.models.ListNbsCodesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListNbsCodesParameters;
import com.asaas.sdk.asaasjavasdk.models.RetrieveTaxInformationOkResponse;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListMunicipalServicesParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListNbsCodesParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * FiscalInfoService Service
 */
public class FiscalInfoService extends BaseService {

  public FiscalInfoService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code ListMunicipalConfigurationsOkResponse}
   */
  public ListMunicipalConfigurationsOkResponse listMunicipalConfigurations() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListMunicipalConfigurationsOkResponse>() {});
  }

  /**
   * List municipal configurations
   *
   * @return response of {@code CompletableFuture<ListMunicipalConfigurationsOkResponse>}
   */
  public CompletableFuture<ListMunicipalConfigurationsOkResponse> listMunicipalConfigurationsAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalConfigurationsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListMunicipalConfigurationsOkResponse>() {})
    );
  }

  private Request buildListMunicipalConfigurationsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/municipalOptions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code RetrieveTaxInformationOkResponse}
   */
  public RetrieveTaxInformationOkResponse retrieveTaxInformation() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveTaxInformationOkResponse>() {});
  }

  /**
   * Retrieve tax information
   *
   * @return response of {@code CompletableFuture<RetrieveTaxInformationOkResponse>}
   */
  public CompletableFuture<RetrieveTaxInformationOkResponse> retrieveTaxInformationAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveTaxInformationRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveTaxInformationOkResponse>() {})
    );
  }

  private Request buildRetrieveTaxInformationRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Create and update tax information
   *
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto createAndUpdateTaxInformation() throws ApiError {
    return this.createAndUpdateTaxInformation(CreateAndUpdateTaxInformationRequest.builder().build());
  }

  /**
   * Create and update tax information
   *
   * @param createAndUpdateTaxInformationRequest {@link CreateAndUpdateTaxInformationRequest} Request Body
   * @return response of {@code ApiCustomerFiscalInfoGetResponseDto}
   */
  public ApiCustomerFiscalInfoGetResponseDto createAndUpdateTaxInformation(
    @NonNull CreateAndUpdateTaxInformationRequest createAndUpdateTaxInformationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(createAndUpdateTaxInformationRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {});
  }

  /**
   * Create and update tax information
   *
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync() throws ApiError {
    return this.createAndUpdateTaxInformationAsync(CreateAndUpdateTaxInformationRequest.builder().build());
  }

  /**
   * Create and update tax information
   *
   * @param createAndUpdateTaxInformationRequest {@link CreateAndUpdateTaxInformationRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerFiscalInfoGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerFiscalInfoGetResponseDto> createAndUpdateTaxInformationAsync(
    @NonNull CreateAndUpdateTaxInformationRequest createAndUpdateTaxInformationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAndUpdateTaxInformationRequest(createAndUpdateTaxInformationRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerFiscalInfoGetResponseDto>() {})
    );
  }

  private Request buildCreateAndUpdateTaxInformationRequest(
    @NonNull CreateAndUpdateTaxInformationRequest createAndUpdateTaxInformationRequest
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("email", createAndUpdateTaxInformationRequest.getEmail())
      .addFormDataPart("municipalInscription", createAndUpdateTaxInformationRequest.getMunicipalInscription())
      .addFormDataPart("simplesNacional", createAndUpdateTaxInformationRequest.getSimplesNacional().toString())
      .addFormDataPart("cnae", createAndUpdateTaxInformationRequest.getCnae())
      .addFormDataPart("specialTaxRegime", createAndUpdateTaxInformationRequest.getSpecialTaxRegime())
      .addFormDataPart("serviceListItem", createAndUpdateTaxInformationRequest.getServiceListItem())
      .addFormDataPart("nbsCode", createAndUpdateTaxInformationRequest.getNbsCode())
      .addFormDataPart("rpsSerie", createAndUpdateTaxInformationRequest.getRpsSerie())
      .addFormDataPart("username", createAndUpdateTaxInformationRequest.getUsername())
      .addFormDataPart("password", createAndUpdateTaxInformationRequest.getPassword())
      .addFormDataPart("accessToken", createAndUpdateTaxInformationRequest.getAccessToken())
      .addFormDataPart("certificatePassword", createAndUpdateTaxInformationRequest.getCertificatePassword())
      .addFormDataPart(
        "nationalPortalTaxCalculationRegime",
        createAndUpdateTaxInformationRequest.getNationalPortalTaxCalculationRegime()
      );
    if (createAndUpdateTaxInformationRequest.getCulturalProjectsPromoter() != null) {
      multipartBodyBuilder.addFormDataPart(
        "culturalProjectsPromoter",
        createAndUpdateTaxInformationRequest.getCulturalProjectsPromoter().toString()
      );
    }
    if (createAndUpdateTaxInformationRequest.getRpsNumber() != null) {
      multipartBodyBuilder.addFormDataPart("rpsNumber", createAndUpdateTaxInformationRequest.getRpsNumber().toString());
    }
    if (createAndUpdateTaxInformationRequest.getLoteNumber() != null) {
      multipartBodyBuilder.addFormDataPart(
        "loteNumber",
        createAndUpdateTaxInformationRequest.getLoteNumber().toString()
      );
    }
    if (createAndUpdateTaxInformationRequest.getCertificateFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "certificateFile",
        String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          createAndUpdateTaxInformationRequest.getCertificateFile().toString(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * List municipal services
   *
   * @return response of {@code ListMunicipalServicesOkResponse}
   */
  public ListMunicipalServicesOkResponse listMunicipalServices() throws ApiError, ValidationException {
    return this.listMunicipalServices(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code ListMunicipalServicesOkResponse}
   */
  public ListMunicipalServicesOkResponse listMunicipalServices(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListMunicipalServicesOkResponse>() {});
  }

  /**
   * List municipal services
   *
   * @return response of {@code CompletableFuture<ListMunicipalServicesOkResponse>}
   */
  public CompletableFuture<ListMunicipalServicesOkResponse> listMunicipalServicesAsync()
    throws ApiError, ValidationException {
    return this.listMunicipalServicesAsync(ListMunicipalServicesParameters.builder().build());
  }

  /**
   * List municipal services
   *
   * @param requestParameters {@link ListMunicipalServicesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListMunicipalServicesOkResponse>}
   */
  public CompletableFuture<ListMunicipalServicesOkResponse> listMunicipalServicesAsync(
    @NonNull ListMunicipalServicesParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListMunicipalServicesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListMunicipalServicesOkResponse>() {})
    );
  }

  private Request buildListMunicipalServicesRequest(@NonNull ListMunicipalServicesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListMunicipalServicesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/services"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("description", requestParameters.getDescription())
      .build();
  }

  /**
   * List NBS codes
   *
   * @return response of {@code ListNbsCodesOkResponse}
   */
  public ListNbsCodesOkResponse listNbsCodes() throws ApiError, ValidationException {
    return this.listNbsCodes(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code ListNbsCodesOkResponse}
   */
  public ListNbsCodesOkResponse listNbsCodes(@NonNull ListNbsCodesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListNbsCodesOkResponse>() {});
  }

  /**
   * List NBS codes
   *
   * @return response of {@code CompletableFuture<ListNbsCodesOkResponse>}
   */
  public CompletableFuture<ListNbsCodesOkResponse> listNbsCodesAsync() throws ApiError, ValidationException {
    return this.listNbsCodesAsync(ListNbsCodesParameters.builder().build());
  }

  /**
   * List NBS codes
   *
   * @param requestParameters {@link ListNbsCodesParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListNbsCodesOkResponse>}
   */
  public CompletableFuture<ListNbsCodesOkResponse> listNbsCodesAsync(@NonNull ListNbsCodesParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListNbsCodesRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListNbsCodesOkResponse>() {})
    );
  }

  private Request buildListNbsCodesRequest(@NonNull ListNbsCodesParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListNbsCodesParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nbsCodes"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("codeDescription", requestParameters.getCodeDescription())
      .build();
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code ConfigureInvoiceIssuingPortalOkResponse}
   */
  public ConfigureInvoiceIssuingPortalOkResponse configureInvoiceIssuingPortal() throws ApiError {
    return this.configureInvoiceIssuingPortal(ConfigureInvoiceIssuingPortalRequest.builder().build());
  }

  /**
   * Configure invoice issuing portal
   *
   * @param configureInvoiceIssuingPortalRequest {@link ConfigureInvoiceIssuingPortalRequest} Request Body
   * @return response of {@code ConfigureInvoiceIssuingPortalOkResponse}
   */
  public ConfigureInvoiceIssuingPortalOkResponse configureInvoiceIssuingPortal(
    @NonNull ConfigureInvoiceIssuingPortalRequest configureInvoiceIssuingPortalRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfigureInvoiceIssuingPortalRequest(configureInvoiceIssuingPortalRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ConfigureInvoiceIssuingPortalOkResponse>() {});
  }

  /**
   * Configure invoice issuing portal
   *
   * @return response of {@code CompletableFuture<ConfigureInvoiceIssuingPortalOkResponse>}
   */
  public CompletableFuture<ConfigureInvoiceIssuingPortalOkResponse> configureInvoiceIssuingPortalAsync()
    throws ApiError {
    return this.configureInvoiceIssuingPortalAsync(ConfigureInvoiceIssuingPortalRequest.builder().build());
  }

  /**
   * Configure invoice issuing portal
   *
   * @param configureInvoiceIssuingPortalRequest {@link ConfigureInvoiceIssuingPortalRequest} Request Body
   * @return response of {@code CompletableFuture<ConfigureInvoiceIssuingPortalOkResponse>}
   */
  public CompletableFuture<ConfigureInvoiceIssuingPortalOkResponse> configureInvoiceIssuingPortalAsync(
    @NonNull ConfigureInvoiceIssuingPortalRequest configureInvoiceIssuingPortalRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfigureInvoiceIssuingPortalRequest(configureInvoiceIssuingPortalRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ConfigureInvoiceIssuingPortalOkResponse>() {})
    );
  }

  private Request buildConfigureInvoiceIssuingPortalRequest(
    @NonNull ConfigureInvoiceIssuingPortalRequest configureInvoiceIssuingPortalRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/fiscalInfo/nationalPortal"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(configureInvoiceIssuingPortalRequest)
      .build();
  }
}
