// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPixAddressKeyGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixAddressKeyListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixAddressKeySaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixQrCodeDeleteResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixQrCodeSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixQrCodeSaveResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixTokenBucketGetAddressKeyResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ListKeysParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ApiPixQrCodeSaveRequestDtoValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListKeysParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PixService Service
 */
public class PixService extends BaseService {

  public PixService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List keys
   *
   * @return response of {@code ApiPixAddressKeyListResponseDto}
   */
  public ApiPixAddressKeyListResponseDto listKeys() throws ApiError, ValidationException {
    return this.listKeys(ListKeysParameters.builder().build());
  }

  /**
   * List keys
   *
   * @param requestParameters {@link ListKeysParameters} Request Parameters Object
   * @return response of {@code ApiPixAddressKeyListResponseDto}
   */
  public ApiPixAddressKeyListResponseDto listKeys(@NonNull ListKeysParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListKeysRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyListResponseDto>() {});
  }

  /**
   * List keys
   *
   * @return response of {@code CompletableFuture<ApiPixAddressKeyListResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyListResponseDto> listKeysAsync() throws ApiError, ValidationException {
    return this.listKeysAsync(ListKeysParameters.builder().build());
  }

  /**
   * List keys
   *
   * @param requestParameters {@link ListKeysParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPixAddressKeyListResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyListResponseDto> listKeysAsync(
    @NonNull ListKeysParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListKeysRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyListResponseDto>() {})
    );
  }

  private Request buildListKeysRequest(@NonNull ListKeysParameters requestParameters) throws ValidationException {
    new ViolationAggregator()
      .add(new ListKeysParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("statusList", requestParameters.getStatusList());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create a key
   *
   * @return response of {@code ApiPixAddressKeyGetResponseDto}
   */
  public ApiPixAddressKeyGetResponseDto createAKey() throws ApiError {
    return this.createAKey(ApiPixAddressKeySaveRequestDto.builder().build());
  }

  /**
   * Create a key
   *
   * @param apiPixAddressKeySaveRequestDto {@link ApiPixAddressKeySaveRequestDto} Request Body
   * @return response of {@code ApiPixAddressKeyGetResponseDto}
   */
  public ApiPixAddressKeyGetResponseDto createAKey(
    @NonNull ApiPixAddressKeySaveRequestDto apiPixAddressKeySaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAKeyRequest(apiPixAddressKeySaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {});
  }

  /**
   * Create a key
   *
   * @return response of {@code CompletableFuture<ApiPixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyGetResponseDto> createAKeyAsync() throws ApiError {
    return this.createAKeyAsync(ApiPixAddressKeySaveRequestDto.builder().build());
  }

  /**
   * Create a key
   *
   * @param apiPixAddressKeySaveRequestDto {@link ApiPixAddressKeySaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyGetResponseDto> createAKeyAsync(
    @NonNull ApiPixAddressKeySaveRequestDto apiPixAddressKeySaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAKeyRequest(apiPixAddressKeySaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildCreateAKeyRequest(@NonNull ApiPixAddressKeySaveRequestDto apiPixAddressKeySaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPixAddressKeySaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code ApiPixAddressKeyGetResponseDto}
   */
  public ApiPixAddressKeyGetResponseDto retrieveASingleKey(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleKeyRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {});
  }

  /**
   * Retrieve a single key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyGetResponseDto> retrieveASingleKeyAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleKeyRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleKeyRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Remove key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code ApiPixAddressKeyGetResponseDto}
   */
  public ApiPixAddressKeyGetResponseDto removeKey(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveKeyRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {});
  }

  /**
   * Remove key
   *
   * @param id String Unique Pix key identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPixAddressKeyGetResponseDto>}
   */
  public CompletableFuture<ApiPixAddressKeyGetResponseDto> removeKeyAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveKeyRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixAddressKeyGetResponseDto>() {})
    );
  }

  private Request buildRemoveKeyRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/addressKeys/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Create static QRCode
   *
   * @return response of {@code ApiPixQrCodeSaveResponseDto}
   */
  public ApiPixQrCodeSaveResponseDto createStaticQrcode() throws ApiError, ValidationException {
    return this.createStaticQrcode(ApiPixQrCodeSaveRequestDto.builder().build());
  }

  /**
   * Create static QRCode
   *
   * @param apiPixQrCodeSaveRequestDto {@link ApiPixQrCodeSaveRequestDto} Request Body
   * @return response of {@code ApiPixQrCodeSaveResponseDto}
   */
  public ApiPixQrCodeSaveResponseDto createStaticQrcode(@NonNull ApiPixQrCodeSaveRequestDto apiPixQrCodeSaveRequestDto)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateStaticQrcodeRequest(apiPixQrCodeSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixQrCodeSaveResponseDto>() {});
  }

  /**
   * Create static QRCode
   *
   * @return response of {@code CompletableFuture<ApiPixQrCodeSaveResponseDto>}
   */
  public CompletableFuture<ApiPixQrCodeSaveResponseDto> createStaticQrcodeAsync() throws ApiError, ValidationException {
    return this.createStaticQrcodeAsync(ApiPixQrCodeSaveRequestDto.builder().build());
  }

  /**
   * Create static QRCode
   *
   * @param apiPixQrCodeSaveRequestDto {@link ApiPixQrCodeSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPixQrCodeSaveResponseDto>}
   */
  public CompletableFuture<ApiPixQrCodeSaveResponseDto> createStaticQrcodeAsync(
    @NonNull ApiPixQrCodeSaveRequestDto apiPixQrCodeSaveRequestDto
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateStaticQrcodeRequest(apiPixQrCodeSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixQrCodeSaveResponseDto>() {})
    );
  }

  private Request buildCreateStaticQrcodeRequest(@NonNull ApiPixQrCodeSaveRequestDto apiPixQrCodeSaveRequestDto)
    throws ValidationException {
    new ViolationAggregator()
      .add(
        new ApiPixQrCodeSaveRequestDtoValidator("apiPixQrCodeSaveRequestDto")
          .optional()
          .validate(apiPixQrCodeSaveRequestDto)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/static"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPixQrCodeSaveRequestDto)
      .build();
  }

  /**
   * Remove a static QR Code
   *
   * @param id String Identifier of the QR Code that will be deleted.
   * @return response of {@code ApiPixQrCodeDeleteResponseDto}
   */
  public ApiPixQrCodeDeleteResponseDto deleteStaticQrcode(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeleteStaticQrcodeRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixQrCodeDeleteResponseDto>() {});
  }

  /**
   * Remove a static QR Code
   *
   * @param id String Identifier of the QR Code that will be deleted.
   * @return response of {@code CompletableFuture<ApiPixQrCodeDeleteResponseDto>}
   */
  public CompletableFuture<ApiPixQrCodeDeleteResponseDto> deleteStaticQrcodeAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeleteStaticQrcodeRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixQrCodeDeleteResponseDto>() {})
    );
  }

  private Request buildDeleteStaticQrcodeRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/static/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Available Token Bucket Check
   *
   * @return response of {@code ApiPixTokenBucketGetAddressKeyResponseDto}
   */
  public ApiPixTokenBucketGetAddressKeyResponseDto availableTokenBucketCheck() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildAvailableTokenBucketCheckRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixTokenBucketGetAddressKeyResponseDto>() {});
  }

  /**
   * Available Token Bucket Check
   *
   * @return response of {@code CompletableFuture<ApiPixTokenBucketGetAddressKeyResponseDto>}
   */
  public CompletableFuture<ApiPixTokenBucketGetAddressKeyResponseDto> availableTokenBucketCheckAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildAvailableTokenBucketCheckRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTokenBucketGetAddressKeyResponseDto>() {})
    );
  }

  private Request buildAvailableTokenBucketCheckRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/tokenBucket/addressKey"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }
}
