// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiFinancialTransactionListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.RetrieveExtractParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.RetrieveExtractParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * FinancialTransactionService Service
 */
public class FinancialTransactionService extends BaseService {

  public FinancialTransactionService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve extract
   *
   * @return response of {@code ApiFinancialTransactionListResponseDto}
   */
  public ApiFinancialTransactionListResponseDto retrieveExtract() throws ApiError, ValidationException {
    return this.retrieveExtract(RetrieveExtractParameters.builder().build());
  }

  /**
   * Retrieve extract
   *
   * @param requestParameters {@link RetrieveExtractParameters} Request Parameters Object
   * @return response of {@code ApiFinancialTransactionListResponseDto}
   */
  public ApiFinancialTransactionListResponseDto retrieveExtract(@NonNull RetrieveExtractParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveExtractRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiFinancialTransactionListResponseDto>() {});
  }

  /**
   * Retrieve extract
   *
   * @return response of {@code CompletableFuture<ApiFinancialTransactionListResponseDto>}
   */
  public CompletableFuture<ApiFinancialTransactionListResponseDto> retrieveExtractAsync()
    throws ApiError, ValidationException {
    return this.retrieveExtractAsync(RetrieveExtractParameters.builder().build());
  }

  /**
   * Retrieve extract
   *
   * @param requestParameters {@link RetrieveExtractParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiFinancialTransactionListResponseDto>}
   */
  public CompletableFuture<ApiFinancialTransactionListResponseDto> retrieveExtractAsync(
    @NonNull RetrieveExtractParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRetrieveExtractRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiFinancialTransactionListResponseDto>() {})
    );
  }

  private Request buildRetrieveExtractRequest(@NonNull RetrieveExtractParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new RetrieveExtractParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/financialTransactions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("startDate", requestParameters.getStartDate())
      .setOptionalQueryParameter("finishDate", requestParameters.getFinishDate())
      .setOptionalQueryParameter("order", requestParameters.getOrder())
      .build();
  }
}
