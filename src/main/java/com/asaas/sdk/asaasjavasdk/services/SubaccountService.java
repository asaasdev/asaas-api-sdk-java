// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerPaymentCustodyConfigDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.CreateSubaccountOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CreateSubaccountRequest;
import com.asaas.sdk.asaasjavasdk.models.ListSubaccountsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListSubaccountsParameters;
import com.asaas.sdk.asaasjavasdk.models.RetrieveASingleSubaccountOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListSubaccountsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * SubaccountService Service
 */
public class SubaccountService extends BaseService {

  public SubaccountService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List subaccounts
   *
   * @return response of {@code ListSubaccountsOkResponse}
   */
  public ListSubaccountsOkResponse listSubaccounts() throws ApiError, ValidationException {
    return this.listSubaccounts(ListSubaccountsParameters.builder().build());
  }

  /**
   * List subaccounts
   *
   * @param requestParameters {@link ListSubaccountsParameters} Request Parameters Object
   * @return response of {@code ListSubaccountsOkResponse}
   */
  public ListSubaccountsOkResponse listSubaccounts(@NonNull ListSubaccountsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListSubaccountsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListSubaccountsOkResponse>() {});
  }

  /**
   * List subaccounts
   *
   * @return response of {@code CompletableFuture<ListSubaccountsOkResponse>}
   */
  public CompletableFuture<ListSubaccountsOkResponse> listSubaccountsAsync() throws ApiError, ValidationException {
    return this.listSubaccountsAsync(ListSubaccountsParameters.builder().build());
  }

  /**
   * List subaccounts
   *
   * @param requestParameters {@link ListSubaccountsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListSubaccountsOkResponse>}
   */
  public CompletableFuture<ListSubaccountsOkResponse> listSubaccountsAsync(
    @NonNull ListSubaccountsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListSubaccountsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListSubaccountsOkResponse>() {})
    );
  }

  private Request buildListSubaccountsRequest(@NonNull ListSubaccountsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListSubaccountsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("cpfCnpj", requestParameters.getCpfCnpj())
      .setOptionalQueryParameter("email", requestParameters.getEmail())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("walletId", requestParameters.getWalletId())
      .build();
  }

  /**
   * Create subaccount
   *
   * @return response of {@code CreateSubaccountOkResponse}
   */
  public CreateSubaccountOkResponse createSubaccount() throws ApiError {
    return this.createSubaccount(CreateSubaccountRequest.builder().build());
  }

  /**
   * Create subaccount
   *
   * @param createSubaccountRequest {@link CreateSubaccountRequest} Request Body
   * @return response of {@code CreateSubaccountOkResponse}
   */
  public CreateSubaccountOkResponse createSubaccount(@NonNull CreateSubaccountRequest createSubaccountRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateSubaccountRequest(createSubaccountRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CreateSubaccountOkResponse>() {});
  }

  /**
   * Create subaccount
   *
   * @return response of {@code CompletableFuture<CreateSubaccountOkResponse>}
   */
  public CompletableFuture<CreateSubaccountOkResponse> createSubaccountAsync() throws ApiError {
    return this.createSubaccountAsync(CreateSubaccountRequest.builder().build());
  }

  /**
   * Create subaccount
   *
   * @param createSubaccountRequest {@link CreateSubaccountRequest} Request Body
   * @return response of {@code CompletableFuture<CreateSubaccountOkResponse>}
   */
  public CompletableFuture<CreateSubaccountOkResponse> createSubaccountAsync(
    @NonNull CreateSubaccountRequest createSubaccountRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateSubaccountRequest(createSubaccountRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CreateSubaccountOkResponse>() {})
    );
  }

  private Request buildCreateSubaccountRequest(@NonNull CreateSubaccountRequest createSubaccountRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createSubaccountRequest)
      .build();
  }

  /**
   * Retrieve a single subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code RetrieveASingleSubaccountOkResponse}
   */
  public RetrieveASingleSubaccountOkResponse retrieveASingleSubaccount(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleSubaccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveASingleSubaccountOkResponse>() {});
  }

  /**
   * Retrieve a single subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code CompletableFuture<RetrieveASingleSubaccountOkResponse>}
   */
  public CompletableFuture<RetrieveASingleSubaccountOkResponse> retrieveASingleSubaccountAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleSubaccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveASingleSubaccountOkResponse>() {})
    );
  }

  private Request buildRetrieveASingleSubaccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Reterive Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code ApiCustomerPaymentCustodyConfigDto}
   */
  public ApiCustomerPaymentCustodyConfigDto reteriveEscrowAccountConfigurationForSubaccount(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildReteriveEscrowAccountConfigurationForSubaccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {});
  }

  /**
   * Reterive Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerPaymentCustodyConfigDto>}
   */
  public CompletableFuture<ApiCustomerPaymentCustodyConfigDto> reteriveEscrowAccountConfigurationForSubaccountAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildReteriveEscrowAccountConfigurationForSubaccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerPaymentCustodyConfigDto>() {})
    );
  }

  private Request buildReteriveEscrowAccountConfigurationForSubaccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Save or update Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @param saveOrUpdateEscrowAccountConfigurationForSubaccountRequest {@link SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest} Request Body
   * @return response of {@code SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse}
   */
  public SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse saveOrUpdateEscrowAccountConfigurationForSubaccount(
    @NonNull String id,
    @NonNull SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest saveOrUpdateEscrowAccountConfigurationForSubaccountRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
          id,
          saveOrUpdateEscrowAccountConfigurationForSubaccountRequest
        );
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse>() {}
    );
  }

  /**
   * Save or update Escrow Account configuration for subaccount
   *
   * @param id String Unique subaccount identifier in Asaas
   * @param saveOrUpdateEscrowAccountConfigurationForSubaccountRequest {@link SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest} Request Body
   * @return response of {@code CompletableFuture<SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse>}
   */
  public CompletableFuture<
    SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse
  > saveOrUpdateEscrowAccountConfigurationForSubaccountAsync(
    @NonNull String id,
    @NonNull SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest saveOrUpdateEscrowAccountConfigurationForSubaccountRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
          id,
          saveOrUpdateEscrowAccountConfigurationForSubaccountRequest
        );
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(
        response,
        new TypeReference<SaveOrUpdateEscrowAccountConfigurationForSubaccountOkResponse>() {}
      )
    );
  }

  private Request buildSaveOrUpdateEscrowAccountConfigurationForSubaccountRequest(
    @NonNull String id,
    @NonNull SaveOrUpdateEscrowAccountConfigurationForSubaccountRequest saveOrUpdateEscrowAccountConfigurationForSubaccountRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/accounts/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(saveOrUpdateEscrowAccountConfigurationForSubaccountRequest)
      .build();
  }
}
