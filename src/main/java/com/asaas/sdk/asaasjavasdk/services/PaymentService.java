// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCustodyGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentPixQrCodeResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentSaveWithCreditCardRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ConfirmCashReceiptRequest;
import com.asaas.sdk.asaasjavasdk.models.CreateNewPaymentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CreateNewPaymentRequest;
import com.asaas.sdk.asaasjavasdk.models.DeletePaymentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.GetDigitableBillLineOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsParameters;
import com.asaas.sdk.asaasjavasdk.models.PayAChargeWithCreditCardRequest;
import com.asaas.sdk.asaasjavasdk.models.PaymentViewingInformationOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RecoveringPaymentLimitsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RefundPaymentRequest;
import com.asaas.sdk.asaasjavasdk.models.RetrievePaymentBillingInformationOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveStatusOfAPaymentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SalesSimulatorOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SalesSimulatorRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateExistingPaymentRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaymentsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PaymentService Service
 */
public class PaymentService extends BaseService {

  public PaymentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payments
   *
   * @return response of {@code ListPaymentsOkResponse}
   */
  public ListPaymentsOkResponse listPayments() throws ApiError, ValidationException {
    return this.listPayments(ListPaymentsParameters.builder().build());
  }

  /**
   * List payments
   *
   * @param requestParameters {@link ListPaymentsParameters} Request Parameters Object
   * @return response of {@code ListPaymentsOkResponse}
   */
  public ListPaymentsOkResponse listPayments(@NonNull ListPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListPaymentsOkResponse>() {});
  }

  /**
   * List payments
   *
   * @return response of {@code CompletableFuture<ListPaymentsOkResponse>}
   */
  public CompletableFuture<ListPaymentsOkResponse> listPaymentsAsync() throws ApiError, ValidationException {
    return this.listPaymentsAsync(ListPaymentsParameters.builder().build());
  }

  /**
   * List payments
   *
   * @param requestParameters {@link ListPaymentsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListPaymentsOkResponse>}
   */
  public CompletableFuture<ListPaymentsOkResponse> listPaymentsAsync(@NonNull ListPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListPaymentsOkResponse>() {})
    );
  }

  private Request buildListPaymentsRequest(@NonNull ListPaymentsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("customer", requestParameters.getCustomer())
      .setOptionalQueryParameter("customerGroupName", requestParameters.getCustomerGroupName())
      .setOptionalQueryParameter("subscription", requestParameters.getSubscription())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .setOptionalQueryParameter("paymentDate", requestParameters.getPaymentDate())
      .setOptionalQueryParameter("estimatedCreditDate", requestParameters.getEstimatedCreditDate())
      .setOptionalQueryParameter("pixQrCodeId", requestParameters.getPixQrCodeId())
      .setOptionalQueryParameter("anticipated", requestParameters.getAnticipated())
      .setOptionalQueryParameter("anticipable", requestParameters.getAnticipable())
      .setOptionalQueryParameter("dateCreated[ge]", requestParameters.getDateCreatedGe())
      .setOptionalQueryParameter("dateCreated[le]", requestParameters.getDateCreatedLe())
      .setOptionalQueryParameter("paymentDate[ge]", requestParameters.getPaymentDateGe())
      .setOptionalQueryParameter("paymentDate[le]", requestParameters.getPaymentDateLe())
      .setOptionalQueryParameter("estimatedCreditDate[ge]", requestParameters.getEstimatedCreditDateGe())
      .setOptionalQueryParameter("estimatedCreditDate[le]", requestParameters.getEstimatedCreditDateLe())
      .setOptionalQueryParameter("dueDate[ge]", requestParameters.getDueDateGe())
      .setOptionalQueryParameter("dueDate[le]", requestParameters.getDueDateLe())
      .setOptionalQueryParameter("user", requestParameters.getUser());
    if (requestParameters.getBillingType() != null) {
      builder.setOptionalQueryParameter("billingType", requestParameters.getBillingType().getValue());
    }
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getInvoiceStatus() != null) {
      builder.setOptionalQueryParameter("invoiceStatus", requestParameters.getInvoiceStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Create new payment
   *
   * @return response of {@code CreateNewPaymentOkResponse}
   */
  public CreateNewPaymentOkResponse createNewPayment() throws ApiError {
    return this.createNewPayment(CreateNewPaymentRequest.builder().build());
  }

  /**
   * Create new payment
   *
   * @param createNewPaymentRequest {@link CreateNewPaymentRequest} Request Body
   * @return response of {@code CreateNewPaymentOkResponse}
   */
  public CreateNewPaymentOkResponse createNewPayment(@NonNull CreateNewPaymentRequest createNewPaymentRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewPaymentRequest(createNewPaymentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CreateNewPaymentOkResponse>() {});
  }

  /**
   * Create new payment
   *
   * @return response of {@code CompletableFuture<CreateNewPaymentOkResponse>}
   */
  public CompletableFuture<CreateNewPaymentOkResponse> createNewPaymentAsync() throws ApiError {
    return this.createNewPaymentAsync(CreateNewPaymentRequest.builder().build());
  }

  /**
   * Create new payment
   *
   * @param createNewPaymentRequest {@link CreateNewPaymentRequest} Request Body
   * @return response of {@code CompletableFuture<CreateNewPaymentOkResponse>}
   */
  public CompletableFuture<CreateNewPaymentOkResponse> createNewPaymentAsync(
    @NonNull CreateNewPaymentRequest createNewPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewPaymentRequest(createNewPaymentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CreateNewPaymentOkResponse>() {})
    );
  }

  private Request buildCreateNewPaymentRequest(@NonNull CreateNewPaymentRequest createNewPaymentRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createNewPaymentRequest)
      .build();
  }

  /**
   * Create new payment with credit card
   *
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto createNewPaymentWithCreditCard() throws ApiError {
    return this.createNewPaymentWithCreditCard(ApiPaymentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create new payment with credit card
   *
   * @param apiPaymentSaveWithCreditCardRequestDto {@link ApiPaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto createNewPaymentWithCreditCard(
    @NonNull ApiPaymentSaveWithCreditCardRequestDto apiPaymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewPaymentWithCreditCardRequest(apiPaymentSaveWithCreditCardRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Create new payment with credit card
   *
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> createNewPaymentWithCreditCardAsync() throws ApiError {
    return this.createNewPaymentWithCreditCardAsync(ApiPaymentSaveWithCreditCardRequestDto.builder().build());
  }

  /**
   * Create new payment with credit card
   *
   * @param apiPaymentSaveWithCreditCardRequestDto {@link ApiPaymentSaveWithCreditCardRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> createNewPaymentWithCreditCardAsync(
    @NonNull ApiPaymentSaveWithCreditCardRequestDto apiPaymentSaveWithCreditCardRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewPaymentWithCreditCardRequest(apiPaymentSaveWithCreditCardRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildCreateNewPaymentWithCreditCardRequest(
    @NonNull ApiPaymentSaveWithCreditCardRequestDto apiPaymentSaveWithCreditCardRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPaymentSaveWithCreditCardRequestDto)
      .build();
  }

  /**
   * Capture payment with Pre-Authorization
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto capturePaymentWithPreAuthorization(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Capture payment with Pre-Authorization
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> capturePaymentWithPreAuthorizationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCapturePaymentWithPreAuthorizationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildCapturePaymentWithPreAuthorizationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/captureAuthorizedPayment"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Pay a charge with a credit card
   *
   * @param id String Unique payment identifier in Asaas
   * @param payAChargeWithCreditCardRequest {@link PayAChargeWithCreditCardRequest} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto payAChargeWithCreditCard(
    @NonNull String id,
    @NonNull PayAChargeWithCreditCardRequest payAChargeWithCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPayAChargeWithCreditCardRequest(id, payAChargeWithCreditCardRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Pay a charge with a credit card
   *
   * @param id String Unique payment identifier in Asaas
   * @param payAChargeWithCreditCardRequest {@link PayAChargeWithCreditCardRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> payAChargeWithCreditCardAsync(
    @NonNull String id,
    @NonNull PayAChargeWithCreditCardRequest payAChargeWithCreditCardRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPayAChargeWithCreditCardRequest(id, payAChargeWithCreditCardRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildPayAChargeWithCreditCardRequest(
    @NonNull String id,
    @NonNull PayAChargeWithCreditCardRequest payAChargeWithCreditCardRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/payWithCreditCard"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(payAChargeWithCreditCardRequest)
      .build();
  }

  /**
   * Retrieve payment billing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code RetrievePaymentBillingInformationOkResponse}
   */
  public RetrievePaymentBillingInformationOkResponse retrievePaymentBillingInformation(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePaymentBillingInformationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrievePaymentBillingInformationOkResponse>() {});
  }

  /**
   * Retrieve payment billing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<RetrievePaymentBillingInformationOkResponse>}
   */
  public CompletableFuture<RetrievePaymentBillingInformationOkResponse> retrievePaymentBillingInformationAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePaymentBillingInformationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrievePaymentBillingInformationOkResponse>() {})
    );
  }

  private Request buildRetrievePaymentBillingInformationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/billingInfo"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Payment viewing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code PaymentViewingInformationOkResponse}
   */
  public PaymentViewingInformationOkResponse paymentViewingInformation(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPaymentViewingInformationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<PaymentViewingInformationOkResponse>() {});
  }

  /**
   * Payment viewing information
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<PaymentViewingInformationOkResponse>}
   */
  public CompletableFuture<PaymentViewingInformationOkResponse> paymentViewingInformationAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPaymentViewingInformationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<PaymentViewingInformationOkResponse>() {})
    );
  }

  private Request buildPaymentViewingInformationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/viewingInfo"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Retrieve a single payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto retrieveASinglePayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Retrieve a single payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> retrieveASinglePaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param updateExistingPaymentRequest {@link UpdateExistingPaymentRequest} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto updateExistingPayment(
    @NonNull String id,
    @NonNull UpdateExistingPaymentRequest updateExistingPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingPaymentRequest(id, updateExistingPaymentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Update existing payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param updateExistingPaymentRequest {@link UpdateExistingPaymentRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> updateExistingPaymentAsync(
    @NonNull String id,
    @NonNull UpdateExistingPaymentRequest updateExistingPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingPaymentRequest(id, updateExistingPaymentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingPaymentRequest(
    @NonNull String id,
    @NonNull UpdateExistingPaymentRequest updateExistingPaymentRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateExistingPaymentRequest)
      .build();
  }

  /**
   * Delete payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code DeletePaymentOkResponse}
   */
  public DeletePaymentOkResponse deletePayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeletePaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<DeletePaymentOkResponse>() {});
  }

  /**
   * Delete payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<DeletePaymentOkResponse>}
   */
  public CompletableFuture<DeletePaymentOkResponse> deletePaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeletePaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<DeletePaymentOkResponse>() {})
    );
  }

  private Request buildDeletePaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore removed payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto restoreRemovedPayment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreRemovedPaymentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Restore removed payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> restoreRemovedPaymentAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreRemovedPaymentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildRestoreRemovedPaymentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Retrieve status of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code RetrieveStatusOfAPaymentOkResponse}
   */
  public RetrieveStatusOfAPaymentOkResponse retrieveStatusOfAPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveStatusOfAPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveStatusOfAPaymentOkResponse>() {});
  }

  /**
   * Retrieve status of a payment
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<RetrieveStatusOfAPaymentOkResponse>}
   */
  public CompletableFuture<RetrieveStatusOfAPaymentOkResponse> retrieveStatusOfAPaymentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveStatusOfAPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveStatusOfAPaymentOkResponse>() {})
    );
  }

  private Request buildRetrieveStatusOfAPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/status"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Refund payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param refundPaymentRequest {@link RefundPaymentRequest} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto refundPayment(@NonNull String id, @NonNull RefundPaymentRequest refundPaymentRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRefundPaymentRequest(id, refundPaymentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Refund payment
   *
   * @param id String Unique payment identifier in Asaas
   * @param refundPaymentRequest {@link RefundPaymentRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> refundPaymentAsync(
    @NonNull String id,
    @NonNull RefundPaymentRequest refundPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRefundPaymentRequest(id, refundPaymentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildRefundPaymentRequest(@NonNull String id, @NonNull RefundPaymentRequest refundPaymentRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/refund"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(refundPaymentRequest)
      .build();
  }

  /**
   * Get digitable bill line
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code GetDigitableBillLineOkResponse}
   */
  public GetDigitableBillLineOkResponse getDigitableBillLine(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGetDigitableBillLineRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<GetDigitableBillLineOkResponse>() {});
  }

  /**
   * Get digitable bill line
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<GetDigitableBillLineOkResponse>}
   */
  public CompletableFuture<GetDigitableBillLineOkResponse> getDigitableBillLineAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGetDigitableBillLineRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<GetDigitableBillLineOkResponse>() {})
    );
  }

  private Request buildGetDigitableBillLineRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/identificationField"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Get QR Code for Pix payments
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code ApiPaymentPixQrCodeResponseDto}
   */
  public ApiPaymentPixQrCodeResponseDto getQrCodeForPixPayments(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGetQrCodeForPixPaymentsRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentPixQrCodeResponseDto>() {});
  }

  /**
   * Get QR Code for Pix payments
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentPixQrCodeResponseDto>}
   */
  public CompletableFuture<ApiPaymentPixQrCodeResponseDto> getQrCodeForPixPaymentsAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildGetQrCodeForPixPaymentsRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentPixQrCodeResponseDto>() {})
    );
  }

  private Request buildGetQrCodeForPixPaymentsRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/pixQrCode"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Confirm cash receipt
   *
   * @param id String Unique payment identifier in Asaas
   * @param confirmCashReceiptRequest {@link ConfirmCashReceiptRequest} Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto confirmCashReceipt(
    @NonNull String id,
    @NonNull ConfirmCashReceiptRequest confirmCashReceiptRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfirmCashReceiptRequest(id, confirmCashReceiptRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Confirm cash receipt
   *
   * @param id String Unique payment identifier in Asaas
   * @param confirmCashReceiptRequest {@link ConfirmCashReceiptRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> confirmCashReceiptAsync(
    @NonNull String id,
    @NonNull ConfirmCashReceiptRequest confirmCashReceiptRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildConfirmCashReceiptRequest(id, confirmCashReceiptRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildConfirmCashReceiptRequest(
    @NonNull String id,
    @NonNull ConfirmCashReceiptRequest confirmCashReceiptRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/receiveInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(confirmCashReceiptRequest)
      .build();
  }

  /**
   * Undo cash receipt confirmation
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code ApiPaymentGetResponseDto}
   */
  public ApiPaymentGetResponseDto undoCashReceiptConfirmation(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUndoCashReceiptConfirmationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {});
  }

  /**
   * Undo cash receipt confirmation
   *
   * @param id String Unique payment identifier in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<ApiPaymentGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentGetResponseDto> undoCashReceiptConfirmationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUndoCashReceiptConfirmationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentGetResponseDto>() {})
    );
  }

  private Request buildUndoCashReceiptConfirmationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/undoReceivedInCash"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Sales simulator
   *
   * @return response of {@code SalesSimulatorOkResponse}
   */
  public SalesSimulatorOkResponse salesSimulator() throws ApiError {
    return this.salesSimulator(SalesSimulatorRequest.builder().build());
  }

  /**
   * Sales simulator
   *
   * @param salesSimulatorRequest {@link SalesSimulatorRequest} Request Body
   * @return response of {@code SalesSimulatorOkResponse}
   */
  public SalesSimulatorOkResponse salesSimulator(@NonNull SalesSimulatorRequest salesSimulatorRequest) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSalesSimulatorRequest(salesSimulatorRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SalesSimulatorOkResponse>() {});
  }

  /**
   * Sales simulator
   *
   * @return response of {@code CompletableFuture<SalesSimulatorOkResponse>}
   */
  public CompletableFuture<SalesSimulatorOkResponse> salesSimulatorAsync() throws ApiError {
    return this.salesSimulatorAsync(SalesSimulatorRequest.builder().build());
  }

  /**
   * Sales simulator
   *
   * @param salesSimulatorRequest {@link SalesSimulatorRequest} Request Body
   * @return response of {@code CompletableFuture<SalesSimulatorOkResponse>}
   */
  public CompletableFuture<SalesSimulatorOkResponse> salesSimulatorAsync(
    @NonNull SalesSimulatorRequest salesSimulatorRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSalesSimulatorRequest(salesSimulatorRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SalesSimulatorOkResponse>() {})
    );
  }

  private Request buildSalesSimulatorRequest(@NonNull SalesSimulatorRequest salesSimulatorRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(salesSimulatorRequest)
      .build();
  }

  /**
   * Retrieve payment escrow in the Escrow Account
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code ApiPaymentCustodyGetResponseDto}
   */
  public ApiPaymentCustodyGetResponseDto retrievePaymentEscrowInTheEscrowAccount(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePaymentEscrowInTheEscrowAccountRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCustodyGetResponseDto>() {});
  }

  /**
   * Retrieve payment escrow in the Escrow Account
   *
   * @param id String Unique payment identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCustodyGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCustodyGetResponseDto> retrievePaymentEscrowInTheEscrowAccountAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePaymentEscrowInTheEscrowAccountRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCustodyGetResponseDto>() {})
    );
  }

  private Request buildRetrievePaymentEscrowInTheEscrowAccountRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/{id}/escrow"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Recovering payment limits
   *
   * @return response of {@code RecoveringPaymentLimitsOkResponse}
   */
  public RecoveringPaymentLimitsOkResponse recoveringPaymentLimits() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRecoveringPaymentLimitsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RecoveringPaymentLimitsOkResponse>() {});
  }

  /**
   * Recovering payment limits
   *
   * @return response of {@code CompletableFuture<RecoveringPaymentLimitsOkResponse>}
   */
  public CompletableFuture<RecoveringPaymentLimitsOkResponse> recoveringPaymentLimitsAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRecoveringPaymentLimitsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RecoveringPaymentLimitsOkResponse>() {})
    );
  }

  private Request buildRecoveringPaymentLimitsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/limits"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }
}
