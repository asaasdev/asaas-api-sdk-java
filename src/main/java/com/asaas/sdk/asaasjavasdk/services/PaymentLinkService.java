// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignDeleteResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignFileDeleteResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignFileGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignFileListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignFilePathIdRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignFileSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignPathIdRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCampaignUpdateRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsLinksParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaymentsLinksParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentLinkService Service
 */
public class PaymentLinkService extends BaseService {

  public PaymentLinkService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payments links
   *
   * @return response of {@code ApiPaymentCampaignListResponseDto}
   */
  public ApiPaymentCampaignListResponseDto listPaymentsLinks() throws ApiError, ValidationException {
    return this.listPaymentsLinks(ListPaymentsLinksParameters.builder().build());
  }

  /**
   * List payments links
   *
   * @param requestParameters {@link ListPaymentsLinksParameters} Request Parameters Object
   * @return response of {@code ApiPaymentCampaignListResponseDto}
   */
  public ApiPaymentCampaignListResponseDto listPaymentsLinks(@NonNull ListPaymentsLinksParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsLinksRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignListResponseDto>() {});
  }

  /**
   * List payments links
   *
   * @return response of {@code CompletableFuture<ApiPaymentCampaignListResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignListResponseDto> listPaymentsLinksAsync()
    throws ApiError, ValidationException {
    return this.listPaymentsLinksAsync(ListPaymentsLinksParameters.builder().build());
  }

  /**
   * List payments links
   *
   * @param requestParameters {@link ListPaymentsLinksParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPaymentCampaignListResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignListResponseDto> listPaymentsLinksAsync(
    @NonNull ListPaymentsLinksParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsLinksRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignListResponseDto>() {})
    );
  }

  private Request buildListPaymentsLinksRequest(@NonNull ListPaymentsLinksParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsLinksParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("active", requestParameters.getActive())
      .setOptionalQueryParameter("includeDeleted", requestParameters.getIncludeDeleted())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .build();
  }

  /**
   * Create a payments link
   *
   * @return response of {@code ApiPaymentCampaignGetResponseDto}
   */
  public ApiPaymentCampaignGetResponseDto createAPaymentsLink() throws ApiError {
    return this.createAPaymentsLink(ApiPaymentCampaignSaveRequestDto.builder().build());
  }

  /**
   * Create a payments link
   *
   * @param apiPaymentCampaignSaveRequestDto {@link ApiPaymentCampaignSaveRequestDto} Request Body
   * @return response of {@code ApiPaymentCampaignGetResponseDto}
   */
  public ApiPaymentCampaignGetResponseDto createAPaymentsLink(
    @NonNull ApiPaymentCampaignSaveRequestDto apiPaymentCampaignSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAPaymentsLinkRequest(apiPaymentCampaignSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {});
  }

  /**
   * Create a payments link
   *
   * @return response of {@code CompletableFuture<ApiPaymentCampaignGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignGetResponseDto> createAPaymentsLinkAsync() throws ApiError {
    return this.createAPaymentsLinkAsync(ApiPaymentCampaignSaveRequestDto.builder().build());
  }

  /**
   * Create a payments link
   *
   * @param apiPaymentCampaignSaveRequestDto {@link ApiPaymentCampaignSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCampaignGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignGetResponseDto> createAPaymentsLinkAsync(
    @NonNull ApiPaymentCampaignSaveRequestDto apiPaymentCampaignSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAPaymentsLinkRequest(apiPaymentCampaignSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {})
    );
  }

  private Request buildCreateAPaymentsLinkRequest(
    @NonNull ApiPaymentCampaignSaveRequestDto apiPaymentCampaignSaveRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPaymentCampaignSaveRequestDto)
      .build();
  }

  /**
   * Retrieve a single payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code ApiPaymentCampaignGetResponseDto}
   */
  public ApiPaymentCampaignGetResponseDto retrieveASinglePaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {});
  }

  /**
   * Retrieve a single payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCampaignGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignGetResponseDto> retrieveASinglePaymentsLinkAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignUpdateRequestDto {@link ApiPaymentCampaignUpdateRequestDto} Request Body
   * @return response of {@code ApiPaymentCampaignGetResponseDto}
   */
  public ApiPaymentCampaignGetResponseDto updateAPaymentsLink(
    @NonNull String id,
    @NonNull ApiPaymentCampaignUpdateRequestDto apiPaymentCampaignUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateAPaymentsLinkRequest(id, apiPaymentCampaignUpdateRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {});
  }

  /**
   * Update a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignUpdateRequestDto {@link ApiPaymentCampaignUpdateRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCampaignGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignGetResponseDto> updateAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull ApiPaymentCampaignUpdateRequestDto apiPaymentCampaignUpdateRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateAPaymentsLinkRequest(id, apiPaymentCampaignUpdateRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {})
    );
  }

  private Request buildUpdateAPaymentsLinkRequest(
    @NonNull String id,
    @NonNull ApiPaymentCampaignUpdateRequestDto apiPaymentCampaignUpdateRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiPaymentCampaignUpdateRequestDto)
      .build();
  }

  /**
   * Remove a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code ApiPaymentCampaignDeleteResponseDto}
   */
  public ApiPaymentCampaignDeleteResponseDto removeAPaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveAPaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignDeleteResponseDto>() {});
  }

  /**
   * Remove a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCampaignDeleteResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignDeleteResponseDto> removeAPaymentsLinkAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveAPaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveAPaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignPathIdRequestDto {@link ApiPaymentCampaignPathIdRequestDto} Request Body
   * @return response of {@code ApiPaymentCampaignGetResponseDto}
   */
  public ApiPaymentCampaignGetResponseDto restoreAPaymentsLink(
    @NonNull String id,
    @NonNull ApiPaymentCampaignPathIdRequestDto apiPaymentCampaignPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreAPaymentsLinkRequest(id, apiPaymentCampaignPathIdRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {});
  }

  /**
   * Restore a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignPathIdRequestDto {@link ApiPaymentCampaignPathIdRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCampaignGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignGetResponseDto> restoreAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull ApiPaymentCampaignPathIdRequestDto apiPaymentCampaignPathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreAPaymentsLinkRequest(id, apiPaymentCampaignPathIdRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignGetResponseDto>() {})
    );
  }

  private Request buildRestoreAPaymentsLinkRequest(
    @NonNull String id,
    @NonNull ApiPaymentCampaignPathIdRequestDto apiPaymentCampaignPathIdRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiPaymentCampaignPathIdRequestDto)
      .build();
  }

  /**
   * List images from a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code ApiPaymentCampaignFileListResponseDto}
   */
  public ApiPaymentCampaignFileListResponseDto listImagesFromAPaymentsLink(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListImagesFromAPaymentsLinkRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileListResponseDto>() {});
  }

  /**
   * List images from a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileListResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileListResponseDto> listImagesFromAPaymentsLinkAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListImagesFromAPaymentsLinkRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileListResponseDto>() {})
    );
  }

  private Request buildListImagesFromAPaymentsLinkRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/images"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignFileSaveRequestDto {@link ApiPaymentCampaignFileSaveRequestDto} Request Body
   * @return response of {@code ApiPaymentCampaignFileGetResponseDto}
   */
  public ApiPaymentCampaignFileGetResponseDto addAnImageToAPaymentsLink(
    @NonNull String id,
    @NonNull ApiPaymentCampaignFileSaveRequestDto apiPaymentCampaignFileSaveRequestDto
  ) throws ApiError {
    return this.addAnImageToAPaymentsLink(id, apiPaymentCampaignFileSaveRequestDto, null);
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignFileSaveRequestDto {@link ApiPaymentCampaignFileSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiPaymentCampaignFileGetResponseDto}
   */
  public ApiPaymentCampaignFileGetResponseDto addAnImageToAPaymentsLink(
    @NonNull String id,
    @NonNull ApiPaymentCampaignFileSaveRequestDto apiPaymentCampaignFileSaveRequestDto,
    String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildAddAnImageToAPaymentsLinkRequest(id, apiPaymentCampaignFileSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {});
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignFileSaveRequestDto {@link ApiPaymentCampaignFileSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileGetResponseDto> addAnImageToAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull ApiPaymentCampaignFileSaveRequestDto apiPaymentCampaignFileSaveRequestDto
  ) throws ApiError {
    return this.addAnImageToAPaymentsLinkAsync(id, apiPaymentCampaignFileSaveRequestDto, null);
  }

  /**
   * Add an image to a payments link
   *
   * @param id String Unique identifier for your payments link in Asaas
   * @param apiPaymentCampaignFileSaveRequestDto {@link ApiPaymentCampaignFileSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileGetResponseDto> addAnImageToAPaymentsLinkAsync(
    @NonNull String id,
    @NonNull ApiPaymentCampaignFileSaveRequestDto apiPaymentCampaignFileSaveRequestDto,
    String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildAddAnImageToAPaymentsLinkRequest(id, apiPaymentCampaignFileSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {})
    );
  }

  private Request buildAddAnImageToAPaymentsLinkRequest(
    @NonNull String id,
    @NonNull ApiPaymentCampaignFileSaveRequestDto apiPaymentCampaignFileSaveRequestDto,
    String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("id", apiPaymentCampaignFileSaveRequestDto.getId());
    if (apiPaymentCampaignFileSaveRequestDto.getMain() != null) {
      multipartBodyBuilder.addFormDataPart("main", apiPaymentCampaignFileSaveRequestDto.getMain().toString());
    }
    if (apiPaymentCampaignFileSaveRequestDto.getImage() != null) {
      multipartBodyBuilder.addFormDataPart(
        "image",
        _filename != null ? _filename : String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(apiPaymentCampaignFileSaveRequestDto.getImage(), MediaType.parse("application/octet-stream"))
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{id}/images"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Retrieve a single payments link image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code ApiPaymentCampaignFileGetResponseDto}
   */
  public ApiPaymentCampaignFileGetResponseDto retrieveASinglePaymentsLinkImage(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentsLinkImageRequest(paymentLinkId, imageId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {});
  }

  /**
   * Retrieve a single payments link image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileGetResponseDto> retrieveASinglePaymentsLinkImageAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaymentsLinkImageRequest(paymentLinkId, imageId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaymentsLinkImageRequest(@NonNull String paymentLinkId, @NonNull String imageId) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .build();
  }

  /**
   * Remove an image from payments link
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code ApiPaymentCampaignFileDeleteResponseDto}
   */
  public ApiPaymentCampaignFileDeleteResponseDto removeAnImageFromPaymentsLink(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveAnImageFromPaymentsLinkRequest(paymentLinkId, imageId);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileDeleteResponseDto>() {});
  }

  /**
   * Remove an image from payments link
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileDeleteResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileDeleteResponseDto> removeAnImageFromPaymentsLinkAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveAnImageFromPaymentsLinkRequest(paymentLinkId, imageId);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveAnImageFromPaymentsLinkRequest(@NonNull String paymentLinkId, @NonNull String imageId) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .build();
  }

  /**
   * Set payments link main image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @param apiPaymentCampaignFilePathIdRequestDto {@link ApiPaymentCampaignFilePathIdRequestDto} Request Body
   * @return response of {@code ApiPaymentCampaignFileGetResponseDto}
   */
  public ApiPaymentCampaignFileGetResponseDto setPaymentsLinkMainImage(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull ApiPaymentCampaignFilePathIdRequestDto apiPaymentCampaignFilePathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildSetPaymentsLinkMainImageRequest(paymentLinkId, imageId, apiPaymentCampaignFilePathIdRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {});
  }

  /**
   * Set payments link main image
   *
   * @param paymentLinkId String Unique identifier for your payments link in Asaas
   * @param imageId String Unique payment link image identifier in Asaas
   * @param apiPaymentCampaignFilePathIdRequestDto {@link ApiPaymentCampaignFilePathIdRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCampaignFileGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCampaignFileGetResponseDto> setPaymentsLinkMainImageAsync(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull ApiPaymentCampaignFilePathIdRequestDto apiPaymentCampaignFilePathIdRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildSetPaymentsLinkMainImageRequest(paymentLinkId, imageId, apiPaymentCampaignFilePathIdRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCampaignFileGetResponseDto>() {})
    );
  }

  private Request buildSetPaymentsLinkMainImageRequest(
    @NonNull String paymentLinkId,
    @NonNull String imageId,
    @NonNull ApiPaymentCampaignFilePathIdRequestDto apiPaymentCampaignFilePathIdRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentLinks/{paymentLinkId}/images/{imageId}/setAsMain"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("paymentLinkId", paymentLinkId)
      .setPathParameter("imageId", imageId)
      .setJsonContent(apiPaymentCampaignFilePathIdRequestDto)
      .build();
  }
}
