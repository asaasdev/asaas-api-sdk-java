// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiBillGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.CancelBillPaymentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CreateABillPaymentRequest;
import com.asaas.sdk.asaasjavasdk.models.ListBillPaymentsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListBillPaymentsParameters;
import com.asaas.sdk.asaasjavasdk.models.SimulateABillPaymentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SimulateABillPaymentRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListBillPaymentsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * BillService Service
 */
public class BillService extends BaseService {

  public BillService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List bill payments
   *
   * @return response of {@code ListBillPaymentsOkResponse}
   */
  public ListBillPaymentsOkResponse listBillPayments() throws ApiError, ValidationException {
    return this.listBillPayments(ListBillPaymentsParameters.builder().build());
  }

  /**
   * List bill payments
   *
   * @param requestParameters {@link ListBillPaymentsParameters} Request Parameters Object
   * @return response of {@code ListBillPaymentsOkResponse}
   */
  public ListBillPaymentsOkResponse listBillPayments(@NonNull ListBillPaymentsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListBillPaymentsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListBillPaymentsOkResponse>() {});
  }

  /**
   * List bill payments
   *
   * @return response of {@code CompletableFuture<ListBillPaymentsOkResponse>}
   */
  public CompletableFuture<ListBillPaymentsOkResponse> listBillPaymentsAsync() throws ApiError, ValidationException {
    return this.listBillPaymentsAsync(ListBillPaymentsParameters.builder().build());
  }

  /**
   * List bill payments
   *
   * @param requestParameters {@link ListBillPaymentsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListBillPaymentsOkResponse>}
   */
  public CompletableFuture<ListBillPaymentsOkResponse> listBillPaymentsAsync(
    @NonNull ListBillPaymentsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListBillPaymentsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListBillPaymentsOkResponse>() {})
    );
  }

  private Request buildListBillPaymentsRequest(@NonNull ListBillPaymentsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListBillPaymentsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Create a bill payment
   *
   * @return response of {@code ApiBillGetResponseDto}
   */
  public ApiBillGetResponseDto createABillPayment() throws ApiError {
    return this.createABillPayment(CreateABillPaymentRequest.builder().build());
  }

  /**
   * Create a bill payment
   *
   * @param createABillPaymentRequest {@link CreateABillPaymentRequest} Request Body
   * @return response of {@code ApiBillGetResponseDto}
   */
  public ApiBillGetResponseDto createABillPayment(@NonNull CreateABillPaymentRequest createABillPaymentRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateABillPaymentRequest(createABillPaymentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiBillGetResponseDto>() {});
  }

  /**
   * Create a bill payment
   *
   * @return response of {@code CompletableFuture<ApiBillGetResponseDto>}
   */
  public CompletableFuture<ApiBillGetResponseDto> createABillPaymentAsync() throws ApiError {
    return this.createABillPaymentAsync(CreateABillPaymentRequest.builder().build());
  }

  /**
   * Create a bill payment
   *
   * @param createABillPaymentRequest {@link CreateABillPaymentRequest} Request Body
   * @return response of {@code CompletableFuture<ApiBillGetResponseDto>}
   */
  public CompletableFuture<ApiBillGetResponseDto> createABillPaymentAsync(
    @NonNull CreateABillPaymentRequest createABillPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateABillPaymentRequest(createABillPaymentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiBillGetResponseDto>() {})
    );
  }

  private Request buildCreateABillPaymentRequest(@NonNull CreateABillPaymentRequest createABillPaymentRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createABillPaymentRequest)
      .build();
  }

  /**
   * Simulate a bill payment
   *
   * @return response of {@code SimulateABillPaymentOkResponse}
   */
  public SimulateABillPaymentOkResponse simulateABillPayment() throws ApiError {
    return this.simulateABillPayment(SimulateABillPaymentRequest.builder().build());
  }

  /**
   * Simulate a bill payment
   *
   * @param simulateABillPaymentRequest {@link SimulateABillPaymentRequest} Request Body
   * @return response of {@code SimulateABillPaymentOkResponse}
   */
  public SimulateABillPaymentOkResponse simulateABillPayment(
    @NonNull SimulateABillPaymentRequest simulateABillPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateABillPaymentRequest(simulateABillPaymentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SimulateABillPaymentOkResponse>() {});
  }

  /**
   * Simulate a bill payment
   *
   * @return response of {@code CompletableFuture<SimulateABillPaymentOkResponse>}
   */
  public CompletableFuture<SimulateABillPaymentOkResponse> simulateABillPaymentAsync() throws ApiError {
    return this.simulateABillPaymentAsync(SimulateABillPaymentRequest.builder().build());
  }

  /**
   * Simulate a bill payment
   *
   * @param simulateABillPaymentRequest {@link SimulateABillPaymentRequest} Request Body
   * @return response of {@code CompletableFuture<SimulateABillPaymentOkResponse>}
   */
  public CompletableFuture<SimulateABillPaymentOkResponse> simulateABillPaymentAsync(
    @NonNull SimulateABillPaymentRequest simulateABillPaymentRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateABillPaymentRequest(simulateABillPaymentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SimulateABillPaymentOkResponse>() {})
    );
  }

  private Request buildSimulateABillPaymentRequest(@NonNull SimulateABillPaymentRequest simulateABillPaymentRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(simulateABillPaymentRequest)
      .build();
  }

  /**
   * Retrieve a single bill payment
   *
   * @param id String Unique bill payment identifier in Asaas
   * @return response of {@code ApiBillGetResponseDto}
   */
  public ApiBillGetResponseDto retrieveASingleBillPayment(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleBillPaymentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiBillGetResponseDto>() {});
  }

  /**
   * Retrieve a single bill payment
   *
   * @param id String Unique bill payment identifier in Asaas
   * @return response of {@code CompletableFuture<ApiBillGetResponseDto>}
   */
  public CompletableFuture<ApiBillGetResponseDto> retrieveASingleBillPaymentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleBillPaymentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiBillGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleBillPaymentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Cancel bill payments
   *
   * @param id String Unique identifier of the bill payment to be cancelled
   * @param input Object Request Body
   * @return response of {@code CancelBillPaymentOkResponse}
   */
  public CancelBillPaymentOkResponse cancelBillPayment(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelBillPaymentRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CancelBillPaymentOkResponse>() {});
  }

  /**
   * Cancel bill payments
   *
   * @param id String Unique identifier of the bill payment to be cancelled
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<CancelBillPaymentOkResponse>}
   */
  public CompletableFuture<CancelBillPaymentOkResponse> cancelBillPaymentAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelBillPaymentRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CancelBillPaymentOkResponse>() {})
    );
  }

  private Request buildCancelBillPaymentRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/bill/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
