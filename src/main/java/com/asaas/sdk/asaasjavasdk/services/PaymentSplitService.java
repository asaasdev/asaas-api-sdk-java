// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentSplitGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentSplitListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ListPaidSplitsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaidSplitsParameters;
import com.asaas.sdk.asaasjavasdk.models.ListReceivedSplitsParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaidSplitsParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListReceivedSplitsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PaymentSplitService Service
 */
public class PaymentSplitService extends BaseService {

  public PaymentSplitService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve a single paid split
   *
   * @param id String Unique split identifier in Asaas
   * @return response of {@code ApiPaymentSplitGetResponseDto}
   */
  public ApiPaymentSplitGetResponseDto retrieveASinglePaidSplit(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaidSplitRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentSplitGetResponseDto>() {});
  }

  /**
   * Retrieve a single paid split
   *
   * @param id String Unique split identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentSplitGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentSplitGetResponseDto> retrieveASinglePaidSplitAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASinglePaidSplitRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentSplitGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASinglePaidSplitRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/splits/paid/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List paid splits
   *
   * @return response of {@code ListPaidSplitsOkResponse}
   */
  public ListPaidSplitsOkResponse listPaidSplits() throws ApiError, ValidationException {
    return this.listPaidSplits(ListPaidSplitsParameters.builder().build());
  }

  /**
   * List paid splits
   *
   * @param requestParameters {@link ListPaidSplitsParameters} Request Parameters Object
   * @return response of {@code ListPaidSplitsOkResponse}
   */
  public ListPaidSplitsOkResponse listPaidSplits(@NonNull ListPaidSplitsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaidSplitsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListPaidSplitsOkResponse>() {});
  }

  /**
   * List paid splits
   *
   * @return response of {@code CompletableFuture<ListPaidSplitsOkResponse>}
   */
  public CompletableFuture<ListPaidSplitsOkResponse> listPaidSplitsAsync() throws ApiError, ValidationException {
    return this.listPaidSplitsAsync(ListPaidSplitsParameters.builder().build());
  }

  /**
   * List paid splits
   *
   * @param requestParameters {@link ListPaidSplitsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListPaidSplitsOkResponse>}
   */
  public CompletableFuture<ListPaidSplitsOkResponse> listPaidSplitsAsync(
    @NonNull ListPaidSplitsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaidSplitsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListPaidSplitsOkResponse>() {})
    );
  }

  private Request buildListPaidSplitsRequest(@NonNull ListPaidSplitsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaidSplitsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/splits/paid"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("paymentId", requestParameters.getPaymentId())
      .setOptionalQueryParameter("paymentConfirmedDate[ge]", requestParameters.getPaymentConfirmedDateGe())
      .setOptionalQueryParameter("paymentConfirmedDate[le]", requestParameters.getPaymentConfirmedDateLe())
      .setOptionalQueryParameter("creditDate[ge]", requestParameters.getCreditDateGe())
      .setOptionalQueryParameter("creditDate[le]", requestParameters.getCreditDateLe());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Retrieve a single received split
   *
   * @param id String Unique split identifier in Asaas
   * @return response of {@code ApiPaymentSplitGetResponseDto}
   */
  public ApiPaymentSplitGetResponseDto retrieveASingleReceivedSplit(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleReceivedSplitRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentSplitGetResponseDto>() {});
  }

  /**
   * Retrieve a single received split
   *
   * @param id String Unique split identifier in Asaas
   * @return response of {@code CompletableFuture<ApiPaymentSplitGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentSplitGetResponseDto> retrieveASingleReceivedSplitAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleReceivedSplitRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentSplitGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleReceivedSplitRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/splits/received/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List received splits
   *
   * @return response of {@code ApiPaymentSplitListResponseDto}
   */
  public ApiPaymentSplitListResponseDto listReceivedSplits() throws ApiError, ValidationException {
    return this.listReceivedSplits(ListReceivedSplitsParameters.builder().build());
  }

  /**
   * List received splits
   *
   * @param requestParameters {@link ListReceivedSplitsParameters} Request Parameters Object
   * @return response of {@code ApiPaymentSplitListResponseDto}
   */
  public ApiPaymentSplitListResponseDto listReceivedSplits(@NonNull ListReceivedSplitsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListReceivedSplitsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentSplitListResponseDto>() {});
  }

  /**
   * List received splits
   *
   * @return response of {@code CompletableFuture<ApiPaymentSplitListResponseDto>}
   */
  public CompletableFuture<ApiPaymentSplitListResponseDto> listReceivedSplitsAsync()
    throws ApiError, ValidationException {
    return this.listReceivedSplitsAsync(ListReceivedSplitsParameters.builder().build());
  }

  /**
   * List received splits
   *
   * @param requestParameters {@link ListReceivedSplitsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPaymentSplitListResponseDto>}
   */
  public CompletableFuture<ApiPaymentSplitListResponseDto> listReceivedSplitsAsync(
    @NonNull ListReceivedSplitsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListReceivedSplitsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentSplitListResponseDto>() {})
    );
  }

  private Request buildListReceivedSplitsRequest(@NonNull ListReceivedSplitsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListReceivedSplitsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/payments/splits/received"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("paymentId", requestParameters.getPaymentId())
      .setOptionalQueryParameter("paymentConfirmedDate[ge]", requestParameters.getPaymentConfirmedDateGe())
      .setOptionalQueryParameter("paymentConfirmedDate[le]", requestParameters.getPaymentConfirmedDateLe())
      .setOptionalQueryParameter("creditDate[ge]", requestParameters.getCreditDateGe())
      .setOptionalQueryParameter("creditDate[le]", requestParameters.getCreditDateLe());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }
}
