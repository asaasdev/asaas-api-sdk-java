// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiReceivableAnticipationConfigurationGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiReceivableAnticipationGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.CancelAnticipationOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListAnticipationsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListAnticipationsParameters;
import com.asaas.sdk.asaasjavasdk.models.RequestAnticipationRequest;
import com.asaas.sdk.asaasjavasdk.models.RetrieveAnticipationLimitsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveStatusOfAutomaticAnticipationOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SimulateAnticipationOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SimulateAnticipationRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateStatusOfAutomaticAnticipationRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListAnticipationsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AnticipationService Service
 */
public class AnticipationService extends BaseService {

  public AnticipationService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve a single anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @return response of {@code ApiReceivableAnticipationGetResponseDto}
   */
  public ApiReceivableAnticipationGetResponseDto retrieveASingleAnticipation(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleAnticipationRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiReceivableAnticipationGetResponseDto>() {});
  }

  /**
   * Retrieve a single anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @return response of {@code CompletableFuture<ApiReceivableAnticipationGetResponseDto>}
   */
  public CompletableFuture<ApiReceivableAnticipationGetResponseDto> retrieveASingleAnticipationAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleAnticipationRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiReceivableAnticipationGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleAnticipationRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List anticipations
   *
   * @return response of {@code ListAnticipationsOkResponse}
   */
  public ListAnticipationsOkResponse listAnticipations() throws ApiError, ValidationException {
    return this.listAnticipations(ListAnticipationsParameters.builder().build());
  }

  /**
   * List anticipations
   *
   * @param requestParameters {@link ListAnticipationsParameters} Request Parameters Object
   * @return response of {@code ListAnticipationsOkResponse}
   */
  public ListAnticipationsOkResponse listAnticipations(@NonNull ListAnticipationsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListAnticipationsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListAnticipationsOkResponse>() {});
  }

  /**
   * List anticipations
   *
   * @return response of {@code CompletableFuture<ListAnticipationsOkResponse>}
   */
  public CompletableFuture<ListAnticipationsOkResponse> listAnticipationsAsync() throws ApiError, ValidationException {
    return this.listAnticipationsAsync(ListAnticipationsParameters.builder().build());
  }

  /**
   * List anticipations
   *
   * @param requestParameters {@link ListAnticipationsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListAnticipationsOkResponse>}
   */
  public CompletableFuture<ListAnticipationsOkResponse> listAnticipationsAsync(
    @NonNull ListAnticipationsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListAnticipationsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListAnticipationsOkResponse>() {})
    );
  }

  private Request buildListAnticipationsRequest(@NonNull ListAnticipationsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListAnticipationsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("installment", requestParameters.getInstallment());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    return builder.build();
  }

  /**
   * Request anticipation
   *
   * @return response of {@code ApiReceivableAnticipationGetResponseDto}
   */
  public ApiReceivableAnticipationGetResponseDto requestAnticipation() throws ApiError {
    return this.requestAnticipation(RequestAnticipationRequest.builder().build());
  }

  /**
   * Request anticipation
   *
   * @param requestAnticipationRequest {@link RequestAnticipationRequest} Request Body
   * @return response of {@code ApiReceivableAnticipationGetResponseDto}
   */
  public ApiReceivableAnticipationGetResponseDto requestAnticipation(
    @NonNull RequestAnticipationRequest requestAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRequestAnticipationRequest(requestAnticipationRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiReceivableAnticipationGetResponseDto>() {});
  }

  /**
   * Request anticipation
   *
   * @return response of {@code CompletableFuture<ApiReceivableAnticipationGetResponseDto>}
   */
  public CompletableFuture<ApiReceivableAnticipationGetResponseDto> requestAnticipationAsync() throws ApiError {
    return this.requestAnticipationAsync(RequestAnticipationRequest.builder().build());
  }

  /**
   * Request anticipation
   *
   * @param requestAnticipationRequest {@link RequestAnticipationRequest} Request Body
   * @return response of {@code CompletableFuture<ApiReceivableAnticipationGetResponseDto>}
   */
  public CompletableFuture<ApiReceivableAnticipationGetResponseDto> requestAnticipationAsync(
    @NonNull RequestAnticipationRequest requestAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRequestAnticipationRequest(requestAnticipationRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiReceivableAnticipationGetResponseDto>() {})
    );
  }

  private Request buildRequestAnticipationRequest(@NonNull RequestAnticipationRequest requestAnticipationRequest) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("installment", requestAnticipationRequest.getInstallment())
      .addFormDataPart("payment", requestAnticipationRequest.getPayment());
    if (requestAnticipationRequest.getDocuments() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documents",
        String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          requestAnticipationRequest.getDocuments().toString(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Simulate anticipation
   *
   * @return response of {@code SimulateAnticipationOkResponse}
   */
  public SimulateAnticipationOkResponse simulateAnticipation() throws ApiError {
    return this.simulateAnticipation(SimulateAnticipationRequest.builder().build());
  }

  /**
   * Simulate anticipation
   *
   * @param simulateAnticipationRequest {@link SimulateAnticipationRequest} Request Body
   * @return response of {@code SimulateAnticipationOkResponse}
   */
  public SimulateAnticipationOkResponse simulateAnticipation(
    @NonNull SimulateAnticipationRequest simulateAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateAnticipationRequest(simulateAnticipationRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SimulateAnticipationOkResponse>() {});
  }

  /**
   * Simulate anticipation
   *
   * @return response of {@code CompletableFuture<SimulateAnticipationOkResponse>}
   */
  public CompletableFuture<SimulateAnticipationOkResponse> simulateAnticipationAsync() throws ApiError {
    return this.simulateAnticipationAsync(SimulateAnticipationRequest.builder().build());
  }

  /**
   * Simulate anticipation
   *
   * @param simulateAnticipationRequest {@link SimulateAnticipationRequest} Request Body
   * @return response of {@code CompletableFuture<SimulateAnticipationOkResponse>}
   */
  public CompletableFuture<SimulateAnticipationOkResponse> simulateAnticipationAsync(
    @NonNull SimulateAnticipationRequest simulateAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateAnticipationRequest(simulateAnticipationRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SimulateAnticipationOkResponse>() {})
    );
  }

  private Request buildSimulateAnticipationRequest(@NonNull SimulateAnticipationRequest simulateAnticipationRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(simulateAnticipationRequest)
      .build();
  }

  /**
   * Retrieve status of automatic anticipation
   *
   * @return response of {@code RetrieveStatusOfAutomaticAnticipationOkResponse}
   */
  public RetrieveStatusOfAutomaticAnticipationOkResponse retrieveStatusOfAutomaticAnticipation() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveStatusOfAutomaticAnticipationRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveStatusOfAutomaticAnticipationOkResponse>() {});
  }

  /**
   * Retrieve status of automatic anticipation
   *
   * @return response of {@code CompletableFuture<RetrieveStatusOfAutomaticAnticipationOkResponse>}
   */
  public CompletableFuture<
    RetrieveStatusOfAutomaticAnticipationOkResponse
  > retrieveStatusOfAutomaticAnticipationAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveStatusOfAutomaticAnticipationRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveStatusOfAutomaticAnticipationOkResponse>() {})
    );
  }

  private Request buildRetrieveStatusOfAutomaticAnticipationRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/configurations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Update status of automatic anticipation
   *
   * @return response of {@code ApiReceivableAnticipationConfigurationGetResponseDto}
   */
  public ApiReceivableAnticipationConfigurationGetResponseDto updateStatusOfAutomaticAnticipation() throws ApiError {
    return this.updateStatusOfAutomaticAnticipation(UpdateStatusOfAutomaticAnticipationRequest.builder().build());
  }

  /**
   * Update status of automatic anticipation
   *
   * @param updateStatusOfAutomaticAnticipationRequest {@link UpdateStatusOfAutomaticAnticipationRequest} Request Body
   * @return response of {@code ApiReceivableAnticipationConfigurationGetResponseDto}
   */
  public ApiReceivableAnticipationConfigurationGetResponseDto updateStatusOfAutomaticAnticipation(
    @NonNull UpdateStatusOfAutomaticAnticipationRequest updateStatusOfAutomaticAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateStatusOfAutomaticAnticipationRequest(updateStatusOfAutomaticAnticipationRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(
      response,
      new TypeReference<ApiReceivableAnticipationConfigurationGetResponseDto>() {}
    );
  }

  /**
   * Update status of automatic anticipation
   *
   * @return response of {@code CompletableFuture<ApiReceivableAnticipationConfigurationGetResponseDto>}
   */
  public CompletableFuture<
    ApiReceivableAnticipationConfigurationGetResponseDto
  > updateStatusOfAutomaticAnticipationAsync() throws ApiError {
    return this.updateStatusOfAutomaticAnticipationAsync(UpdateStatusOfAutomaticAnticipationRequest.builder().build());
  }

  /**
   * Update status of automatic anticipation
   *
   * @param updateStatusOfAutomaticAnticipationRequest {@link UpdateStatusOfAutomaticAnticipationRequest} Request Body
   * @return response of {@code CompletableFuture<ApiReceivableAnticipationConfigurationGetResponseDto>}
   */
  public CompletableFuture<
    ApiReceivableAnticipationConfigurationGetResponseDto
  > updateStatusOfAutomaticAnticipationAsync(
    @NonNull UpdateStatusOfAutomaticAnticipationRequest updateStatusOfAutomaticAnticipationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateStatusOfAutomaticAnticipationRequest(updateStatusOfAutomaticAnticipationRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiReceivableAnticipationConfigurationGetResponseDto>() {})
    );
  }

  private Request buildUpdateStatusOfAutomaticAnticipationRequest(
    @NonNull UpdateStatusOfAutomaticAnticipationRequest updateStatusOfAutomaticAnticipationRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/configurations"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(updateStatusOfAutomaticAnticipationRequest)
      .build();
  }

  /**
   * Retrieve anticipation limits
   *
   * @return response of {@code RetrieveAnticipationLimitsOkResponse}
   */
  public RetrieveAnticipationLimitsOkResponse retrieveAnticipationLimits() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAnticipationLimitsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveAnticipationLimitsOkResponse>() {});
  }

  /**
   * Retrieve anticipation limits
   *
   * @return response of {@code CompletableFuture<RetrieveAnticipationLimitsOkResponse>}
   */
  public CompletableFuture<RetrieveAnticipationLimitsOkResponse> retrieveAnticipationLimitsAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAnticipationLimitsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveAnticipationLimitsOkResponse>() {})
    );
  }

  private Request buildRetrieveAnticipationLimitsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/limits"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Cancel anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @param input Object Request Body
   * @return response of {@code CancelAnticipationOkResponse}
   */
  public CancelAnticipationOkResponse cancelAnticipation(@NonNull String id, @NonNull Object input) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAnticipationRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CancelAnticipationOkResponse>() {});
  }

  /**
   * Cancel anticipation
   *
   * @param id String Unique identifier of anticipation in Asaas
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<CancelAnticipationOkResponse>}
   */
  public CompletableFuture<CancelAnticipationOkResponse> cancelAnticipationAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAnticipationRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CancelAnticipationOkResponse>() {})
    );
  }

  private Request buildCancelAnticipationRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/anticipations/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
