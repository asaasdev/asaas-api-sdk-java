// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCreditCardTokenizeRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiCreditCardTokenizeResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CreditCardService Service
 */
public class CreditCardService extends BaseService {

  public CreditCardService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Credit card tokenization
   *
   * @return response of {@code ApiCreditCardTokenizeResponseDto}
   */
  public ApiCreditCardTokenizeResponseDto creditCardTokenization() throws ApiError {
    return this.creditCardTokenization(ApiCreditCardTokenizeRequestDto.builder().build());
  }

  /**
   * Credit card tokenization
   *
   * @param apiCreditCardTokenizeRequestDto {@link ApiCreditCardTokenizeRequestDto} Request Body
   * @return response of {@code ApiCreditCardTokenizeResponseDto}
   */
  public ApiCreditCardTokenizeResponseDto creditCardTokenization(
    @NonNull ApiCreditCardTokenizeRequestDto apiCreditCardTokenizeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreditCardTokenizationRequest(apiCreditCardTokenizeRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCreditCardTokenizeResponseDto>() {});
  }

  /**
   * Credit card tokenization
   *
   * @return response of {@code CompletableFuture<ApiCreditCardTokenizeResponseDto>}
   */
  public CompletableFuture<ApiCreditCardTokenizeResponseDto> creditCardTokenizationAsync() throws ApiError {
    return this.creditCardTokenizationAsync(ApiCreditCardTokenizeRequestDto.builder().build());
  }

  /**
   * Credit card tokenization
   *
   * @param apiCreditCardTokenizeRequestDto {@link ApiCreditCardTokenizeRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiCreditCardTokenizeResponseDto>}
   */
  public CompletableFuture<ApiCreditCardTokenizeResponseDto> creditCardTokenizationAsync(
    @NonNull ApiCreditCardTokenizeRequestDto apiCreditCardTokenizeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCreditCardTokenizationRequest(apiCreditCardTokenizeRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCreditCardTokenizeResponseDto>() {})
    );
  }

  private Request buildCreditCardTokenizationRequest(
    @NonNull ApiCreditCardTokenizeRequestDto apiCreditCardTokenizeRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/creditCard/tokenizeCreditCard"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiCreditCardTokenizeRequestDto)
      .build();
  }
}
