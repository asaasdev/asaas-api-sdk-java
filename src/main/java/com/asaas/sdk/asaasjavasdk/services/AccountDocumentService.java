// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.exceptions.UpdateSentDocument400Response;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentSaveRequestCustomerDocumentType;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.CheckPendingDocumentsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RemoveSentDocumentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SendDocumentsViaApiRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateSentDocument400ResponseModel;
import com.asaas.sdk.asaasjavasdk.models.UpdateSentDocumentOkResponse;
import com.asaas.sdk.asaasjavasdk.models.UpdateSentDocumentRequest;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AccountDocumentService Service
 */
public class AccountDocumentService extends BaseService {

  public AccountDocumentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Check pending documents
   *
   * @return response of {@code CheckPendingDocumentsOkResponse}
   */
  public CheckPendingDocumentsOkResponse checkPendingDocuments() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CheckPendingDocumentsOkResponse>() {});
  }

  /**
   * Check pending documents
   *
   * @return response of {@code CompletableFuture<CheckPendingDocumentsOkResponse>}
   */
  public CompletableFuture<CheckPendingDocumentsOkResponse> checkPendingDocumentsAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CheckPendingDocumentsOkResponse>() {})
    );
  }

  private Request buildCheckPendingDocumentsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Send documents via API
   *
   * @param id String Unique document identifier in Asaas
   * @param sendDocumentsViaApiRequest {@link SendDocumentsViaApiRequest} Request Body
   * @return response of {@code ApiAccountDocumentGetResponseDto}
   */
  public ApiAccountDocumentGetResponseDto sendDocumentsViaApi(
    @NonNull String id,
    @NonNull SendDocumentsViaApiRequest sendDocumentsViaApiRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSendDocumentsViaApiRequest(id, sendDocumentsViaApiRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {});
  }

  /**
   * Send documents via API
   *
   * @param id String Unique document identifier in Asaas
   * @param sendDocumentsViaApiRequest {@link SendDocumentsViaApiRequest} Request Body
   * @return response of {@code CompletableFuture<ApiAccountDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentGetResponseDto> sendDocumentsViaApiAsync(
    @NonNull String id,
    @NonNull SendDocumentsViaApiRequest sendDocumentsViaApiRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSendDocumentsViaApiRequest(id, sendDocumentsViaApiRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildSendDocumentsViaApiRequest(
    @NonNull String id,
    @NonNull SendDocumentsViaApiRequest sendDocumentsViaApiRequest
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
    if (sendDocumentsViaApiRequest.getDocumentFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documentFile",
        String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          sendDocumentsViaApiRequest.getDocumentFile().toString(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    if (sendDocumentsViaApiRequest.getType() != null) {
      multipartBodyBuilder.addFormDataPart("type", sendDocumentsViaApiRequest.getType().getValue());
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code ApiAccountDocumentGetResponseDto}
   */
  public ApiAccountDocumentGetResponseDto viewDocumentSent(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildViewDocumentSentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {});
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<ApiAccountDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentGetResponseDto> viewDocumentSentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildViewDocumentSentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildViewDocumentSentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param updateSentDocumentRequest {@link UpdateSentDocumentRequest} Request Body
   * @return response of {@code UpdateSentDocumentOkResponse}
   */
  public UpdateSentDocumentOkResponse updateSentDocument(
    @NonNull String id,
    @NonNull UpdateSentDocumentRequest updateSentDocumentRequest
  ) throws ApiError {
    this.addErrorMapping(400, UpdateSentDocument400ResponseModel.class, UpdateSentDocument400Response.class);
    Request request = this.buildUpdateSentDocumentRequest(id, updateSentDocumentRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<UpdateSentDocumentOkResponse>() {});
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param updateSentDocumentRequest {@link UpdateSentDocumentRequest} Request Body
   * @return response of {@code CompletableFuture<UpdateSentDocumentOkResponse>}
   */
  public CompletableFuture<UpdateSentDocumentOkResponse> updateSentDocumentAsync(
    @NonNull String id,
    @NonNull UpdateSentDocumentRequest updateSentDocumentRequest
  ) throws ApiError {
    this.addErrorMapping(400, UpdateSentDocument400ResponseModel.class, UpdateSentDocument400Response.class);
    Request request = this.buildUpdateSentDocumentRequest(id, updateSentDocumentRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<UpdateSentDocumentOkResponse>() {})
    );
  }

  private Request buildUpdateSentDocumentRequest(
    @NonNull String id,
    @NonNull UpdateSentDocumentRequest updateSentDocumentRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "documentFile",
            String.format("file_%s", UUID.randomUUID()),
            RequestBody.create(
              updateSentDocumentRequest.getDocumentFile().toString(),
              MediaType.parse("application/octet-stream")
            )
          )
          .build()
      )
      .build();
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code RemoveSentDocumentOkResponse}
   */
  public RemoveSentDocumentOkResponse removeSentDocument(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RemoveSentDocumentOkResponse>() {});
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<RemoveSentDocumentOkResponse>}
   */
  public CompletableFuture<RemoveSentDocumentOkResponse> removeSentDocumentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RemoveSentDocumentOkResponse>() {})
    );
  }

  private Request buildRemoveSentDocumentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
