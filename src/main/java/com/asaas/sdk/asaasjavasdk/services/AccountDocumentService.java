// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDtoException;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentDeleteResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentSaveRequestCustomerDocumentType;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentShowResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiAccountDocumentUpdateRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AccountDocumentService Service
 */
public class AccountDocumentService extends BaseService {

  public AccountDocumentService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Check pending documents
   *
   * @return response of {@code ApiAccountDocumentShowResponseDto}
   */
  public ApiAccountDocumentShowResponseDto checkPendingDocuments() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentShowResponseDto>() {});
  }

  /**
   * Check pending documents
   *
   * @return response of {@code CompletableFuture<ApiAccountDocumentShowResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentShowResponseDto> checkPendingDocumentsAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildCheckPendingDocumentsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentShowResponseDto>() {})
    );
  }

  private Request buildCheckPendingDocumentsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Send documents via API
   *
   * @param id String Unique document identifier in Asaas
   * @param apiAccountDocumentSaveRequestDto {@link ApiAccountDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiAccountDocumentGetResponseDto}
   */
  public ApiAccountDocumentGetResponseDto sendDocumentsViaApi(
    @NonNull String id,
    @NonNull ApiAccountDocumentSaveRequestDto apiAccountDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildSendDocumentsViaApiRequest(id, apiAccountDocumentSaveRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {});
  }

  /**
   * Send documents via API
   *
   * @param id String Unique document identifier in Asaas
   * @param apiAccountDocumentSaveRequestDto {@link ApiAccountDocumentSaveRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiAccountDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentGetResponseDto> sendDocumentsViaApiAsync(
    @NonNull String id,
    @NonNull ApiAccountDocumentSaveRequestDto apiAccountDocumentSaveRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildSendDocumentsViaApiRequest(id, apiAccountDocumentSaveRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildSendDocumentsViaApiRequest(
    @NonNull String id,
    @NonNull ApiAccountDocumentSaveRequestDto apiAccountDocumentSaveRequestDto,
    @NonNull String _filename
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder().setType(MultipartBody.FORM);
    if (apiAccountDocumentSaveRequestDto.getDocumentFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documentFile",
        _filename,
        RequestBody.create(
          apiAccountDocumentSaveRequestDto.getDocumentFile(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    if (apiAccountDocumentSaveRequestDto.getType() != null) {
      multipartBodyBuilder.addFormDataPart("type", apiAccountDocumentSaveRequestDto.getType().getValue());
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code ApiAccountDocumentGetResponseDto}
   */
  public ApiAccountDocumentGetResponseDto viewDocumentSent(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildViewDocumentSentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {});
  }

  /**
   * View document sent
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<ApiAccountDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentGetResponseDto> viewDocumentSentAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildViewDocumentSentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildViewDocumentSentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param apiAccountDocumentUpdateRequestDto {@link ApiAccountDocumentUpdateRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code ApiAccountDocumentGetResponseDto}
   */
  public ApiAccountDocumentGetResponseDto updateSentDocument(
    @NonNull String id,
    @NonNull ApiAccountDocumentUpdateRequestDto apiAccountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateSentDocumentRequest(id, apiAccountDocumentUpdateRequestDto, _filename);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {});
  }

  /**
   * Update sent document
   *
   * @param id String Unique document identifier in Asaas
   * @param apiAccountDocumentUpdateRequestDto {@link ApiAccountDocumentUpdateRequestDto} Request Body
   * @param _filename String Filename for the uploaded file
   * @return response of {@code CompletableFuture<ApiAccountDocumentGetResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentGetResponseDto> updateSentDocumentAsync(
    @NonNull String id,
    @NonNull ApiAccountDocumentUpdateRequestDto apiAccountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildUpdateSentDocumentRequest(id, apiAccountDocumentUpdateRequestDto, _filename);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentGetResponseDto>() {})
    );
  }

  private Request buildUpdateSentDocumentRequest(
    @NonNull String id,
    @NonNull ApiAccountDocumentUpdateRequestDto apiAccountDocumentUpdateRequestDto,
    @NonNull String _filename
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "documentFile",
            _filename,
            RequestBody.create(
              apiAccountDocumentUpdateRequestDto.getDocumentFile(),
              MediaType.parse("application/octet-stream")
            )
          )
          .build()
      )
      .build();
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code ApiAccountDocumentDeleteResponseDto}
   */
  public ApiAccountDocumentDeleteResponseDto removeSentDocument(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiAccountDocumentDeleteResponseDto>() {});
  }

  /**
   * Remove sent document
   *
   * @param id String Unique document identifier in Asaas
   * @return response of {@code CompletableFuture<ApiAccountDocumentDeleteResponseDto>}
   */
  public CompletableFuture<ApiAccountDocumentDeleteResponseDto> removeSentDocumentAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDto.class, ApiErrorResponseDtoException.class);
    Request request = this.buildRemoveSentDocumentRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiAccountDocumentDeleteResponseDto>() {})
    );
  }

  private Request buildRemoveSentDocumentRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/documents/files/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
