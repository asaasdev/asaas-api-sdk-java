// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentDunningSaveRequestPaymentDunningType;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentDunningShowResponseDto;
import com.asaas.sdk.asaasjavasdk.models.CancelPaymentDunningOkResponse;
import com.asaas.sdk.asaasjavasdk.models.CreateAPaymentDunningRequest;
import com.asaas.sdk.asaasjavasdk.models.EventHistoryListsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.EventHistoryListsParameters;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentDunningsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentDunningsParameters;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsAvailableForPaymentDunningOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsAvailableForPaymentDunningParameters;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsReceivedOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListPaymentsReceivedParameters;
import com.asaas.sdk.asaasjavasdk.models.RecoverASinglePaymentDunningOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ResendDocumentsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ResendDocumentsRequest;
import com.asaas.sdk.asaasjavasdk.models.SimulateAPaymentDunningOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SimulateAPaymentDunningParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.EventHistoryListsParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaymentDunningsParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaymentsAvailableForPaymentDunningParametersValidator;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListPaymentsReceivedParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * PaymentDunningService Service
 */
public class PaymentDunningService extends BaseService {

  public PaymentDunningService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List payment dunnings
   *
   * @return response of {@code ListPaymentDunningsOkResponse}
   */
  public ListPaymentDunningsOkResponse listPaymentDunnings() throws ApiError, ValidationException {
    return this.listPaymentDunnings(ListPaymentDunningsParameters.builder().build());
  }

  /**
   * List payment dunnings
   *
   * @param requestParameters {@link ListPaymentDunningsParameters} Request Parameters Object
   * @return response of {@code ListPaymentDunningsOkResponse}
   */
  public ListPaymentDunningsOkResponse listPaymentDunnings(@NonNull ListPaymentDunningsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentDunningsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListPaymentDunningsOkResponse>() {});
  }

  /**
   * List payment dunnings
   *
   * @return response of {@code CompletableFuture<ListPaymentDunningsOkResponse>}
   */
  public CompletableFuture<ListPaymentDunningsOkResponse> listPaymentDunningsAsync()
    throws ApiError, ValidationException {
    return this.listPaymentDunningsAsync(ListPaymentDunningsParameters.builder().build());
  }

  /**
   * List payment dunnings
   *
   * @param requestParameters {@link ListPaymentDunningsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListPaymentDunningsOkResponse>}
   */
  public CompletableFuture<ListPaymentDunningsOkResponse> listPaymentDunningsAsync(
    @NonNull ListPaymentDunningsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentDunningsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListPaymentDunningsOkResponse>() {})
    );
  }

  private Request buildListPaymentDunningsRequest(@NonNull ListPaymentDunningsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentDunningsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setOptionalQueryParameter("requestStartDate", requestParameters.getRequestStartDate())
      .setOptionalQueryParameter("requestEndDate", requestParameters.getRequestEndDate());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getType() != null) {
      builder.setOptionalQueryParameter("type", requestParameters.getType().getValue());
    }
    return builder.build();
  }

  /**
   * Create a payment dunning
   *
   * @return response of {@code ApiPaymentDunningShowResponseDto}
   */
  public ApiPaymentDunningShowResponseDto createAPaymentDunning() throws ApiError {
    return this.createAPaymentDunning(CreateAPaymentDunningRequest.builder().build());
  }

  /**
   * Create a payment dunning
   *
   * @param createAPaymentDunningRequest {@link CreateAPaymentDunningRequest} Request Body
   * @return response of {@code ApiPaymentDunningShowResponseDto}
   */
  public ApiPaymentDunningShowResponseDto createAPaymentDunning(
    @NonNull CreateAPaymentDunningRequest createAPaymentDunningRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAPaymentDunningRequest(createAPaymentDunningRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentDunningShowResponseDto>() {});
  }

  /**
   * Create a payment dunning
   *
   * @return response of {@code CompletableFuture<ApiPaymentDunningShowResponseDto>}
   */
  public CompletableFuture<ApiPaymentDunningShowResponseDto> createAPaymentDunningAsync() throws ApiError {
    return this.createAPaymentDunningAsync(CreateAPaymentDunningRequest.builder().build());
  }

  /**
   * Create a payment dunning
   *
   * @param createAPaymentDunningRequest {@link CreateAPaymentDunningRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentDunningShowResponseDto>}
   */
  public CompletableFuture<ApiPaymentDunningShowResponseDto> createAPaymentDunningAsync(
    @NonNull CreateAPaymentDunningRequest createAPaymentDunningRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateAPaymentDunningRequest(createAPaymentDunningRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentDunningShowResponseDto>() {})
    );
  }

  private Request buildCreateAPaymentDunningRequest(
    @NonNull CreateAPaymentDunningRequest createAPaymentDunningRequest
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("payment", createAPaymentDunningRequest.getPayment())
      .addFormDataPart("type", createAPaymentDunningRequest.getType().getValue())
      .addFormDataPart("description", createAPaymentDunningRequest.getDescription())
      .addFormDataPart("customerName", createAPaymentDunningRequest.getCustomerName())
      .addFormDataPart("customerCpfCnpj", createAPaymentDunningRequest.getCustomerCpfCnpj())
      .addFormDataPart("customerPrimaryPhone", createAPaymentDunningRequest.getCustomerPrimaryPhone())
      .addFormDataPart("customerSecondaryPhone", createAPaymentDunningRequest.getCustomerSecondaryPhone())
      .addFormDataPart("customerPostalCode", createAPaymentDunningRequest.getCustomerPostalCode())
      .addFormDataPart("customerAddress", createAPaymentDunningRequest.getCustomerAddress())
      .addFormDataPart("customerAddressNumber", createAPaymentDunningRequest.getCustomerAddressNumber())
      .addFormDataPart("customerComplement", createAPaymentDunningRequest.getCustomerComplement())
      .addFormDataPart("customerProvince", createAPaymentDunningRequest.getCustomerProvince());
    if (createAPaymentDunningRequest.getDocuments() != null) {
      multipartBodyBuilder.addFormDataPart(
        "documents",
        String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          createAPaymentDunningRequest.getDocuments().toString(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Simulate a payment dunning
   *
   * @return response of {@code SimulateAPaymentDunningOkResponse}
   */
  public SimulateAPaymentDunningOkResponse simulateAPaymentDunning() throws ApiError {
    return this.simulateAPaymentDunning(SimulateAPaymentDunningParameters.builder().build());
  }

  /**
   * Simulate a payment dunning
   *
   * @param requestParameters {@link SimulateAPaymentDunningParameters} Request Parameters Object
   * @return response of {@code SimulateAPaymentDunningOkResponse}
   */
  public SimulateAPaymentDunningOkResponse simulateAPaymentDunning(
    @NonNull SimulateAPaymentDunningParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateAPaymentDunningRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<SimulateAPaymentDunningOkResponse>() {});
  }

  /**
   * Simulate a payment dunning
   *
   * @return response of {@code CompletableFuture<SimulateAPaymentDunningOkResponse>}
   */
  public CompletableFuture<SimulateAPaymentDunningOkResponse> simulateAPaymentDunningAsync() throws ApiError {
    return this.simulateAPaymentDunningAsync(SimulateAPaymentDunningParameters.builder().build());
  }

  /**
   * Simulate a payment dunning
   *
   * @param requestParameters {@link SimulateAPaymentDunningParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<SimulateAPaymentDunningOkResponse>}
   */
  public CompletableFuture<SimulateAPaymentDunningOkResponse> simulateAPaymentDunningAsync(
    @NonNull SimulateAPaymentDunningParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSimulateAPaymentDunningRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<SimulateAPaymentDunningOkResponse>() {})
    );
  }

  private Request buildSimulateAPaymentDunningRequest(@NonNull SimulateAPaymentDunningParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/simulate"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("payment", requestParameters.getPayment())
      .setJsonContent(requestParameters.getRequestBody())
      .build();
  }

  /**
   * Recover a single payment dunning
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @return response of {@code RecoverASinglePaymentDunningOkResponse}
   */
  public RecoverASinglePaymentDunningOkResponse recoverASinglePaymentDunning(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRecoverASinglePaymentDunningRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RecoverASinglePaymentDunningOkResponse>() {});
  }

  /**
   * Recover a single payment dunning
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @return response of {@code CompletableFuture<RecoverASinglePaymentDunningOkResponse>}
   */
  public CompletableFuture<RecoverASinglePaymentDunningOkResponse> recoverASinglePaymentDunningAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRecoverASinglePaymentDunningRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RecoverASinglePaymentDunningOkResponse>() {})
    );
  }

  private Request buildRecoverASinglePaymentDunningRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Event history lists
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link EventHistoryListsParameters} Request Parameters Object
   * @return response of {@code EventHistoryListsOkResponse}
   */
  public EventHistoryListsOkResponse eventHistoryLists(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildEventHistoryListsRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<EventHistoryListsOkResponse>() {});
  }

  /**
   * Event history lists
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link EventHistoryListsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<EventHistoryListsOkResponse>}
   */
  public CompletableFuture<EventHistoryListsOkResponse> eventHistoryListsAsync(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildEventHistoryListsRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<EventHistoryListsOkResponse>() {})
    );
  }

  private Request buildEventHistoryListsRequest(
    @NonNull String id,
    @NonNull EventHistoryListsParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new EventHistoryListsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/history"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * List payments received
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link ListPaymentsReceivedParameters} Request Parameters Object
   * @return response of {@code ListPaymentsReceivedOkResponse}
   */
  public ListPaymentsReceivedOkResponse listPaymentsReceived(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsReceivedRequest(id, requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListPaymentsReceivedOkResponse>() {});
  }

  /**
   * List payments received
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param requestParameters {@link ListPaymentsReceivedParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListPaymentsReceivedOkResponse>}
   */
  public CompletableFuture<ListPaymentsReceivedOkResponse> listPaymentsReceivedAsync(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsReceivedRequest(id, requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListPaymentsReceivedOkResponse>() {})
    );
  }

  private Request buildListPaymentsReceivedRequest(
    @NonNull String id,
    @NonNull ListPaymentsReceivedParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(new ListPaymentsReceivedParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/partialPayments"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * List payments available for payment dunning
   *
   * @return response of {@code ListPaymentsAvailableForPaymentDunningOkResponse}
   */
  public ListPaymentsAvailableForPaymentDunningOkResponse listPaymentsAvailableForPaymentDunning()
    throws ApiError, ValidationException {
    return this.listPaymentsAvailableForPaymentDunning(
        ListPaymentsAvailableForPaymentDunningParameters.builder().build()
      );
  }

  /**
   * List payments available for payment dunning
   *
   * @param requestParameters {@link ListPaymentsAvailableForPaymentDunningParameters} Request Parameters Object
   * @return response of {@code ListPaymentsAvailableForPaymentDunningOkResponse}
   */
  public ListPaymentsAvailableForPaymentDunningOkResponse listPaymentsAvailableForPaymentDunning(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsAvailableForPaymentDunningRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListPaymentsAvailableForPaymentDunningOkResponse>() {});
  }

  /**
   * List payments available for payment dunning
   *
   * @return response of {@code CompletableFuture<ListPaymentsAvailableForPaymentDunningOkResponse>}
   */
  public CompletableFuture<
    ListPaymentsAvailableForPaymentDunningOkResponse
  > listPaymentsAvailableForPaymentDunningAsync() throws ApiError, ValidationException {
    return this.listPaymentsAvailableForPaymentDunningAsync(
        ListPaymentsAvailableForPaymentDunningParameters.builder().build()
      );
  }

  /**
   * List payments available for payment dunning
   *
   * @param requestParameters {@link ListPaymentsAvailableForPaymentDunningParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListPaymentsAvailableForPaymentDunningOkResponse>}
   */
  public CompletableFuture<
    ListPaymentsAvailableForPaymentDunningOkResponse
  > listPaymentsAvailableForPaymentDunningAsync(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListPaymentsAvailableForPaymentDunningRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListPaymentsAvailableForPaymentDunningOkResponse>() {})
    );
  }

  private Request buildListPaymentsAvailableForPaymentDunningRequest(
    @NonNull ListPaymentsAvailableForPaymentDunningParameters requestParameters
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new ListPaymentsAvailableForPaymentDunningParametersValidator("requestParameters")
          .optional()
          .validate(requestParameters)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/paymentsAvailableForDunning"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .build();
  }

  /**
   * Resend documents
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param resendDocumentsRequest {@link ResendDocumentsRequest} Request Body
   * @return response of {@code ResendDocumentsOkResponse}
   */
  public ResendDocumentsOkResponse resendDocuments(
    @NonNull String id,
    @NonNull ResendDocumentsRequest resendDocumentsRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildResendDocumentsRequest(id, resendDocumentsRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ResendDocumentsOkResponse>() {});
  }

  /**
   * Resend documents
   *
   * @param id String Unique identifier of the payment dunning in Asaas
   * @param resendDocumentsRequest {@link ResendDocumentsRequest} Request Body
   * @return response of {@code CompletableFuture<ResendDocumentsOkResponse>}
   */
  public CompletableFuture<ResendDocumentsOkResponse> resendDocumentsAsync(
    @NonNull String id,
    @NonNull ResendDocumentsRequest resendDocumentsRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildResendDocumentsRequest(id, resendDocumentsRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ResendDocumentsOkResponse>() {})
    );
  }

  private Request buildResendDocumentsRequest(
    @NonNull String id,
    @NonNull ResendDocumentsRequest resendDocumentsRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/documents"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setBody(
        new MultipartBody.Builder()
          .setType(MultipartBody.FORM)
          .addFormDataPart(
            "documents",
            String.format("file_%s", UUID.randomUUID()),
            RequestBody.create(
              resendDocumentsRequest.getDocuments().toString(),
              MediaType.parse("application/octet-stream")
            )
          )
          .build()
      )
      .build();
  }

  /**
   * Cancel payment dunning
   *
   * @param id String Unique identifier of the payment dunning to be cancelled.
   * @param input Object Request Body
   * @return response of {@code CancelPaymentDunningOkResponse}
   */
  public CancelPaymentDunningOkResponse cancelPaymentDunning(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelPaymentDunningRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CancelPaymentDunningOkResponse>() {});
  }

  /**
   * Cancel payment dunning
   *
   * @param id String Unique identifier of the payment dunning to be cancelled.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<CancelPaymentDunningOkResponse>}
   */
  public CompletableFuture<CancelPaymentDunningOkResponse> cancelPaymentDunningAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelPaymentDunningRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CancelPaymentDunningOkResponse>() {})
    );
  }

  private Request buildCancelPaymentDunningRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/paymentDunnings/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }
}
