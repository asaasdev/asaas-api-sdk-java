// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerAccountGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.CreateNewCustomerRequest;
import com.asaas.sdk.asaasjavasdk.models.ListCustomersOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListCustomersParameters;
import com.asaas.sdk.asaasjavasdk.models.RemoveCustomerOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RestoreRemovedCustomerOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveNotificationsFromACustomerOkResponse;
import com.asaas.sdk.asaasjavasdk.models.UpdateExistingCustomerRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListCustomersParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * CustomerService Service
 */
public class CustomerService extends BaseService {

  public CustomerService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List customers
   *
   * @return response of {@code ListCustomersOkResponse}
   */
  public ListCustomersOkResponse listCustomers() throws ApiError, ValidationException {
    return this.listCustomers(ListCustomersParameters.builder().build());
  }

  /**
   * List customers
   *
   * @param requestParameters {@link ListCustomersParameters} Request Parameters Object
   * @return response of {@code ListCustomersOkResponse}
   */
  public ListCustomersOkResponse listCustomers(@NonNull ListCustomersParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListCustomersRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListCustomersOkResponse>() {});
  }

  /**
   * List customers
   *
   * @return response of {@code CompletableFuture<ListCustomersOkResponse>}
   */
  public CompletableFuture<ListCustomersOkResponse> listCustomersAsync() throws ApiError, ValidationException {
    return this.listCustomersAsync(ListCustomersParameters.builder().build());
  }

  /**
   * List customers
   *
   * @param requestParameters {@link ListCustomersParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListCustomersOkResponse>}
   */
  public CompletableFuture<ListCustomersOkResponse> listCustomersAsync(
    @NonNull ListCustomersParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListCustomersRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListCustomersOkResponse>() {})
    );
  }

  private Request buildListCustomersRequest(@NonNull ListCustomersParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListCustomersParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("name", requestParameters.getName())
      .setOptionalQueryParameter("email", requestParameters.getEmail())
      .setOptionalQueryParameter("cpfCnpj", requestParameters.getCpfCnpj())
      .setOptionalQueryParameter("groupName", requestParameters.getGroupName())
      .setOptionalQueryParameter("externalReference", requestParameters.getExternalReference())
      .build();
  }

  /**
   * Create new customer
   *
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto createNewCustomer() throws ApiError {
    return this.createNewCustomer(CreateNewCustomerRequest.builder().build());
  }

  /**
   * Create new customer
   *
   * @param createNewCustomerRequest {@link CreateNewCustomerRequest} Request Body
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto createNewCustomer(@NonNull CreateNewCustomerRequest createNewCustomerRequest)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewCustomerRequest(createNewCustomerRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Create new customer
   *
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> createNewCustomerAsync() throws ApiError {
    return this.createNewCustomerAsync(CreateNewCustomerRequest.builder().build());
  }

  /**
   * Create new customer
   *
   * @param createNewCustomerRequest {@link CreateNewCustomerRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> createNewCustomerAsync(
    @NonNull CreateNewCustomerRequest createNewCustomerRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCreateNewCustomerRequest(createNewCustomerRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildCreateNewCustomerRequest(@NonNull CreateNewCustomerRequest createNewCustomerRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(createNewCustomerRequest)
      .build();
  }

  /**
   * Retrieve a single customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto retrieveASingleCustomer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleCustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Retrieve a single customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> retrieveASingleCustomerAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleCustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleCustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Update existing customer
   *
   * @param id String Unique identifier of the customer to be updated.
   * @param updateExistingCustomerRequest {@link UpdateExistingCustomerRequest} Request Body
   * @return response of {@code ApiCustomerAccountGetResponseDto}
   */
  public ApiCustomerAccountGetResponseDto updateExistingCustomer(
    @NonNull String id,
    @NonNull UpdateExistingCustomerRequest updateExistingCustomerRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingCustomerRequest(id, updateExistingCustomerRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {});
  }

  /**
   * Update existing customer
   *
   * @param id String Unique identifier of the customer to be updated.
   * @param updateExistingCustomerRequest {@link UpdateExistingCustomerRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerAccountGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerAccountGetResponseDto> updateExistingCustomerAsync(
    @NonNull String id,
    @NonNull UpdateExistingCustomerRequest updateExistingCustomerRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateExistingCustomerRequest(id, updateExistingCustomerRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerAccountGetResponseDto>() {})
    );
  }

  private Request buildUpdateExistingCustomerRequest(
    @NonNull String id,
    @NonNull UpdateExistingCustomerRequest updateExistingCustomerRequest
  ) {
    return new RequestBuilder(
      HttpMethod.PUT,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(updateExistingCustomerRequest)
      .build();
  }

  /**
   * Remove Customer
   *
   * @param id String Unique identifier of the customer to be removed
   * @return response of {@code RemoveCustomerOkResponse}
   */
  public RemoveCustomerOkResponse removeCustomer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveCustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RemoveCustomerOkResponse>() {});
  }

  /**
   * Remove Customer
   *
   * @param id String Unique identifier of the customer to be removed
   * @return response of {@code CompletableFuture<RemoveCustomerOkResponse>}
   */
  public CompletableFuture<RemoveCustomerOkResponse> removeCustomerAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRemoveCustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RemoveCustomerOkResponse>() {})
    );
  }

  private Request buildRemoveCustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Restore removed customer
   *
   * @param id String Unique identifier of the client to be restored.
   * @param input Object Request Body
   * @return response of {@code RestoreRemovedCustomerOkResponse}
   */
  public RestoreRemovedCustomerOkResponse restoreRemovedCustomer(@NonNull String id, @NonNull Object input)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreRemovedCustomerRequest(id, input);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RestoreRemovedCustomerOkResponse>() {});
  }

  /**
   * Restore removed customer
   *
   * @param id String Unique identifier of the client to be restored.
   * @param input Object Request Body
   * @return response of {@code CompletableFuture<RestoreRemovedCustomerOkResponse>}
   */
  public CompletableFuture<RestoreRemovedCustomerOkResponse> restoreRemovedCustomerAsync(
    @NonNull String id,
    @NonNull Object input
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRestoreRemovedCustomerRequest(id, input);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RestoreRemovedCustomerOkResponse>() {})
    );
  }

  private Request buildRestoreRemovedCustomerRequest(@NonNull String id, @NonNull Object input) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}/restore"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(input)
      .build();
  }

  /**
   * Retrieve notifications from a customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code RetrieveNotificationsFromACustomerOkResponse}
   */
  public RetrieveNotificationsFromACustomerOkResponse retrieveNotificationsFromACustomer(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveNotificationsFromACustomerRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveNotificationsFromACustomerOkResponse>() {});
  }

  /**
   * Retrieve notifications from a customer
   *
   * @param id String Unique customer identifier in Asaas
   * @return response of {@code CompletableFuture<RetrieveNotificationsFromACustomerOkResponse>}
   */
  public CompletableFuture<RetrieveNotificationsFromACustomerOkResponse> retrieveNotificationsFromACustomerAsync(
    @NonNull String id
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveNotificationsFromACustomerRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveNotificationsFromACustomerOkResponse>() {})
    );
  }

  private Request buildRetrieveNotificationsFromACustomerRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/customers/{id}/notifications"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
