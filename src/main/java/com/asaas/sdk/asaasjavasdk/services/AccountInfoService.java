// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiCustomerUpdateRequestGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPaymentCheckoutConfigGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.CheckAccountRegistrationStatusOkResponse;
import com.asaas.sdk.asaasjavasdk.models.DeleteWhiteLabelSubaccountOkResponse;
import com.asaas.sdk.asaasjavasdk.models.DeleteWhiteLabelSubaccountParameters;
import com.asaas.sdk.asaasjavasdk.models.RetrieveAccountFeesOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveAsaasAccountNumberOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveBusinessDataOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrievePersonalizationSettingsOkResponse;
import com.asaas.sdk.asaasjavasdk.models.RetrieveWalletidOkResponse;
import com.asaas.sdk.asaasjavasdk.models.SavePaymentCheckoutPersonalizationRequest;
import com.asaas.sdk.asaasjavasdk.models.UpdateBusinessDataRequest;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

/**
 * AccountInfoService Service
 */
public class AccountInfoService extends BaseService {

  public AccountInfoService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Retrieve business data
   *
   * @return response of {@code RetrieveBusinessDataOkResponse}
   */
  public RetrieveBusinessDataOkResponse retrieveBusinessData() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveBusinessDataRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveBusinessDataOkResponse>() {});
  }

  /**
   * Retrieve business data
   *
   * @return response of {@code CompletableFuture<RetrieveBusinessDataOkResponse>}
   */
  public CompletableFuture<RetrieveBusinessDataOkResponse> retrieveBusinessDataAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveBusinessDataRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveBusinessDataOkResponse>() {})
    );
  }

  private Request buildRetrieveBusinessDataRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/commercialInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Update business data
   *
   * @return response of {@code ApiCustomerUpdateRequestGetResponseDto}
   */
  public ApiCustomerUpdateRequestGetResponseDto updateBusinessData() throws ApiError {
    return this.updateBusinessData(UpdateBusinessDataRequest.builder().build());
  }

  /**
   * Update business data
   *
   * @param updateBusinessDataRequest {@link UpdateBusinessDataRequest} Request Body
   * @return response of {@code ApiCustomerUpdateRequestGetResponseDto}
   */
  public ApiCustomerUpdateRequestGetResponseDto updateBusinessData(
    @NonNull UpdateBusinessDataRequest updateBusinessDataRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateBusinessDataRequest(updateBusinessDataRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {});
  }

  /**
   * Update business data
   *
   * @return response of {@code CompletableFuture<ApiCustomerUpdateRequestGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerUpdateRequestGetResponseDto> updateBusinessDataAsync() throws ApiError {
    return this.updateBusinessDataAsync(UpdateBusinessDataRequest.builder().build());
  }

  /**
   * Update business data
   *
   * @param updateBusinessDataRequest {@link UpdateBusinessDataRequest} Request Body
   * @return response of {@code CompletableFuture<ApiCustomerUpdateRequestGetResponseDto>}
   */
  public CompletableFuture<ApiCustomerUpdateRequestGetResponseDto> updateBusinessDataAsync(
    @NonNull UpdateBusinessDataRequest updateBusinessDataRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildUpdateBusinessDataRequest(updateBusinessDataRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiCustomerUpdateRequestGetResponseDto>() {})
    );
  }

  private Request buildUpdateBusinessDataRequest(@NonNull UpdateBusinessDataRequest updateBusinessDataRequest) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/commercialInfo/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(updateBusinessDataRequest)
      .build();
  }

  /**
   * Retrieve personalization settings
   *
   * @return response of {@code RetrievePersonalizationSettingsOkResponse}
   */
  public RetrievePersonalizationSettingsOkResponse retrievePersonalizationSettings() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePersonalizationSettingsRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrievePersonalizationSettingsOkResponse>() {});
  }

  /**
   * Retrieve personalization settings
   *
   * @return response of {@code CompletableFuture<RetrievePersonalizationSettingsOkResponse>}
   */
  public CompletableFuture<RetrievePersonalizationSettingsOkResponse> retrievePersonalizationSettingsAsync()
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrievePersonalizationSettingsRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrievePersonalizationSettingsOkResponse>() {})
    );
  }

  private Request buildRetrievePersonalizationSettingsRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/paymentCheckoutConfig/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Save payment checkout customization
   *
   * @return response of {@code ApiPaymentCheckoutConfigGetResponseDto}
   */
  public ApiPaymentCheckoutConfigGetResponseDto savePaymentCheckoutPersonalization() throws ApiError {
    return this.savePaymentCheckoutPersonalization(SavePaymentCheckoutPersonalizationRequest.builder().build());
  }

  /**
   * Save payment checkout customization
   *
   * @param savePaymentCheckoutPersonalizationRequest {@link SavePaymentCheckoutPersonalizationRequest} Request Body
   * @return response of {@code ApiPaymentCheckoutConfigGetResponseDto}
   */
  public ApiPaymentCheckoutConfigGetResponseDto savePaymentCheckoutPersonalization(
    @NonNull SavePaymentCheckoutPersonalizationRequest savePaymentCheckoutPersonalizationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSavePaymentCheckoutPersonalizationRequest(savePaymentCheckoutPersonalizationRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {});
  }

  /**
   * Save payment checkout customization
   *
   * @return response of {@code CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto> savePaymentCheckoutPersonalizationAsync()
    throws ApiError {
    return this.savePaymentCheckoutPersonalizationAsync(SavePaymentCheckoutPersonalizationRequest.builder().build());
  }

  /**
   * Save payment checkout customization
   *
   * @param savePaymentCheckoutPersonalizationRequest {@link SavePaymentCheckoutPersonalizationRequest} Request Body
   * @return response of {@code CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto>}
   */
  public CompletableFuture<ApiPaymentCheckoutConfigGetResponseDto> savePaymentCheckoutPersonalizationAsync(
    @NonNull SavePaymentCheckoutPersonalizationRequest savePaymentCheckoutPersonalizationRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildSavePaymentCheckoutPersonalizationRequest(savePaymentCheckoutPersonalizationRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPaymentCheckoutConfigGetResponseDto>() {})
    );
  }

  private Request buildSavePaymentCheckoutPersonalizationRequest(
    @NonNull SavePaymentCheckoutPersonalizationRequest savePaymentCheckoutPersonalizationRequest
  ) {
    MultipartBody.Builder multipartBodyBuilder = new MultipartBody.Builder()
      .setType(MultipartBody.FORM)
      .addFormDataPart("logoBackgroundColor", savePaymentCheckoutPersonalizationRequest.getLogoBackgroundColor())
      .addFormDataPart("infoBackgroundColor", savePaymentCheckoutPersonalizationRequest.getInfoBackgroundColor())
      .addFormDataPart("fontColor", savePaymentCheckoutPersonalizationRequest.getFontColor());
    if (savePaymentCheckoutPersonalizationRequest.getEnabled() != null) {
      multipartBodyBuilder.addFormDataPart(
        "enabled",
        savePaymentCheckoutPersonalizationRequest.getEnabled().toString()
      );
    }
    if (savePaymentCheckoutPersonalizationRequest.getLogoFile() != null) {
      multipartBodyBuilder.addFormDataPart(
        "logoFile",
        String.format("file_%s", UUID.randomUUID()),
        RequestBody.create(
          savePaymentCheckoutPersonalizationRequest.getLogoFile().toString(),
          MediaType.parse("application/octet-stream")
        )
      );
    }
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/paymentCheckoutConfig/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setBody(multipartBodyBuilder.build())
      .build();
  }

  /**
   * Retrieve Asaas account number
   *
   * @return response of {@code RetrieveAsaasAccountNumberOkResponse}
   */
  public RetrieveAsaasAccountNumberOkResponse retrieveAsaasAccountNumber() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAsaasAccountNumberRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveAsaasAccountNumberOkResponse>() {});
  }

  /**
   * Retrieve Asaas account number
   *
   * @return response of {@code CompletableFuture<RetrieveAsaasAccountNumberOkResponse>}
   */
  public CompletableFuture<RetrieveAsaasAccountNumberOkResponse> retrieveAsaasAccountNumberAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAsaasAccountNumberRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveAsaasAccountNumberOkResponse>() {})
    );
  }

  private Request buildRetrieveAsaasAccountNumberRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/accountNumber"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve account fees
   *
   * @return response of {@code RetrieveAccountFeesOkResponse}
   */
  public RetrieveAccountFeesOkResponse retrieveAccountFees() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAccountFeesRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveAccountFeesOkResponse>() {});
  }

  /**
   * Retrieve account fees
   *
   * @return response of {@code CompletableFuture<RetrieveAccountFeesOkResponse>}
   */
  public CompletableFuture<RetrieveAccountFeesOkResponse> retrieveAccountFeesAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveAccountFeesRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveAccountFeesOkResponse>() {})
    );
  }

  private Request buildRetrieveAccountFeesRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/fees/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Check account registration status
   *
   * @return response of {@code CheckAccountRegistrationStatusOkResponse}
   */
  public CheckAccountRegistrationStatusOkResponse checkAccountRegistrationStatus() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCheckAccountRegistrationStatusRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CheckAccountRegistrationStatusOkResponse>() {});
  }

  /**
   * Check account registration status
   *
   * @return response of {@code CompletableFuture<CheckAccountRegistrationStatusOkResponse>}
   */
  public CompletableFuture<CheckAccountRegistrationStatusOkResponse> checkAccountRegistrationStatusAsync()
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCheckAccountRegistrationStatusRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CheckAccountRegistrationStatusOkResponse>() {})
    );
  }

  private Request buildCheckAccountRegistrationStatusRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/status/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Retrieve WalletId
   *
   * @return response of {@code RetrieveWalletidOkResponse}
   */
  public RetrieveWalletidOkResponse retrieveWalletid() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveWalletidRequest();
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<RetrieveWalletidOkResponse>() {});
  }

  /**
   * Retrieve WalletId
   *
   * @return response of {@code CompletableFuture<RetrieveWalletidOkResponse>}
   */
  public CompletableFuture<RetrieveWalletidOkResponse> retrieveWalletidAsync() throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveWalletidRequest();
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<RetrieveWalletidOkResponse>() {})
    );
  }

  private Request buildRetrieveWalletidRequest() {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/wallets/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .build();
  }

  /**
   * Delete White Label subaccount
   *
   * @return response of {@code DeleteWhiteLabelSubaccountOkResponse}
   */
  public DeleteWhiteLabelSubaccountOkResponse deleteWhiteLabelSubaccount() throws ApiError {
    return this.deleteWhiteLabelSubaccount(DeleteWhiteLabelSubaccountParameters.builder().build());
  }

  /**
   * Delete White Label subaccount
   *
   * @param requestParameters {@link DeleteWhiteLabelSubaccountParameters} Request Parameters Object
   * @return response of {@code DeleteWhiteLabelSubaccountOkResponse}
   */
  public DeleteWhiteLabelSubaccountOkResponse deleteWhiteLabelSubaccount(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeleteWhiteLabelSubaccountRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<DeleteWhiteLabelSubaccountOkResponse>() {});
  }

  /**
   * Delete White Label subaccount
   *
   * @return response of {@code CompletableFuture<DeleteWhiteLabelSubaccountOkResponse>}
   */
  public CompletableFuture<DeleteWhiteLabelSubaccountOkResponse> deleteWhiteLabelSubaccountAsync() throws ApiError {
    return this.deleteWhiteLabelSubaccountAsync(DeleteWhiteLabelSubaccountParameters.builder().build());
  }

  /**
   * Delete White Label subaccount
   *
   * @param requestParameters {@link DeleteWhiteLabelSubaccountParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<DeleteWhiteLabelSubaccountOkResponse>}
   */
  public CompletableFuture<DeleteWhiteLabelSubaccountOkResponse> deleteWhiteLabelSubaccountAsync(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDeleteWhiteLabelSubaccountRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<DeleteWhiteLabelSubaccountOkResponse>() {})
    );
  }

  private Request buildDeleteWhiteLabelSubaccountRequest(
    @NonNull DeleteWhiteLabelSubaccountParameters requestParameters
  ) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/myAccount/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("removeReason", requestParameters.getRemoveReason())
      .build();
  }
}
