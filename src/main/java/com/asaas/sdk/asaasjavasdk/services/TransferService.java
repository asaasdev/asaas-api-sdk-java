// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiTransferGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.CancelATransferOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListTransfersOkResponse;
import com.asaas.sdk.asaasjavasdk.models.ListTransfersParameters;
import com.asaas.sdk.asaasjavasdk.models.TransferToAnotherInstitutionAccountOrPixKeyRequest;
import com.asaas.sdk.asaasjavasdk.models.TransferToAsaasAccountOkResponse;
import com.asaas.sdk.asaasjavasdk.models.TransferToAsaasAccountRequest;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.TransferToAnotherInstitutionAccountOrPixKeyRequestValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * TransferService Service
 */
public class TransferService extends BaseService {

  public TransferService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * List transfers
   *
   * @return response of {@code ListTransfersOkResponse}
   */
  public ListTransfersOkResponse listTransfers() throws ApiError {
    return this.listTransfers(ListTransfersParameters.builder().build());
  }

  /**
   * List transfers
   *
   * @param requestParameters {@link ListTransfersParameters} Request Parameters Object
   * @return response of {@code ListTransfersOkResponse}
   */
  public ListTransfersOkResponse listTransfers(@NonNull ListTransfersParameters requestParameters) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListTransfersRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ListTransfersOkResponse>() {});
  }

  /**
   * List transfers
   *
   * @return response of {@code CompletableFuture<ListTransfersOkResponse>}
   */
  public CompletableFuture<ListTransfersOkResponse> listTransfersAsync() throws ApiError {
    return this.listTransfersAsync(ListTransfersParameters.builder().build());
  }

  /**
   * List transfers
   *
   * @param requestParameters {@link ListTransfersParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ListTransfersOkResponse>}
   */
  public CompletableFuture<ListTransfersOkResponse> listTransfersAsync(
    @NonNull ListTransfersParameters requestParameters
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListTransfersRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ListTransfersOkResponse>() {})
    );
  }

  private Request buildListTransfersRequest(@NonNull ListTransfersParameters requestParameters) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("dateCreatedLe[ge]", requestParameters.getDateCreatedLeGe())
      .setOptionalQueryParameter("dateCreatedLe[le]", requestParameters.getDateCreatedLeLe())
      .setOptionalQueryParameter("transferDate[ge]", requestParameters.getTransferDateGe())
      .setOptionalQueryParameter("transferDate[le]", requestParameters.getTransferDateLe())
      .setOptionalQueryParameter("type", requestParameters.getType())
      .build();
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @return response of {@code ApiTransferGetResponseDto}
   */
  public ApiTransferGetResponseDto transferToAnotherInstitutionAccountOrPixKey() throws ApiError, ValidationException {
    return this.transferToAnotherInstitutionAccountOrPixKey(
        TransferToAnotherInstitutionAccountOrPixKeyRequest.builder().build()
      );
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @param transferToAnotherInstitutionAccountOrPixKeyRequest {@link TransferToAnotherInstitutionAccountOrPixKeyRequest} Request Body
   * @return response of {@code ApiTransferGetResponseDto}
   */
  public ApiTransferGetResponseDto transferToAnotherInstitutionAccountOrPixKey(
    @NonNull TransferToAnotherInstitutionAccountOrPixKeyRequest transferToAnotherInstitutionAccountOrPixKeyRequest
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildTransferToAnotherInstitutionAccountOrPixKeyRequest(transferToAnotherInstitutionAccountOrPixKeyRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiTransferGetResponseDto>() {});
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @return response of {@code CompletableFuture<ApiTransferGetResponseDto>}
   */
  public CompletableFuture<ApiTransferGetResponseDto> transferToAnotherInstitutionAccountOrPixKeyAsync()
    throws ApiError, ValidationException {
    return this.transferToAnotherInstitutionAccountOrPixKeyAsync(
        TransferToAnotherInstitutionAccountOrPixKeyRequest.builder().build()
      );
  }

  /**
   * Transfer to another Institution’s account or Pix key
   *
   * @param transferToAnotherInstitutionAccountOrPixKeyRequest {@link TransferToAnotherInstitutionAccountOrPixKeyRequest} Request Body
   * @return response of {@code CompletableFuture<ApiTransferGetResponseDto>}
   */
  public CompletableFuture<ApiTransferGetResponseDto> transferToAnotherInstitutionAccountOrPixKeyAsync(
    @NonNull TransferToAnotherInstitutionAccountOrPixKeyRequest transferToAnotherInstitutionAccountOrPixKeyRequest
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request =
      this.buildTransferToAnotherInstitutionAccountOrPixKeyRequest(transferToAnotherInstitutionAccountOrPixKeyRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiTransferGetResponseDto>() {})
    );
  }

  private Request buildTransferToAnotherInstitutionAccountOrPixKeyRequest(
    @NonNull TransferToAnotherInstitutionAccountOrPixKeyRequest transferToAnotherInstitutionAccountOrPixKeyRequest
  ) throws ValidationException {
    new ViolationAggregator()
      .add(
        new TransferToAnotherInstitutionAccountOrPixKeyRequestValidator(
          "transferToAnotherInstitutionAccountOrPixKeyRequest"
        )
          .optional()
          .validate(transferToAnotherInstitutionAccountOrPixKeyRequest)
      )
      .validateAll();
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(transferToAnotherInstitutionAccountOrPixKeyRequest)
      .build();
  }

  /**
   * Transfer to Asaas account
   *
   * @return response of {@code TransferToAsaasAccountOkResponse}
   */
  public TransferToAsaasAccountOkResponse transferToAsaasAccount() throws ApiError {
    return this.transferToAsaasAccount(TransferToAsaasAccountRequest.builder().build());
  }

  /**
   * Transfer to Asaas account
   *
   * @param transferToAsaasAccountRequest {@link TransferToAsaasAccountRequest} Request Body
   * @return response of {@code TransferToAsaasAccountOkResponse}
   */
  public TransferToAsaasAccountOkResponse transferToAsaasAccount(
    @NonNull TransferToAsaasAccountRequest transferToAsaasAccountRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildTransferToAsaasAccountRequest(transferToAsaasAccountRequest);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<TransferToAsaasAccountOkResponse>() {});
  }

  /**
   * Transfer to Asaas account
   *
   * @return response of {@code CompletableFuture<TransferToAsaasAccountOkResponse>}
   */
  public CompletableFuture<TransferToAsaasAccountOkResponse> transferToAsaasAccountAsync() throws ApiError {
    return this.transferToAsaasAccountAsync(TransferToAsaasAccountRequest.builder().build());
  }

  /**
   * Transfer to Asaas account
   *
   * @param transferToAsaasAccountRequest {@link TransferToAsaasAccountRequest} Request Body
   * @return response of {@code CompletableFuture<TransferToAsaasAccountOkResponse>}
   */
  public CompletableFuture<TransferToAsaasAccountOkResponse> transferToAsaasAccountAsync(
    @NonNull TransferToAsaasAccountRequest transferToAsaasAccountRequest
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildTransferToAsaasAccountRequest(transferToAsaasAccountRequest);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<TransferToAsaasAccountOkResponse>() {})
    );
  }

  private Request buildTransferToAsaasAccountRequest(
    @NonNull TransferToAsaasAccountRequest transferToAsaasAccountRequest
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(transferToAsaasAccountRequest)
      .build();
  }

  /**
   * Retrieve a single transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code ApiTransferGetResponseDto}
   */
  public ApiTransferGetResponseDto retrieveASingleTransfer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleTransferRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiTransferGetResponseDto>() {});
  }

  /**
   * Retrieve a single transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code CompletableFuture<ApiTransferGetResponseDto>}
   */
  public CompletableFuture<ApiTransferGetResponseDto> retrieveASingleTransferAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleTransferRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiTransferGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleTransferRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * Cancel a transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code CancelATransferOkResponse}
   */
  public CancelATransferOkResponse cancelATransfer(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelATransferRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<CancelATransferOkResponse>() {});
  }

  /**
   * Cancel a transfer
   *
   * @param id String Unique transfer identifier in Asaas
   * @return response of {@code CompletableFuture<CancelATransferOkResponse>}
   */
  public CompletableFuture<CancelATransferOkResponse> cancelATransferAsync(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelATransferRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<CancelATransferOkResponse>() {})
    );
  }

  private Request buildCancelATransferRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.DELETE,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/transfers/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }
}
