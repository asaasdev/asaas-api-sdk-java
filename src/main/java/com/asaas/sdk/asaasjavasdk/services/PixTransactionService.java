// This file was generated by liblab | https://liblab.com/

package com.asaas.sdk.asaasjavasdk.services;

import com.asaas.sdk.asaasjavasdk.config.AsaasSdkConfig;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiError;
import com.asaas.sdk.asaasjavasdk.exceptions.ApiErrorResponseDto;
import com.asaas.sdk.asaasjavasdk.http.Environment;
import com.asaas.sdk.asaasjavasdk.http.HttpMethod;
import com.asaas.sdk.asaasjavasdk.http.ModelConverter;
import com.asaas.sdk.asaasjavasdk.http.util.RequestBuilder;
import com.asaas.sdk.asaasjavasdk.models.ApiErrorResponseDtoModel;
import com.asaas.sdk.asaasjavasdk.models.ApiPixQrCodeDecodeRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixQrCodeDecodeResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixTransactionCancelRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixTransactionGetResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixTransactionListResponseDto;
import com.asaas.sdk.asaasjavasdk.models.ApiPixTransactionSaveRequestDto;
import com.asaas.sdk.asaasjavasdk.models.ListTransactionsParameters;
import com.asaas.sdk.asaasjavasdk.validation.ViolationAggregator;
import com.asaas.sdk.asaasjavasdk.validation.exceptions.ValidationException;
import com.asaas.sdk.asaasjavasdk.validation.validators.modelValidators.ListTransactionsParametersValidator;
import com.fasterxml.jackson.core.type.TypeReference;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import lombok.NonNull;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * PixTransactionService Service
 */
public class PixTransactionService extends BaseService {

  public PixTransactionService(@NonNull OkHttpClient httpClient, AsaasSdkConfig config) {
    super(httpClient, config);
  }

  /**
   * Pay a QRCode
   *
   * @return response of {@code ApiPixTransactionGetResponseDto}
   */
  public ApiPixTransactionGetResponseDto payAQrcode() throws ApiError {
    return this.payAQrcode(ApiPixTransactionSaveRequestDto.builder().build());
  }

  /**
   * Pay a QRCode
   *
   * @param apiPixTransactionSaveRequestDto {@link ApiPixTransactionSaveRequestDto} Request Body
   * @return response of {@code ApiPixTransactionGetResponseDto}
   */
  public ApiPixTransactionGetResponseDto payAQrcode(
    @NonNull ApiPixTransactionSaveRequestDto apiPixTransactionSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPayAQrcodeRequest(apiPixTransactionSaveRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {});
  }

  /**
   * Pay a QRCode
   *
   * @return response of {@code CompletableFuture<ApiPixTransactionGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionGetResponseDto> payAQrcodeAsync() throws ApiError {
    return this.payAQrcodeAsync(ApiPixTransactionSaveRequestDto.builder().build());
  }

  /**
   * Pay a QRCode
   *
   * @param apiPixTransactionSaveRequestDto {@link ApiPixTransactionSaveRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPixTransactionGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionGetResponseDto> payAQrcodeAsync(
    @NonNull ApiPixTransactionSaveRequestDto apiPixTransactionSaveRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildPayAQrcodeRequest(apiPixTransactionSaveRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {})
    );
  }

  private Request buildPayAQrcodeRequest(@NonNull ApiPixTransactionSaveRequestDto apiPixTransactionSaveRequestDto) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/pay"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPixTransactionSaveRequestDto)
      .build();
  }

  /**
   * Decode a QRCode for payment
   *
   * @return response of {@code ApiPixQrCodeDecodeResponseDto}
   */
  public ApiPixQrCodeDecodeResponseDto decodeAQrcodeForPayment() throws ApiError {
    return this.decodeAQrcodeForPayment(ApiPixQrCodeDecodeRequestDto.builder().build());
  }

  /**
   * Decode a QRCode for payment
   *
   * @param apiPixQrCodeDecodeRequestDto {@link ApiPixQrCodeDecodeRequestDto} Request Body
   * @return response of {@code ApiPixQrCodeDecodeResponseDto}
   */
  public ApiPixQrCodeDecodeResponseDto decodeAQrcodeForPayment(
    @NonNull ApiPixQrCodeDecodeRequestDto apiPixQrCodeDecodeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDecodeAQrcodeForPaymentRequest(apiPixQrCodeDecodeRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixQrCodeDecodeResponseDto>() {});
  }

  /**
   * Decode a QRCode for payment
   *
   * @return response of {@code CompletableFuture<ApiPixQrCodeDecodeResponseDto>}
   */
  public CompletableFuture<ApiPixQrCodeDecodeResponseDto> decodeAQrcodeForPaymentAsync() throws ApiError {
    return this.decodeAQrcodeForPaymentAsync(ApiPixQrCodeDecodeRequestDto.builder().build());
  }

  /**
   * Decode a QRCode for payment
   *
   * @param apiPixQrCodeDecodeRequestDto {@link ApiPixQrCodeDecodeRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPixQrCodeDecodeResponseDto>}
   */
  public CompletableFuture<ApiPixQrCodeDecodeResponseDto> decodeAQrcodeForPaymentAsync(
    @NonNull ApiPixQrCodeDecodeRequestDto apiPixQrCodeDecodeRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildDecodeAQrcodeForPaymentRequest(apiPixQrCodeDecodeRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixQrCodeDecodeResponseDto>() {})
    );
  }

  private Request buildDecodeAQrcodeForPaymentRequest(
    @NonNull ApiPixQrCodeDecodeRequestDto apiPixQrCodeDecodeRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/qrCodes/decode"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setJsonContent(apiPixQrCodeDecodeRequestDto)
      .build();
  }

  /**
   * Retrieve a single transaction
   *
   * @param id String Unique identifier of the Pix transaction in Asaas
   * @return response of {@code ApiPixTransactionGetResponseDto}
   */
  public ApiPixTransactionGetResponseDto retrieveASingleTransaction(@NonNull String id) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleTransactionRequest(id);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {});
  }

  /**
   * Retrieve a single transaction
   *
   * @param id String Unique identifier of the Pix transaction in Asaas
   * @return response of {@code CompletableFuture<ApiPixTransactionGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionGetResponseDto> retrieveASingleTransactionAsync(@NonNull String id)
    throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildRetrieveASingleTransactionRequest(id);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {})
    );
  }

  private Request buildRetrieveASingleTransactionRequest(@NonNull String id) {
    return new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/{id}"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .build();
  }

  /**
   * List transactions
   *
   * @return response of {@code ApiPixTransactionListResponseDto}
   */
  public ApiPixTransactionListResponseDto listTransactions() throws ApiError, ValidationException {
    return this.listTransactions(ListTransactionsParameters.builder().build());
  }

  /**
   * List transactions
   *
   * @param requestParameters {@link ListTransactionsParameters} Request Parameters Object
   * @return response of {@code ApiPixTransactionListResponseDto}
   */
  public ApiPixTransactionListResponseDto listTransactions(@NonNull ListTransactionsParameters requestParameters)
    throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListTransactionsRequest(requestParameters);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixTransactionListResponseDto>() {});
  }

  /**
   * List transactions
   *
   * @return response of {@code CompletableFuture<ApiPixTransactionListResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionListResponseDto> listTransactionsAsync()
    throws ApiError, ValidationException {
    return this.listTransactionsAsync(ListTransactionsParameters.builder().build());
  }

  /**
   * List transactions
   *
   * @param requestParameters {@link ListTransactionsParameters} Request Parameters Object
   * @return response of {@code CompletableFuture<ApiPixTransactionListResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionListResponseDto> listTransactionsAsync(
    @NonNull ListTransactionsParameters requestParameters
  ) throws ApiError, ValidationException {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildListTransactionsRequest(requestParameters);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionListResponseDto>() {})
    );
  }

  private Request buildListTransactionsRequest(@NonNull ListTransactionsParameters requestParameters)
    throws ValidationException {
    new ViolationAggregator()
      .add(new ListTransactionsParametersValidator("requestParameters").optional().validate(requestParameters))
      .validateAll();
    RequestBuilder builder = new RequestBuilder(
      HttpMethod.GET,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setOptionalQueryParameter("offset", requestParameters.getOffset())
      .setOptionalQueryParameter("limit", requestParameters.getLimit())
      .setOptionalQueryParameter("endToEndIdentifier", requestParameters.getEndToEndIdentifier());
    if (requestParameters.getStatus() != null) {
      builder.setOptionalQueryParameter("status", requestParameters.getStatus().getValue());
    }
    if (requestParameters.getType() != null) {
      builder.setOptionalQueryParameter("type", requestParameters.getType().getValue());
    }
    return builder.build();
  }

  /**
   * Cancel a scheduled transaction
   *
   * @param id String Unique identifier of the Pix transaction scheduled to be canceled.
   * @param apiPixTransactionCancelRequestDto {@link ApiPixTransactionCancelRequestDto} Request Body
   * @return response of {@code ApiPixTransactionGetResponseDto}
   */
  public ApiPixTransactionGetResponseDto cancelAScheduledTransaction(
    @NonNull String id,
    @NonNull ApiPixTransactionCancelRequestDto apiPixTransactionCancelRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAScheduledTransactionRequest(id, apiPixTransactionCancelRequestDto);
    Response response = this.execute(request);
    return ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {});
  }

  /**
   * Cancel a scheduled transaction
   *
   * @param id String Unique identifier of the Pix transaction scheduled to be canceled.
   * @param apiPixTransactionCancelRequestDto {@link ApiPixTransactionCancelRequestDto} Request Body
   * @return response of {@code CompletableFuture<ApiPixTransactionGetResponseDto>}
   */
  public CompletableFuture<ApiPixTransactionGetResponseDto> cancelAScheduledTransactionAsync(
    @NonNull String id,
    @NonNull ApiPixTransactionCancelRequestDto apiPixTransactionCancelRequestDto
  ) throws ApiError {
    this.addErrorMapping(400, ApiErrorResponseDtoModel.class, ApiErrorResponseDto.class);
    Request request = this.buildCancelAScheduledTransactionRequest(id, apiPixTransactionCancelRequestDto);
    CompletableFuture<Response> futureResponse = this.executeAsync(request);
    return futureResponse.thenApplyAsync(response ->
      ModelConverter.convert(response, new TypeReference<ApiPixTransactionGetResponseDto>() {})
    );
  }

  private Request buildCancelAScheduledTransactionRequest(
    @NonNull String id,
    @NonNull ApiPixTransactionCancelRequestDto apiPixTransactionCancelRequestDto
  ) {
    return new RequestBuilder(
      HttpMethod.POST,
      Optional.ofNullable(this.config.getBaseUrl()).orElse(Environment.DEFAULT.getUrl()),
      "v3/pix/transactions/{id}/cancel"
    )
      .setApiKeyAuth(this.config.getApiKeyAuthConfig())
      .setPathParameter("id", id)
      .setJsonContent(apiPixTransactionCancelRequestDto)
      .build();
  }
}
